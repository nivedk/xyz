
xyz_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00006e86  00006f1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039a  008001a6  008001a6  00006fc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006fc0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000400  00000000  00000000  00006ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006f95  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001861  00000000  00000000  0000e385  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003235  00000000  00000000  0000fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001044  00000000  00000000  00012e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d86  00000000  00000000  00013e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000057c6  00000000  00000000  00014be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0001a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	e8 c3       	rjmp	.+2000   	; 0x80a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 0c       	add	r7, r8
      8e:	1e 0c       	add	r1, r14
      90:	27 0c       	add	r2, r7
      92:	30 0c       	add	r3, r0
      94:	39 0c       	add	r3, r9
      96:	42 0c       	add	r4, r2
      98:	4b 0c       	add	r4, r11
      9a:	54 0c       	add	r5, r4
      9c:	5d 0c       	add	r5, r13
      9e:	66 0c       	add	r6, r6
      a0:	6f 0c       	add	r6, r15
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <nominal+0x1be>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__trampolines_end+0x2e8>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__trampolines_end+0x2e6>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__trampolines_end+0x27e>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__trampolines_end+0x272>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	e6 e8       	ldi	r30, 0x86	; 134
     7e0:	fe e6       	ldi	r31, 0x6E	; 110
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	a6 3a       	cpi	r26, 0xA6	; 166
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	a6 ea       	ldi	r26, 0xA6	; 166
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	a0 34       	cpi	r26, 0x40	; 64
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <main>
     806:	0c 94 41 37 	jmp	0x6e82	; 0x6e82 <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { {0.000535150172975969,	-3.12026783469290e-07,	-1.96841119693718e-06},
						{-3.12026783469290e-07,	0.000544550567435251,	-7.23446290799174e-06},
						{-1.96841119693718e-06,	-7.23446290799174e-06,	0.000520788038046765} };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	6c 97       	sbiw	r28, 0x1c	; 28
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9c 8f       	std	Y+28, r25	; 0x1c
     842:	8b 8f       	std	Y+27, r24	; 0x1b
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     844:	80 91 14 05 	lds	r24, 0x0514
     848:	90 91 15 05 	lds	r25, 0x0515
     84c:	a0 91 16 05 	lds	r26, 0x0516
     850:	b0 91 17 05 	lds	r27, 0x0517
     854:	80 93 07 02 	sts	0x0207, r24
     858:	90 93 08 02 	sts	0x0208, r25
     85c:	a0 93 09 02 	sts	0x0209, r26
     860:	b0 93 0a 02 	sts	0x020A, r27
	  v_B[1] = -1*Current_state.mm.B_y;
     864:	80 91 18 05 	lds	r24, 0x0518
     868:	90 91 19 05 	lds	r25, 0x0519
     86c:	a0 91 1a 05 	lds	r26, 0x051A
     870:	b0 91 1b 05 	lds	r27, 0x051B
     874:	b0 58       	subi	r27, 0x80	; 128
     876:	80 93 03 02 	sts	0x0203, r24
     87a:	90 93 04 02 	sts	0x0204, r25
     87e:	a0 93 05 02 	sts	0x0205, r26
     882:	b0 93 06 02 	sts	0x0206, r27
	  v_B[0] = Current_state.mm.B_z;
     886:	80 91 1c 05 	lds	r24, 0x051C
     88a:	90 91 1d 05 	lds	r25, 0x051D
     88e:	a0 91 1e 05 	lds	r26, 0x051E
     892:	b0 91 1f 05 	lds	r27, 0x051F
     896:	80 93 ff 01 	sts	0x01FF, r24
     89a:	90 93 00 02 	sts	0x0200, r25
     89e:	a0 93 01 02 	sts	0x0201, r26
     8a2:	b0 93 02 02 	sts	0x0202, r27
	  
	if(first_B)
     8a6:	80 91 0c 01 	lds	r24, 0x010C
     8aa:	88 23       	and	r24, r24
     8ac:	49 f0       	breq	.+18     	; 0x8c0 <detumbling+0xb4>
	{
		
		copy_vector(v_B, v_B_old);
     8ae:	66 ea       	ldi	r22, 0xA6	; 166
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <copy_vector>
		first_B = 0;
     8ba:	10 92 0c 01 	sts	0x010C, r1
     8be:	89 c0       	rjmp	.+274    	; 0x9d2 <detumbling+0x1c6>
     8c0:	0f ef       	ldi	r16, 0xFF	; 255
     8c2:	11 e0       	ldi	r17, 0x01	; 1
     8c4:	0f 2e       	mov	r0, r31
     8c6:	f6 ea       	ldi	r31, 0xA6	; 166
     8c8:	af 2e       	mov	r10, r31
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	bf 2e       	mov	r11, r31
     8ce:	f0 2d       	mov	r31, r0
     8d0:	1e 01       	movw	r2, r28
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	28 0e       	add	r2, r24
     8d6:	31 1c       	adc	r3, r1
     8d8:	fe 01       	movw	r30, r28
     8da:	31 96       	adiw	r30, 0x01	; 1
     8dc:	fa 8f       	std	Y+26, r31	; 0x1a
     8de:	e9 8f       	std	Y+25, r30	; 0x19
     8e0:	0f 2e       	mov	r0, r31
     8e2:	fb e0       	ldi	r31, 0x0B	; 11
     8e4:	8f 2e       	mov	r8, r31
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	9f 2e       	mov	r9, r31
     8ea:	f0 2d       	mov	r31, r0
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8ec:	f8 01       	movw	r30, r16
     8ee:	c1 90       	ld	r12, Z+
     8f0:	d1 90       	ld	r13, Z+
     8f2:	e1 90       	ld	r14, Z+
     8f4:	f1 90       	ld	r15, Z+
     8f6:	8f 01       	movw	r16, r30
     8f8:	f5 01       	movw	r30, r10
     8fa:	41 90       	ld	r4, Z+
     8fc:	51 90       	ld	r5, Z+
     8fe:	61 90       	ld	r6, Z+
     900:	71 90       	ld	r7, Z+
     902:	5f 01       	movw	r10, r30
     904:	a3 01       	movw	r20, r6
     906:	92 01       	movw	r18, r4
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     91c:	f1 01       	movw	r30, r2
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	1f 01       	movw	r2, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     928:	a3 01       	movw	r20, r6
     92a:	92 01       	movw	r18, r4
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     940:	e9 8d       	ldd	r30, Y+25	; 0x19
     942:	fa 8d       	ldd	r31, Y+26	; 0x1a
     944:	61 93       	st	Z+, r22
     946:	71 93       	st	Z+, r23
     948:	81 93       	st	Z+, r24
     94a:	91 93       	st	Z+, r25
     94c:	fa 8f       	std	Y+26, r31	; 0x1a
     94e:	e9 8f       	std	Y+25, r30	; 0x19
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     950:	08 15       	cp	r16, r8
     952:	19 05       	cpc	r17, r9
     954:	59 f6       	brne	.-106    	; 0x8ec <detumbling+0xe0>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <vector_norm>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e8       	ldi	r24, 0x80	; 128
     968:	9f eb       	ldi	r25, 0xBF	; 191
     96a:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     96e:	6b 01       	movw	r12, r22
     970:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	6d 85       	ldd	r22, Y+13	; 0x0d
     978:	7e 85       	ldd	r23, Y+14	; 0x0e
     97a:	8f 85       	ldd	r24, Y+15	; 0x0f
     97c:	98 89       	ldd	r25, Y+16	; 0x10
     97e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     982:	eb 8d       	ldd	r30, Y+27	; 0x1b
     984:	fc 8d       	ldd	r31, Y+28	; 0x1c
     986:	60 83       	st	Z, r22
     988:	71 83       	std	Z+1, r23	; 0x01
     98a:	82 83       	std	Z+2, r24	; 0x02
     98c:	93 83       	std	Z+3, r25	; 0x03
     98e:	a7 01       	movw	r20, r14
     990:	96 01       	movw	r18, r12
     992:	69 89       	ldd	r22, Y+17	; 0x11
     994:	7a 89       	ldd	r23, Y+18	; 0x12
     996:	8b 89       	ldd	r24, Y+19	; 0x13
     998:	9c 89       	ldd	r25, Y+20	; 0x14
     99a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     99e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9a0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9a2:	64 83       	std	Z+4, r22	; 0x04
     9a4:	75 83       	std	Z+5, r23	; 0x05
     9a6:	86 83       	std	Z+6, r24	; 0x06
     9a8:	97 83       	std	Z+7, r25	; 0x07
     9aa:	a7 01       	movw	r20, r14
     9ac:	96 01       	movw	r18, r12
     9ae:	6d 89       	ldd	r22, Y+21	; 0x15
     9b0:	7e 89       	ldd	r23, Y+22	; 0x16
     9b2:	8f 89       	ldd	r24, Y+23	; 0x17
     9b4:	98 8d       	ldd	r25, Y+24	; 0x18
     9b6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     9ba:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9bc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9be:	60 87       	std	Z+8, r22	; 0x08
     9c0:	71 87       	std	Z+9, r23	; 0x09
     9c2:	82 87       	std	Z+10, r24	; 0x0a
     9c4:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     9c6:	66 ea       	ldi	r22, 0xA6	; 166
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <copy_vector>
	
}
     9d2:	6c 96       	adiw	r28, 0x1c	; 28
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	6f 90       	pop	r6
     9fa:	5f 90       	pop	r5
     9fc:	4f 90       	pop	r4
     9fe:	3f 90       	pop	r3
     a00:	2f 90       	pop	r2
     a02:	08 95       	ret

00000a04 <nominal>:
 

void nominal(vector v_m_N)
{
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	e3 97       	sbiw	r28, 0x33	; 51
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	9b ab       	std	Y+51, r25	; 0x33
     a3a:	8a ab       	std	Y+50, r24	; 0x32
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     a3c:	60 91 14 05 	lds	r22, 0x0514
     a40:	70 91 15 05 	lds	r23, 0x0515
     a44:	80 91 16 05 	lds	r24, 0x0516
     a48:	90 91 17 05 	lds	r25, 0x0517
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e4       	ldi	r19, 0x40	; 64
     a50:	4c e1       	ldi	r20, 0x1C	; 28
     a52:	56 e4       	ldi	r21, 0x46	; 70
     a54:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     a58:	60 93 07 02 	sts	0x0207, r22
     a5c:	70 93 08 02 	sts	0x0208, r23
     a60:	80 93 09 02 	sts	0x0209, r24
     a64:	90 93 0a 02 	sts	0x020A, r25
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     a68:	60 91 18 05 	lds	r22, 0x0518
     a6c:	70 91 19 05 	lds	r23, 0x0519
     a70:	80 91 1a 05 	lds	r24, 0x051A
     a74:	90 91 1b 05 	lds	r25, 0x051B
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e4       	ldi	r19, 0x40	; 64
     a7c:	4c e1       	ldi	r20, 0x1C	; 28
     a7e:	56 e4       	ldi	r21, 0x46	; 70
     a80:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	b0 58       	subi	r27, 0x80	; 128
     a8a:	80 93 03 02 	sts	0x0203, r24
     a8e:	90 93 04 02 	sts	0x0204, r25
     a92:	a0 93 05 02 	sts	0x0205, r26
     a96:	b0 93 06 02 	sts	0x0206, r27
	     v_B[0] = Current_state.mm.B_z/10000;
     a9a:	60 91 1c 05 	lds	r22, 0x051C
     a9e:	70 91 1d 05 	lds	r23, 0x051D
     aa2:	80 91 1e 05 	lds	r24, 0x051E
     aa6:	90 91 1f 05 	lds	r25, 0x051F
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e4       	ldi	r19, 0x40	; 64
     aae:	4c e1       	ldi	r20, 0x1C	; 28
     ab0:	56 e4       	ldi	r21, 0x46	; 70
     ab2:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     ab6:	60 93 ff 01 	sts	0x01FF, r22
     aba:	70 93 00 02 	sts	0x0200, r23
     abe:	80 93 01 02 	sts	0x0201, r24
     ac2:	90 93 02 02 	sts	0x0202, r25
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 57 1d 	call	0x3aae	; 0x3aae <vector_norm>
     ace:	2b 01       	movw	r4, r22
     ad0:	3c 01       	movw	r6, r24
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     ad2:	80 90 94 04 	lds	r8, 0x0494
     ad6:	90 90 95 04 	lds	r9, 0x0495
     ada:	a0 90 96 04 	lds	r10, 0x0496
     ade:	b0 90 97 04 	lds	r11, 0x0497
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f8 e8       	ldi	r31, 0x88	; 136
     ae6:	ef 2e       	mov	r14, r31
     ae8:	f4 e0       	ldi	r31, 0x04	; 4
     aea:	ff 2e       	mov	r15, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	9e 87       	std	Y+14, r25	; 0x0e
     af4:	8d 87       	std	Y+13, r24	; 0x0d
     af6:	0f 2e       	mov	r0, r31
     af8:	f4 e9       	ldi	r31, 0x94	; 148
     afa:	cf 2e       	mov	r12, r31
     afc:	f4 e0       	ldi	r31, 0x04	; 4
     afe:	df 2e       	mov	r13, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	07 ee       	ldi	r16, 0xE7	; 231
     b04:	11 e0       	ldi	r17, 0x01	; 1
     b06:	1c 01       	movw	r2, r24
     b08:	f7 01       	movw	r30, r14
     b0a:	61 91       	ld	r22, Z+
     b0c:	71 91       	ld	r23, Z+
     b0e:	81 91       	ld	r24, Z+
     b10:	91 91       	ld	r25, Z+
     b12:	7f 01       	movw	r14, r30
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     b1c:	a5 01       	movw	r20, r10
     b1e:	94 01       	movw	r18, r8
     b20:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     b24:	d1 01       	movw	r26, r2
     b26:	6d 93       	st	X+, r22
     b28:	7d 93       	st	X+, r23
     b2a:	8d 93       	st	X+, r24
     b2c:	9d 93       	st	X+, r25
     b2e:	1d 01       	movw	r2, r26
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	f8 01       	movw	r30, r16
     b3e:	60 81       	ld	r22, Z
     b40:	71 81       	ldd	r23, Z+1	; 0x01
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     b4a:	d8 01       	movw	r26, r16
     b4c:	6d 93       	st	X+, r22
     b4e:	7d 93       	st	X+, r23
     b50:	8d 93       	st	X+, r24
     b52:	9d 93       	st	X+, r25
     b54:	8d 01       	movw	r16, r26
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b56:	ec 14       	cp	r14, r12
     b58:	fd 04       	cpc	r15, r13
     b5a:	b1 f6       	brne	.-84     	; 0xb08 <nominal+0x104>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     b5c:	a3 01       	movw	r20, r6
     b5e:	92 01       	movw	r18, r4
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     b68:	6a a7       	std	Y+42, r22	; 0x2a
     b6a:	7b a7       	std	Y+43, r23	; 0x2b
     b6c:	8c a7       	std	Y+44, r24	; 0x2c
     b6e:	9d a7       	std	Y+45, r25	; 0x2d
     b70:	e2 eb       	ldi	r30, 0xB2	; 178
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	ff a3       	std	Y+39, r31	; 0x27
     b76:	ee a3       	std	Y+38, r30	; 0x26
     b78:	21 2c       	mov	r2, r1
     b7a:	31 2c       	mov	r3, r1
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f7 ee       	ldi	r31, 0xE7	; 231
     b80:	cf 2e       	mov	r12, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	df 2e       	mov	r13, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	ce a6       	std	Y+46, r12	; 0x2e
     b8a:	d6 01       	movw	r26, r12
     b8c:	bf a7       	std	Y+47, r27	; 0x2f
     b8e:	cd 84       	ldd	r12, Y+13	; 0x0d
     b90:	c8 aa       	std	Y+48, r12	; 0x30
     b92:	de 84       	ldd	r13, Y+14	; 0x0e
     b94:	d9 aa       	std	Y+49, r13	; 0x31
     b96:	3d 8e       	std	Y+29, r3	; 0x1d
     b98:	2c 8e       	std	Y+28, r2	; 0x1c
     b9a:	ee a0       	ldd	r14, Y+38	; 0x26
     b9c:	ff a0       	ldd	r15, Y+39	; 0x27
     b9e:	f9 a6       	std	Y+41, r15	; 0x29
     ba0:	e8 a6       	std	Y+40, r14	; 0x28
     ba2:	83 ef       	ldi	r24, 0xF3	; 243
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	98 8f       	std	Y+24, r25	; 0x18
     ba8:	8f 8b       	std	Y+23, r24	; 0x17
     baa:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bac:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bae:	a8 5d       	subi	r26, 0xD8	; 216
     bb0:	be 4f       	sbci	r27, 0xFE	; 254
     bb2:	ba 8f       	std	Y+26, r27	; 0x1a
     bb4:	a9 8f       	std	Y+25, r26	; 0x19
     bb6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bb8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bba:	e4 5b       	subi	r30, 0xB4	; 180
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	fe 8b       	std	Y+22, r31	; 0x16
     bc0:	ed 8b       	std	Y+21, r30	; 0x15
     bc2:	ce a4       	ldd	r12, Y+46	; 0x2e
     bc4:	c9 8a       	std	Y+17, r12	; 0x11
     bc6:	df a4       	ldd	r13, Y+47	; 0x2f
     bc8:	da 8a       	std	Y+18, r13	; 0x12
     bca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bce:	80 59       	subi	r24, 0x90	; 144
     bd0:	9e 4f       	sbci	r25, 0xFE	; 254
     bd2:	9c 8b       	std	Y+20, r25	; 0x14
     bd4:	8b 8b       	std	Y+19, r24	; 0x13
     bd6:	c8 a8       	ldd	r12, Y+48	; 0x30
     bd8:	cf 86       	std	Y+15, r12	; 0x0f
     bda:	d9 a8       	ldd	r13, Y+49	; 0x31
     bdc:	d8 8a       	std	Y+16, r13	; 0x10
     bde:	03 e0       	ldi	r16, 0x03	; 3
     be0:	1b 8e       	std	Y+27, r1	; 0x1b
     be2:	21 2c       	mov	r2, r1
     be4:	31 2c       	mov	r3, r1
     be6:	10 e0       	ldi	r17, 0x00	; 0
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     be8:	af 85       	ldd	r26, Y+15	; 0x0f
     bea:	b8 89       	ldd	r27, Y+16	; 0x10
     bec:	6d 91       	ld	r22, X+
     bee:	7d 91       	ld	r23, X+
     bf0:	8d 91       	ld	r24, X+
     bf2:	9d 91       	ld	r25, X+
     bf4:	b8 8b       	std	Y+16, r27	; 0x10
     bf6:	af 87       	std	Y+15, r26	; 0x0f
     bf8:	eb 89       	ldd	r30, Y+19	; 0x13
     bfa:	fc 89       	ldd	r31, Y+20	; 0x14
     bfc:	21 91       	ld	r18, Z+
     bfe:	31 91       	ld	r19, Z+
     c00:	41 91       	ld	r20, Z+
     c02:	51 91       	ld	r21, Z+
     c04:	fc 8b       	std	Y+20, r31	; 0x14
     c06:	eb 8b       	std	Y+19, r30	; 0x13
     c08:	a9 89       	ldd	r26, Y+17	; 0x11
     c0a:	ba 89       	ldd	r27, Y+18	; 0x12
     c0c:	8d 90       	ld	r8, X+
     c0e:	9d 90       	ld	r9, X+
     c10:	ad 90       	ld	r10, X+
     c12:	bd 90       	ld	r11, X+
     c14:	ba 8b       	std	Y+18, r27	; 0x12
     c16:	a9 8b       	std	Y+17, r26	; 0x11
     c18:	ed 89       	ldd	r30, Y+21	; 0x15
     c1a:	fe 89       	ldd	r31, Y+22	; 0x16
     c1c:	41 90       	ld	r4, Z+
     c1e:	51 90       	ld	r5, Z+
     c20:	61 90       	ld	r6, Z+
     c22:	71 90       	ld	r7, Z+
     c24:	fe 8b       	std	Y+22, r31	; 0x16
     c26:	ed 8b       	std	Y+21, r30	; 0x15
     c28:	af 89       	ldd	r26, Y+23	; 0x17
     c2a:	b8 8d       	ldd	r27, Y+24	; 0x18
     c2c:	cd 90       	ld	r12, X+
     c2e:	dd 90       	ld	r13, X+
     c30:	ed 90       	ld	r14, X+
     c32:	fd 90       	ld	r15, X+
     c34:	b8 8f       	std	Y+24, r27	; 0x18
     c36:	af 8b       	std	Y+23, r26	; 0x17
     c38:	ce 8e       	std	Y+30, r12	; 0x1e
     c3a:	df 8e       	std	Y+31, r13	; 0x1f
     c3c:	e8 a2       	std	Y+32, r14	; 0x20
     c3e:	f9 a2       	std	Y+33, r15	; 0x21
     c40:	a9 8d       	ldd	r26, Y+25	; 0x19
     c42:	ba 8d       	ldd	r27, Y+26	; 0x1a
     c44:	cd 90       	ld	r12, X+
     c46:	dd 90       	ld	r13, X+
     c48:	ed 90       	ld	r14, X+
     c4a:	fd 90       	ld	r15, X+
     c4c:	ba 8f       	std	Y+26, r27	; 0x1a
     c4e:	a9 8f       	std	Y+25, r26	; 0x19
     c50:	ca a2       	std	Y+34, r12	; 0x22
     c52:	db a2       	std	Y+35, r13	; 0x23
     c54:	ec a2       	std	Y+36, r14	; 0x24
     c56:	fd a2       	std	Y+37, r15	; 0x25
     c58:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	a3 01       	movw	r20, r6
     c62:	92 01       	movw	r18, r4
     c64:	c5 01       	movw	r24, r10
     c66:	b4 01       	movw	r22, r8
     c68:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     c78:	6b 01       	movw	r12, r22
     c7a:	7c 01       	movw	r14, r24
     c7c:	2a a1       	ldd	r18, Y+34	; 0x22
     c7e:	3b a1       	ldd	r19, Y+35	; 0x23
     c80:	4c a1       	ldd	r20, Y+36	; 0x24
     c82:	5d a1       	ldd	r21, Y+37	; 0x25
     c84:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c86:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c88:	88 a1       	ldd	r24, Y+32	; 0x20
     c8a:	99 a1       	ldd	r25, Y+33	; 0x21
     c8c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c7 01       	movw	r24, r14
     c96:	b6 01       	movw	r22, r12
     c98:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     c9c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c9e:	32 2d       	mov	r19, r2
     ca0:	43 2d       	mov	r20, r3
     ca2:	51 2f       	mov	r21, r17
     ca4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     ca8:	01 50       	subi	r16, 0x01	; 1
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     caa:	29 f0       	breq	.+10     	; 0xcb6 <nominal+0x2b2>
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     cac:	6b 8f       	std	Y+27, r22	; 0x1b
     cae:	27 2e       	mov	r2, r23
     cb0:	38 2e       	mov	r3, r24
     cb2:	19 2f       	mov	r17, r25
     cb4:	99 cf       	rjmp	.-206    	; 0xbe8 <nominal+0x1e4>
    v_m_temp[i] /= norm_B * norm_B;	
     cb6:	2a a5       	ldd	r18, Y+42	; 0x2a
     cb8:	3b a5       	ldd	r19, Y+43	; 0x2b
     cba:	4c a5       	ldd	r20, Y+44	; 0x2c
     cbc:	5d a5       	ldd	r21, Y+45	; 0x2d
     cbe:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     cc2:	e8 a5       	ldd	r30, Y+40	; 0x28
     cc4:	f9 a5       	ldd	r31, Y+41	; 0x29
     cc6:	60 83       	st	Z, r22
     cc8:	71 83       	std	Z+1, r23	; 0x01
     cca:	82 83       	std	Z+2, r24	; 0x02
     ccc:	93 83       	std	Z+3, r25	; 0x03
     cce:	8e a1       	ldd	r24, Y+38	; 0x26
     cd0:	9f a1       	ldd	r25, Y+39	; 0x27
     cd2:	04 96       	adiw	r24, 0x04	; 4
     cd4:	9f a3       	std	Y+39, r25	; 0x27
     cd6:	8e a3       	std	Y+38, r24	; 0x26
     cd8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     cda:	bd 8d       	ldd	r27, Y+29	; 0x1d
     cdc:	1c 96       	adiw	r26, 0x0c	; 12
     cde:	bd 8f       	std	Y+29, r27	; 0x1d
     ce0:	ac 8f       	std	Y+28, r26	; 0x1c
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     ce2:	94 97       	sbiw	r26, 0x24	; 36
     ce4:	09 f0       	breq	.+2      	; 0xce8 <nominal+0x2e4>
     ce6:	59 cf       	rjmp	.-334    	; 0xb9a <nominal+0x196>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     ce8:	4a a9       	ldd	r20, Y+50	; 0x32
     cea:	5b a9       	ldd	r21, Y+51	; 0x33
     cec:	6f ef       	ldi	r22, 0xFF	; 255
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	82 eb       	ldi	r24, 0xB2	; 178
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cf8:	60 91 e6 01 	lds	r22, 0x01E6
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__floatunsisf>
     d06:	ab 01       	movw	r20, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	8a a9       	ldd	r24, Y+50	; 0x32
     d0c:	9b a9       	ldd	r25, Y+51	; 0x33
     d0e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     d12:	e3 96       	adiw	r28, 0x33	; 51
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	3f 90       	pop	r3
     d40:	2f 90       	pop	r2
     d42:	08 95       	ret

00000d44 <apply_torque>:

void apply_torque(vector v_m)
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	8c 01       	movw	r16, r24
     d64:	ec 01       	movw	r28, r24
     d66:	0f 2e       	mov	r0, r31
     d68:	f3 e0       	ldi	r31, 0x03	; 3
     d6a:	9f 2e       	mov	r9, r31
     d6c:	f0 2d       	mov	r31, r0
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d6e:	48 80       	ld	r4, Y
     d70:	59 80       	ldd	r5, Y+1	; 0x01
     d72:	6a 80       	ldd	r6, Y+2	; 0x02
     d74:	7b 80       	ldd	r7, Y+3	; 0x03
     d76:	73 01       	movw	r14, r6
     d78:	62 01       	movw	r12, r4
     d7a:	e8 94       	clt
     d7c:	f7 f8       	bld	r15, 7
     d7e:	23 e3       	ldi	r18, 0x33	; 51
     d80:	33 e3       	ldi	r19, 0x33	; 51
     d82:	43 e7       	ldi	r20, 0x73	; 115
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	c7 01       	movw	r24, r14
     d88:	b6 01       	movw	r22, r12
     d8a:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
     d8e:	18 16       	cp	r1, r24
     d90:	fc f4       	brge	.+62     	; 0xdd0 <apply_torque+0x8c>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d92:	a3 01       	movw	r20, r6
     d94:	92 01       	movw	r18, r4
     d96:	c7 01       	movw	r24, r14
     d98:	b6 01       	movw	r22, r12
     d9a:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f eb       	ldi	r21, 0xBF	; 191
     da6:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
     daa:	81 11       	cpse	r24, r1
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <apply_torque+0x7c>
			v_m[i] = -1*M_MAX;
     dae:	83 e3       	ldi	r24, 0x33	; 51
     db0:	93 e3       	ldi	r25, 0x33	; 51
     db2:	a3 e7       	ldi	r26, 0x73	; 115
     db4:	bf eb       	ldi	r27, 0xBF	; 191
     db6:	88 83       	st	Y, r24
     db8:	99 83       	std	Y+1, r25	; 0x01
     dba:	aa 83       	std	Y+2, r26	; 0x02
     dbc:	bb 83       	std	Y+3, r27	; 0x03
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <apply_torque+0x8c>
			else
			v_m[i] = M_MAX;
     dc0:	83 e3       	ldi	r24, 0x33	; 51
     dc2:	93 e3       	ldi	r25, 0x33	; 51
     dc4:	a3 e7       	ldi	r26, 0x73	; 115
     dc6:	bf e3       	ldi	r27, 0x3F	; 63
     dc8:	88 83       	st	Y, r24
     dca:	99 83       	std	Y+1, r25	; 0x01
     dcc:	aa 83       	std	Y+2, r26	; 0x02
     dce:	bb 83       	std	Y+3, r27	; 0x03
     dd0:	9a 94       	dec	r9
     dd2:	24 96       	adiw	r28, 0x04	; 4
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     dd4:	91 10       	cpse	r9, r1
     dd6:	cb cf       	rjmp	.-106    	; 0xd6e <apply_torque+0x2a>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     dd8:	45 ed       	ldi	r20, 0xD5	; 213
     dda:	5f e0       	ldi	r21, 0x0F	; 15
     ddc:	61 ec       	ldi	r22, 0xC1	; 193
     dde:	7e e3       	ldi	r23, 0x3E	; 62
     de0:	c8 01       	movw	r24, r16
     de2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <scalar_into_vector>
     de6:	e8 01       	movw	r28, r16
     de8:	0f 2e       	mov	r0, r31
     dea:	f3 e0       	ldi	r31, 0x03	; 3
     dec:	9f 2e       	mov	r9, r31
     dee:	f0 2d       	mov	r31, r0
	
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     df0:	48 80       	ld	r4, Y
     df2:	59 80       	ldd	r5, Y+1	; 0x01
     df4:	6a 80       	ldd	r6, Y+2	; 0x02
     df6:	7b 80       	ldd	r7, Y+3	; 0x03
     df8:	73 01       	movw	r14, r6
     dfa:	62 01       	movw	r12, r4
     dfc:	e8 94       	clt
     dfe:	f7 f8       	bld	r15, 7
     e00:	28 ea       	ldi	r18, 0xA8	; 168
     e02:	36 ec       	ldi	r19, 0xC6	; 198
     e04:	4b e8       	ldi	r20, 0x8B	; 139
     e06:	5e e3       	ldi	r21, 0x3E	; 62
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
     e10:	18 16       	cp	r1, r24
     e12:	fc f4       	brge	.+62     	; 0xe52 <apply_torque+0x10e>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     e14:	a3 01       	movw	r20, r6
     e16:	92 01       	movw	r18, r4
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f eb       	ldi	r21, 0xBF	; 191
     e28:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
     e2c:	81 11       	cpse	r24, r1
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <apply_torque+0xfe>
			v_m[i] = -1*I_MAX;
     e30:	88 ea       	ldi	r24, 0xA8	; 168
     e32:	96 ec       	ldi	r25, 0xC6	; 198
     e34:	ab e8       	ldi	r26, 0x8B	; 139
     e36:	be eb       	ldi	r27, 0xBE	; 190
     e38:	88 83       	st	Y, r24
     e3a:	99 83       	std	Y+1, r25	; 0x01
     e3c:	aa 83       	std	Y+2, r26	; 0x02
     e3e:	bb 83       	std	Y+3, r27	; 0x03
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <apply_torque+0x10e>
			else
			v_m[i] = I_MAX;
     e42:	88 ea       	ldi	r24, 0xA8	; 168
     e44:	96 ec       	ldi	r25, 0xC6	; 198
     e46:	ab e8       	ldi	r26, 0x8B	; 139
     e48:	be e3       	ldi	r27, 0x3E	; 62
     e4a:	88 83       	st	Y, r24
     e4c:	99 83       	std	Y+1, r25	; 0x01
     e4e:	aa 83       	std	Y+2, r26	; 0x02
     e50:	bb 83       	std	Y+3, r27	; 0x03
     e52:	9a 94       	dec	r9
     e54:	24 96       	adiw	r28, 0x04	; 4
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	
	for(i = 0; i < 3; i++)
     e56:	91 10       	cpse	r9, r1
     e58:	cb cf       	rjmp	.-106    	; 0xdf0 <apply_torque+0xac>
     e5a:	78 01       	movw	r14, r16
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
	{
		//sen = ((int8_t)((lambda))/2);
		st =(int32_t)(v_m[i]*65535000);
     e60:	d7 01       	movw	r26, r14
     e62:	6d 91       	ld	r22, X+
     e64:	7d 91       	ld	r23, X+
     e66:	8d 91       	ld	r24, X+
     e68:	9d 91       	ld	r25, X+
     e6a:	7d 01       	movw	r14, r26
     e6c:	26 e0       	ldi	r18, 0x06	; 6
     e6e:	3f ef       	ldi	r19, 0xFF	; 255
     e70:	49 e7       	ldi	r20, 0x79	; 121
     e72:	5c e4       	ldi	r21, 0x4C	; 76
     e74:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     e78:	0e 94 21 33 	call	0x6642	; 0x6642 <__fixsfsi>
     e7c:	b7 2e       	mov	r11, r23
     e7e:	c8 2e       	mov	r12, r24
     e80:	d9 2e       	mov	r13, r25
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		sen2 = (int8_t)(st>>16);
		sen3 = (int8_t)(st>>24);
		transmit_UART0(sen);
     e82:	86 2f       	mov	r24, r22
     e84:	99 27       	eor	r25, r25
     e86:	87 fd       	sbrc	r24, 7
     e88:	90 95       	com	r25
     e8a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <transmit_UART0>
		transmit_UART0(sen1);
     e8e:	8b 2d       	mov	r24, r11
     e90:	99 27       	eor	r25, r25
     e92:	87 fd       	sbrc	r24, 7
     e94:	90 95       	com	r25
     e96:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <transmit_UART0>
		transmit_UART0(sen2);
     e9a:	8c 2d       	mov	r24, r12
     e9c:	99 27       	eor	r25, r25
     e9e:	87 fd       	sbrc	r24, 7
     ea0:	90 95       	com	r25
     ea2:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <transmit_UART0>
		transmit_UART0(sen3);
     ea6:	8d 2d       	mov	r24, r13
     ea8:	99 27       	eor	r25, r25
     eaa:	87 fd       	sbrc	r24, 7
     eac:	90 95       	com	r25
     eae:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <transmit_UART0>
	int8_t sen,sen1,sen2,sen3;
	int32_t st;
	// x.f=3.145689123;
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
     eb2:	21 96       	adiw	r28, 0x01	; 1
     eb4:	c3 30       	cpi	r28, 0x03	; 3
     eb6:	d1 05       	cpc	r29, r1
     eb8:	99 f6       	brne	.-90     	; 0xe60 <apply_torque+0x11c>
	transmit_UART0(buf3);*/	
	}
	
	
	sen = Mode;
	transmit_UART0(sen);
     eba:	80 91 26 01 	lds	r24, 0x0126
     ebe:	99 27       	eor	r25, r25
     ec0:	87 fd       	sbrc	r24, 7
     ec2:	90 95       	com	r25
     ec4:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <transmit_UART0>
	sen = gps_power;
	transmit_UART0(sen);
     ec8:	80 91 c2 01 	lds	r24, 0x01C2
     ecc:	99 27       	eor	r25, r25
     ece:	87 fd       	sbrc	r24, 7
     ed0:	90 95       	com	r25
     ed2:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <transmit_UART0>
	////////////////////////
	if (v_m[0] > 0)
     ed6:	f8 01       	movw	r30, r16
     ed8:	c0 80       	ld	r12, Z
     eda:	d1 80       	ldd	r13, Z+1	; 0x01
     edc:	e2 80       	ldd	r14, Z+2	; 0x02
     ede:	f3 80       	ldd	r15, Z+3	; 0x03
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	c7 01       	movw	r24, r14
     ee8:	b6 01       	movw	r22, r12
     eea:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
     eee:	18 16       	cp	r1, r24
     ef0:	c4 f4       	brge	.+48     	; 0xf22 <apply_torque+0x1de>
	{
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     f02:	28 ea       	ldi	r18, 0xA8	; 168
     f04:	36 ec       	ldi	r19, 0xC6	; 198
     f06:	4b e8       	ldi	r20, 0x8B	; 139
     f08:	5e e3       	ldi	r21, 0x3E	; 62
     f0a:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     f0e:	9f 77       	andi	r25, 0x7F	; 127
     f10:	0e 94 26 33 	call	0x664c	; 0x664c <__fixunssfsi>
     f14:	70 93 28 05 	sts	0x0528, r23
     f18:	60 93 27 05 	sts	0x0527, r22
		Current_state.pwm.x_dir = 0;
     f1c:	10 92 2d 05 	sts	0x052D, r1
     f20:	1e c0       	rjmp	.+60     	; 0xf5e <apply_torque+0x21a>
	}
	else
	{
		Current_state.pwm.x = fabs( (1+(v_m[0]/ I_MAX))*PWM_RES );
     f22:	28 ea       	ldi	r18, 0xA8	; 168
     f24:	36 ec       	ldi	r19, 0xC6	; 198
     f26:	4b e8       	ldi	r20, 0x8B	; 139
     f28:	5e e3       	ldi	r21, 0x3E	; 62
     f2a:	c7 01       	movw	r24, r14
     f2c:	b6 01       	movw	r22, r12
     f2e:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     f4a:	9f 77       	andi	r25, 0x7F	; 127
     f4c:	0e 94 26 33 	call	0x664c	; 0x664c <__fixunssfsi>
     f50:	70 93 28 05 	sts	0x0528, r23
     f54:	60 93 27 05 	sts	0x0527, r22
		Current_state.pwm.x_dir = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 2d 05 	sts	0x052D, r24
	}
	if (v_m[1] > 0)
     f5e:	d8 01       	movw	r26, r16
     f60:	14 96       	adiw	r26, 0x04	; 4
     f62:	cd 90       	ld	r12, X+
     f64:	dd 90       	ld	r13, X+
     f66:	ed 90       	ld	r14, X+
     f68:	fc 90       	ld	r15, X
     f6a:	17 97       	sbiw	r26, 0x07	; 7
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	a9 01       	movw	r20, r18
     f72:	c7 01       	movw	r24, r14
     f74:	b6 01       	movw	r22, r12
     f76:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	c4 f4       	brge	.+48     	; 0xfae <apply_torque+0x26a>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	c7 01       	movw	r24, r14
     f88:	b6 01       	movw	r22, r12
     f8a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     f8e:	28 ea       	ldi	r18, 0xA8	; 168
     f90:	36 ec       	ldi	r19, 0xC6	; 198
     f92:	4b e8       	ldi	r20, 0x8B	; 139
     f94:	5e e3       	ldi	r21, 0x3E	; 62
     f96:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     f9a:	9f 77       	andi	r25, 0x7F	; 127
     f9c:	0e 94 26 33 	call	0x664c	; 0x664c <__fixunssfsi>
     fa0:	70 93 2a 05 	sts	0x052A, r23
     fa4:	60 93 29 05 	sts	0x0529, r22
		Current_state.pwm.y_dir = 0;
     fa8:	10 92 2e 05 	sts	0x052E, r1
     fac:	1e c0       	rjmp	.+60     	; 0xfea <apply_torque+0x2a6>
	}
	else
	{
		Current_state.pwm.y = fabs( (1+(v_m[1]/ I_MAX))*PWM_RES );
     fae:	28 ea       	ldi	r18, 0xA8	; 168
     fb0:	36 ec       	ldi	r19, 0xC6	; 198
     fb2:	4b e8       	ldi	r20, 0x8B	; 139
     fb4:	5e e3       	ldi	r21, 0x3E	; 62
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
     fd6:	9f 77       	andi	r25, 0x7F	; 127
     fd8:	0e 94 26 33 	call	0x664c	; 0x664c <__fixunssfsi>
     fdc:	70 93 2a 05 	sts	0x052A, r23
     fe0:	60 93 29 05 	sts	0x0529, r22
		Current_state.pwm.y_dir = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 2e 05 	sts	0x052E, r24
	}
	if (v_m[2] > 0)
     fea:	f8 01       	movw	r30, r16
     fec:	c0 84       	ldd	r12, Z+8	; 0x08
     fee:	d1 84       	ldd	r13, Z+9	; 0x09
     ff0:	e2 84       	ldd	r14, Z+10	; 0x0a
     ff2:	f3 84       	ldd	r15, Z+11	; 0x0b
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    1002:	18 16       	cp	r1, r24
    1004:	c4 f4       	brge	.+48     	; 0x1036 <apply_torque+0x2f2>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	c7 01       	movw	r24, r14
    1010:	b6 01       	movw	r22, r12
    1012:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    1016:	28 ea       	ldi	r18, 0xA8	; 168
    1018:	36 ec       	ldi	r19, 0xC6	; 198
    101a:	4b e8       	ldi	r20, 0x8B	; 139
    101c:	5e e3       	ldi	r21, 0x3E	; 62
    101e:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    1022:	9f 77       	andi	r25, 0x7F	; 127
    1024:	0e 94 26 33 	call	0x664c	; 0x664c <__fixunssfsi>
    1028:	70 93 2c 05 	sts	0x052C, r23
    102c:	60 93 2b 05 	sts	0x052B, r22
		Current_state.pwm.z_dir = 0;
    1030:	10 92 2f 05 	sts	0x052F, r1
    1034:	1e c0       	rjmp	.+60     	; 0x1072 <apply_torque+0x32e>
	}
	else
	{
		Current_state.pwm.z = fabs( (1+(v_m[2]/ I_MAX))*PWM_RES );
    1036:	28 ea       	ldi	r18, 0xA8	; 168
    1038:	36 ec       	ldi	r19, 0xC6	; 198
    103a:	4b e8       	ldi	r20, 0x8B	; 139
    103c:	5e e3       	ldi	r21, 0x3E	; 62
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	57 e4       	ldi	r21, 0x47	; 71
    105a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    105e:	9f 77       	andi	r25, 0x7F	; 127
    1060:	0e 94 26 33 	call	0x664c	; 0x664c <__fixunssfsi>
    1064:	70 93 2c 05 	sts	0x052C, r23
    1068:	60 93 2b 05 	sts	0x052B, r22
		Current_state.pwm.z_dir = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 2f 05 	sts	0x052F, r24
	}

	////////////////////////
	
PORTA=0xA0;
    1072:	80 ea       	ldi	r24, 0xA0	; 160
    1074:	8b bb       	out	0x1b, r24	; 27
}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	08 95       	ret

00001096 <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	e0 97       	sbiw	r28, 0x30	; 48
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
 // wdt_reset();
  ///Watchdog enabled for the control law
  //watch_dog(T_CONTROL);
  
  /// Take B readings from Magnetometer, clear torquer first
  reset_PWM();//see that current are not setting becoz of this
    10ca:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <reset_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ce:	8f ec       	ldi	r24, 0xCF	; 207
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <control+0x3c>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <control+0x42>
    10d8:	00 00       	nop
  
  _delay_ms(1);
  
  read_MM();
    10da:	0e 94 0e 20 	call	0x401c	; 0x401c <read_MM>
  // write apply torquer function here
   if(Mode == DETUMBLING)
    10de:	80 91 26 01 	lds	r24, 0x0126
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	21 f4       	brne	.+8      	; 0x10ee <control+0x58>
   apply_torque(v_m_D);
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	2c de       	rcall	.-936    	; 0xd44 <apply_torque>
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <control+0x62>
   else if(Mode == NOMINAL)
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <control+0x62>
   apply_torque(v_m_N);
    10f2:	ce 01       	movw	r24, r28
    10f4:	0d 96       	adiw	r24, 0x0d	; 13
    10f6:	26 de       	rcall	.-948    	; 0xd44 <apply_torque>
   
  set_PWM();
    10f8:	0e 94 3a 20 	call	0x4074	; 0x4074 <set_PWM>
  
 // _delay_ms(10);
  detumbling(v_m_D);
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	85 db       	rcall	.-2294   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    1102:	80 91 14 05 	lds	r24, 0x0514
    1106:	90 91 15 05 	lds	r25, 0x0515
    110a:	a0 91 16 05 	lds	r26, 0x0516
    110e:	b0 91 17 05 	lds	r27, 0x0517
    1112:	80 93 07 02 	sts	0x0207, r24
    1116:	90 93 08 02 	sts	0x0208, r25
    111a:	a0 93 09 02 	sts	0x0209, r26
    111e:	b0 93 0a 02 	sts	0x020A, r27
  v_B[1] = -1*Current_state.mm.B_y;
    1122:	80 91 18 05 	lds	r24, 0x0518
    1126:	90 91 19 05 	lds	r25, 0x0519
    112a:	a0 91 1a 05 	lds	r26, 0x051A
    112e:	b0 91 1b 05 	lds	r27, 0x051B
    1132:	b0 58       	subi	r27, 0x80	; 128
    1134:	80 93 03 02 	sts	0x0203, r24
    1138:	90 93 04 02 	sts	0x0204, r25
    113c:	a0 93 05 02 	sts	0x0205, r26
    1140:	b0 93 06 02 	sts	0x0206, r27
  v_B[0] = Current_state.mm.B_z;
    1144:	80 91 1c 05 	lds	r24, 0x051C
    1148:	90 91 1d 05 	lds	r25, 0x051D
    114c:	a0 91 1e 05 	lds	r26, 0x051E
    1150:	b0 91 1f 05 	lds	r27, 0x051F
    1154:	80 93 ff 01 	sts	0x01FF, r24
    1158:	90 93 00 02 	sts	0x0200, r25
    115c:	a0 93 01 02 	sts	0x0201, r26
    1160:	b0 93 02 02 	sts	0x0202, r27
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		
		if ((gps_power==2))
    1164:	80 91 c2 01 	lds	r24, 0x01C2
    1168:	90 91 c3 01 	lds	r25, 0x01C3
    116c:	02 97       	sbiw	r24, 0x02	; 2
    116e:	59 f4       	brne	.+22     	; 0x1186 <__stack+0x87>
		{
  // uint8_t q= 90;
   //transmit_UART0(q);
    read_GPS();
    1170:	0e 94 09 20 	call	0x4012	; 0x4012 <read_GPS>
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	e9 e6       	ldi	r30, 0x69	; 105
    1178:	28 e1       	ldi	r18, 0x18	; 24
    117a:	91 50       	subi	r25, 0x01	; 1
    117c:	e0 40       	sbci	r30, 0x00	; 0
    117e:	20 40       	sbci	r18, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <__stack+0x7b>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <__stack+0x85>
    1184:	00 00       	nop
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    1186:	80 91 27 01 	lds	r24, 0x0127
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	19 f4       	brne	.+6      	; 0x1194 <__stack+0x95>
      copy_gps_reading();  //check if gps is on but pdop data
    118e:	0e 94 7f 20 	call	0x40fe	; 0x40fe <copy_gps_reading>
    1192:	65 c0       	rjmp	.+202    	; 0x125e <__stack+0x15f>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    1194:	20 91 a4 04 	lds	r18, 0x04A4
    1198:	30 91 a5 04 	lds	r19, 0x04A5
    119c:	40 91 a6 04 	lds	r20, 0x04A6
    11a0:	50 91 a7 04 	lds	r21, 0x04A7
    11a4:	60 91 a8 04 	lds	r22, 0x04A8
    11a8:	70 91 a9 04 	lds	r23, 0x04A9
    11ac:	80 91 aa 04 	lds	r24, 0x04AA
    11b0:	90 91 ab 04 	lds	r25, 0x04AB
    11b4:	a2 e0       	ldi	r26, 0x02	; 2
    11b6:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <__adddi3_s8>
    11ba:	20 93 a4 04 	sts	0x04A4, r18
    11be:	30 93 a5 04 	sts	0x04A5, r19
    11c2:	40 93 a6 04 	sts	0x04A6, r20
    11c6:	50 93 a7 04 	sts	0x04A7, r21
    11ca:	60 93 a8 04 	sts	0x04A8, r22
    11ce:	70 93 a9 04 	sts	0x04A9, r23
    11d2:	80 93 aa 04 	sts	0x04AA, r24
    11d6:	90 93 ab 04 	sts	0x04AB, r25
	  seconds_since_pivot += FRAME_TIME;
    11da:	20 91 9c 04 	lds	r18, 0x049C
    11de:	30 91 9d 04 	lds	r19, 0x049D
    11e2:	40 91 9e 04 	lds	r20, 0x049E
    11e6:	50 91 9f 04 	lds	r21, 0x049F
    11ea:	60 91 a0 04 	lds	r22, 0x04A0
    11ee:	70 91 a1 04 	lds	r23, 0x04A1
    11f2:	80 91 a2 04 	lds	r24, 0x04A2
    11f6:	90 91 a3 04 	lds	r25, 0x04A3
    11fa:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <__adddi3_s8>
    11fe:	20 93 9c 04 	sts	0x049C, r18
    1202:	30 93 9d 04 	sts	0x049D, r19
    1206:	40 93 9e 04 	sts	0x049E, r20
    120a:	50 93 9f 04 	sts	0x049F, r21
    120e:	60 93 a0 04 	sts	0x04A0, r22
    1212:	70 93 a1 04 	sts	0x04A1, r23
    1216:	80 93 a2 04 	sts	0x04A2, r24
    121a:	90 93 a3 04 	sts	0x04A3, r25
	  // Current_state.gps.time_since_reading += FRAME_TIME;
	  /////////////////////////////////////////
	  Current_state.gps.seconds += FRAME_TIME;
    121e:	e5 ee       	ldi	r30, 0xE5	; 229
    1220:	f4 e0       	ldi	r31, 0x04	; 4
    1222:	80 81       	ld	r24, Z
    1224:	8e 5f       	subi	r24, 0xFE	; 254
    1226:	80 83       	st	Z, r24
	  if(Current_state.gps.seconds > 58)
    1228:	80 81       	ld	r24, Z
    122a:	8b 33       	cpi	r24, 0x3B	; 59
    122c:	38 f0       	brcs	.+14     	; 0x123c <__stack+0x13d>
	  {
		  Current_state.gps.seconds = 0;
    122e:	10 92 e5 04 	sts	0x04E5, r1
		  Current_state.gps.minutes += 1;
    1232:	e4 ee       	ldi	r30, 0xE4	; 228
    1234:	f4 e0       	ldi	r31, 0x04	; 4
    1236:	80 81       	ld	r24, Z
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 83       	st	Z, r24
		  
	  }
	  if (Current_state.gps.minutes > 59)
    123c:	80 91 e4 04 	lds	r24, 0x04E4
    1240:	8c 33       	cpi	r24, 0x3C	; 60
    1242:	38 f0       	brcs	.+14     	; 0x1252 <__stack+0x153>
	  {
		  Current_state.gps.minutes = 0;
    1244:	10 92 e4 04 	sts	0x04E4, r1
		  Current_state.gps.hours += 1;
    1248:	e3 ee       	ldi	r30, 0xE3	; 227
    124a:	f4 e0       	ldi	r31, 0x04	; 4
    124c:	80 81       	ld	r24, Z
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	80 83       	st	Z, r24
	  }
	  if (Current_state.gps.hours > 23)
    1252:	80 91 e3 04 	lds	r24, 0x04E3
    1256:	88 31       	cpi	r24, 0x18	; 24
    1258:	10 f0       	brcs	.+4      	; 0x125e <__stack+0x15f>
	  {
		  Current_state.gps.hours = 0;
    125a:	10 92 e3 04 	sts	0x04E3, r1

	  }
	  
    //uint8_t e=100;
    //transmit_UART0(e);
    read_SS();
    125e:	0e 94 0b 20 	call	0x4016	; 0x4016 <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    1262:	0e 94 70 24 	call	0x48e0	; 0x48e0 <light_cal>
    1266:	80 93 e6 01 	sts	0x01E6, r24
	if(GPS_done != 255)
    126a:	80 91 27 01 	lds	r24, 0x0127
    126e:	8f 3f       	cpi	r24, 0xFF	; 255
    1270:	09 f4       	brne	.+2      	; 0x1274 <__stack+0x175>
    1272:	43 c0       	rjmp	.+134    	; 0x12fa <__stack+0x1fb>
	{
		
    sgp_orbit_propagator();
    1274:	0e 94 87 22 	call	0x450e	; 0x450e <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    1278:	ce 01       	movw	r24, r28
    127a:	49 96       	adiw	r24, 0x19	; 25
    127c:	0e 94 26 23 	call	0x464c	; 0x464c <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    1280:	ce 01       	movw	r24, r28
    1282:	85 96       	adiw	r24, 0x25	; 37
    1284:	0e 94 f5 23 	call	0x47ea	; 0x47ea <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    1288:	25 ee       	ldi	r18, 0xE5	; 229
    128a:	31 e0       	ldi	r19, 0x01	; 1
    128c:	48 e8       	ldi	r20, 0x88	; 136
    128e:	54 e0       	ldi	r21, 0x04	; 4
    1290:	be 01       	movw	r22, r28
    1292:	67 5e       	subi	r22, 0xE7	; 231
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	ce 01       	movw	r24, r28
    1298:	85 96       	adiw	r24, 0x25	; 37
    129a:	0e 94 95 24 	call	0x492a	; 0x492a <quest>
    129e:	80 93 e6 01 	sts	0x01E6, r24
    
    omega_estimation(q_o, v_w);
    12a2:	63 ef       	ldi	r22, 0xF3	; 243
    12a4:	71 e0       	ldi	r23, 0x01	; 1
    12a6:	88 e8       	ldi	r24, 0x88	; 136
    12a8:	94 e0       	ldi	r25, 0x04	; 4
    12aa:	0e 94 90 28 	call	0x5120	; 0x5120 <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    12ae:	60 91 e6 01 	lds	r22, 0x01E6
    12b2:	80 91 e5 01 	lds	r24, 0x01E5
    12b6:	68 9f       	mul	r22, r24
    12b8:	b0 01       	movw	r22, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	88 27       	eor	r24, r24
    12be:	77 fd       	sbrc	r23, 7
    12c0:	80 95       	com	r24
    12c2:	98 2f       	mov	r25, r24
    12c4:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    12c8:	ab 01       	movw	r20, r22
    12ca:	bc 01       	movw	r22, r24
    12cc:	83 ef       	ldi	r24, 0xF3	; 243
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	0e 94 56 1f 	call	0x3eac	; 0x3eac <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    12d4:	83 ef       	ldi	r24, 0xF3	; 243
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 57 1d 	call	0x3aae	; 0x3aae <vector_norm>
    12dc:	60 93 98 04 	sts	0x0498, r22
    12e0:	70 93 99 04 	sts	0x0499, r23
    12e4:	80 93 9a 04 	sts	0x049A, r24
    12e8:	90 93 9b 04 	sts	0x049B, r25
    convert_unit_quaternion(q_o);
    12ec:	88 e8       	ldi	r24, 0x88	; 136
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    12f4:	ce 01       	movw	r24, r28
    12f6:	0d 96       	adiw	r24, 0x0d	; 13
    12f8:	85 db       	rcall	.-2294   	; 0xa04 <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    12fa:	80 91 d8 01 	lds	r24, 0x01D8
    12fe:	88 37       	cpi	r24, 0x78	; 120
    1300:	dc f4       	brge	.+54     	; 0x1338 <__stack+0x239>
    1302:	20 91 31 05 	lds	r18, 0x0531
    1306:	30 91 32 05 	lds	r19, 0x0532
    130a:	40 91 33 05 	lds	r20, 0x0533
    130e:	50 91 34 05 	lds	r21, 0x0534
    1312:	60 91 35 05 	lds	r22, 0x0535
    1316:	70 91 36 05 	lds	r23, 0x0536
    131a:	80 91 37 05 	lds	r24, 0x0537
    131e:	90 91 38 05 	lds	r25, 0x0538
    1322:	20 32       	cpi	r18, 0x20	; 32
    1324:	31 4a       	sbci	r19, 0xA1	; 161
    1326:	47 40       	sbci	r20, 0x07	; 7
    1328:	51 05       	cpc	r21, r1
    132a:	61 05       	cpc	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	81 05       	cpc	r24, r1
    1330:	91 05       	cpc	r25, r1
    1332:	09 f0       	breq	.+2      	; 0x1336 <__stack+0x237>
    1334:	08 f4       	brcc	.+2      	; 0x1338 <__stack+0x239>
    1336:	6b c0       	rjmp	.+214    	; 0x140e <__stack+0x30f>
		{    avg_md_new = 0;
    1338:	10 92 c6 01 	sts	0x01C6, r1
    133c:	10 92 c7 01 	sts	0x01C7, r1
    1340:	10 92 c8 01 	sts	0x01C8, r1
    1344:	10 92 c9 01 	sts	0x01C9, r1
			star_flag = 121;                 // 91
    1348:	89 e7       	ldi	r24, 0x79	; 121
    134a:	80 93 d8 01 	sts	0x01D8, r24
			if (light ==1)
    134e:	80 91 e6 01 	lds	r24, 0x01E6
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	21 f5       	brne	.+72     	; 0x139e <__stack+0x29f>
			{
				time_l = time_l +2;
    1356:	80 91 be 01 	lds	r24, 0x01BE
    135a:	90 91 bf 01 	lds	r25, 0x01BF
    135e:	02 96       	adiw	r24, 0x02	; 2
    1360:	90 93 bf 01 	sts	0x01BF, r25
    1364:	80 93 be 01 	sts	0x01BE, r24
				time_e =0;
    1368:	10 92 c1 01 	sts	0x01C1, r1
    136c:	10 92 c0 01 	sts	0x01C0, r1
				start_time = time_l % 720;   //690
    1370:	60 ed       	ldi	r22, 0xD0	; 208
    1372:	72 e0       	ldi	r23, 0x02	; 2
    1374:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__divmodhi4>
    1378:	90 93 d7 01 	sts	0x01D7, r25
    137c:	80 93 d6 01 	sts	0x01D6, r24
				if (start_time <600)       //600
    1380:	88 35       	cpi	r24, 0x58	; 88
    1382:	92 40       	sbci	r25, 0x02	; 2
    1384:	2c f4       	brge	.+10     	; 0x1390 <__stack+0x291>
				{
					gps_power =0;          // 0 
    1386:	10 92 c3 01 	sts	0x01C3, r1
    138a:	10 92 c2 01 	sts	0x01C2, r1
    138e:	29 c1       	rjmp	.+594    	; 0x15e2 <__stack+0x4e3>
				}
				else
				{
					gps_power =2;
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	90 93 c3 01 	sts	0x01C3, r25
    1398:	80 93 c2 01 	sts	0x01C2, r24
    139c:	22 c1       	rjmp	.+580    	; 0x15e2 <__stack+0x4e3>
				}
			}
			else
			{
				start_time =0;
    139e:	10 92 d7 01 	sts	0x01D7, r1
    13a2:	10 92 d6 01 	sts	0x01D6, r1
				time_e = time_e +2;
    13a6:	60 91 c0 01 	lds	r22, 0x01C0
    13aa:	70 91 c1 01 	lds	r23, 0x01C1
    13ae:	6e 5f       	subi	r22, 0xFE	; 254
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	70 93 c1 01 	sts	0x01C1, r23
    13b6:	60 93 c0 01 	sts	0x01C0, r22
				if (time_e > (eclipse_time-150))
    13ba:	88 27       	eor	r24, r24
    13bc:	77 fd       	sbrc	r23, 7
    13be:	80 95       	com	r24
    13c0:	98 2f       	mov	r25, r24
    13c2:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    13c6:	6b 01       	movw	r12, r22
    13c8:	7c 01       	movw	r14, r24
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	46 e1       	ldi	r20, 0x16	; 22
    13d0:	53 e4       	ldi	r21, 0x43	; 67
    13d2:	60 91 04 01 	lds	r22, 0x0104
    13d6:	70 91 05 01 	lds	r23, 0x0105
    13da:	80 91 06 01 	lds	r24, 0x0106
    13de:	90 91 07 01 	lds	r25, 0x0107
    13e2:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	c7 01       	movw	r24, r14
    13ec:	b6 01       	movw	r22, r12
    13ee:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    13f2:	18 16       	cp	r1, r24
    13f4:	3c f4       	brge	.+14     	; 0x1404 <__stack+0x305>
				{
					gps_power =2;
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	90 93 c3 01 	sts	0x01C3, r25
    13fe:	80 93 c2 01 	sts	0x01C2, r24
    1402:	ef c0       	rjmp	.+478    	; 0x15e2 <__stack+0x4e3>
				}
				else
				{
					gps_power =0;
    1404:	10 92 c3 01 	sts	0x01C3, r1
    1408:	10 92 c2 01 	sts	0x01C2, r1
    140c:	ea c0       	rjmp	.+468    	; 0x15e2 <__stack+0x4e3>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    140e:	ce 01       	movw	r24, r28
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	0e 94 57 1d 	call	0x3aae	; 0x3aae <vector_norm>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
    141a:	60 93 d2 01 	sts	0x01D2, r22
    141e:	70 93 d3 01 	sts	0x01D3, r23
    1422:	80 93 d4 01 	sts	0x01D4, r24
    1426:	90 93 d5 01 	sts	0x01D5, r25
			md_start = norm_m_d * light;
    142a:	60 91 e6 01 	lds	r22, 0x01E6
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	c7 01       	movw	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    1444:	6b 01       	movw	r12, r22
    1446:	7c 01       	movw	r14, r24
    1448:	60 93 ce 01 	sts	0x01CE, r22
    144c:	70 93 cf 01 	sts	0x01CF, r23
    1450:	80 93 d0 01 	sts	0x01D0, r24
    1454:	90 93 d1 01 	sts	0x01D1, r25
			if (md_start != 0)
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <__stack+0x369>
    1466:	60 c0       	rjmp	.+192    	; 0x1528 <__stack+0x429>
			{
				if (num==2)
    1468:	00 91 08 01 	lds	r16, 0x0108
    146c:	10 91 09 01 	lds	r17, 0x0109
    1470:	02 30       	cpi	r16, 0x02	; 2
    1472:	11 05       	cpc	r17, r1
    1474:	a9 f4       	brne	.+42     	; 0x14a0 <__stack+0x3a1>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    1476:	a7 01       	movw	r20, r14
    1478:	96 01       	movw	r18, r12
    147a:	c7 01       	movw	r24, r14
    147c:	b6 01       	movw	r22, r12
    147e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    148e:	60 93 c6 01 	sts	0x01C6, r22
    1492:	70 93 c7 01 	sts	0x01C7, r23
    1496:	80 93 c8 01 	sts	0x01C8, r24
    149a:	90 93 c9 01 	sts	0x01C9, r25
    149e:	2c c0       	rjmp	.+88     	; 0x14f8 <__stack+0x3f9>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    14a0:	b8 01       	movw	r22, r16
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	71 09       	sbc	r23, r1
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__floatunsisf>
    14ae:	20 91 ca 01 	lds	r18, 0x01CA
    14b2:	30 91 cb 01 	lds	r19, 0x01CB
    14b6:	40 91 cc 01 	lds	r20, 0x01CC
    14ba:	50 91 cd 01 	lds	r21, 0x01CD
    14be:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	c7 01       	movw	r24, r14
    14c8:	b6 01       	movw	r22, r12
    14ca:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    14ce:	6b 01       	movw	r12, r22
    14d0:	7c 01       	movw	r14, r24
    14d2:	b8 01       	movw	r22, r16
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__floatunsisf>
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	c7 01       	movw	r24, r14
    14e2:	b6 01       	movw	r22, r12
    14e4:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    14e8:	60 93 c6 01 	sts	0x01C6, r22
    14ec:	70 93 c7 01 	sts	0x01C7, r23
    14f0:	80 93 c8 01 	sts	0x01C8, r24
    14f4:	90 93 c9 01 	sts	0x01C9, r25
				}
				num = num +1;
    14f8:	0f 5f       	subi	r16, 0xFF	; 255
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	10 93 09 01 	sts	0x0109, r17
    1500:	00 93 08 01 	sts	0x0108, r16
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1504:	c0 90 c6 01 	lds	r12, 0x01C6
    1508:	d0 90 c7 01 	lds	r13, 0x01C7
    150c:	e0 90 c8 01 	lds	r14, 0x01C8
    1510:	f0 90 c9 01 	lds	r15, 0x01C9
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	c7 01       	movw	r24, r14
    151c:	b6 01       	movw	r22, r12
    151e:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    1522:	81 11       	cpse	r24, r1
    1524:	10 c0       	rjmp	.+32     	; 0x1546 <__stack+0x447>
    1526:	1a c0       	rjmp	.+52     	; 0x155c <__stack+0x45d>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	90 93 09 01 	sts	0x0109, r25
    1530:	80 93 08 01 	sts	0x0108, r24
				avg_md_new = 0;
    1534:	10 92 c6 01 	sts	0x01C6, r1
    1538:	10 92 c7 01 	sts	0x01C7, r1
    153c:	10 92 c8 01 	sts	0x01C8, r1
    1540:	10 92 c9 01 	sts	0x01C9, r1
    1544:	0b c0       	rjmp	.+22     	; 0x155c <__stack+0x45d>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1546:	2a e0       	ldi	r18, 0x0A	; 10
    1548:	37 ed       	ldi	r19, 0xD7	; 215
    154a:	43 e2       	ldi	r20, 0x23	; 35
    154c:	5d e3       	ldi	r21, 0x3D	; 61
    154e:	c7 01       	movw	r24, r14
    1550:	b6 01       	movw	r22, r12
    1552:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    1556:	88 23       	and	r24, r24
    1558:	84 f0       	brlt	.+32     	; 0x157a <__stack+0x47b>
    155a:	19 c0       	rjmp	.+50     	; 0x158e <__stack+0x48f>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	60 91 ca 01 	lds	r22, 0x01CA
    1566:	70 91 cb 01 	lds	r23, 0x01CB
    156a:	80 91 cc 01 	lds	r24, 0x01CC
    156e:	90 91 cd 01 	lds	r25, 0x01CD
    1572:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    1576:	88 23       	and	r24, r24
    1578:	51 f0       	breq	.+20     	; 0x158e <__stack+0x48f>
			{
				flag_on = flag_on +2;
    157a:	80 91 c4 01 	lds	r24, 0x01C4
    157e:	90 91 c5 01 	lds	r25, 0x01C5
    1582:	02 96       	adiw	r24, 0x02	; 2
    1584:	90 93 c5 01 	sts	0x01C5, r25
    1588:	80 93 c4 01 	sts	0x01C4, r24
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__stack+0x497>
			}
			else
			{
				flag_on = 0;
    158e:	10 92 c5 01 	sts	0x01C5, r1
    1592:	10 92 c4 01 	sts	0x01C4, r1
			}
			if (flag_on > gps_start)
    1596:	60 91 c4 01 	lds	r22, 0x01C4
    159a:	70 91 c5 01 	lds	r23, 0x01C5
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__floatunsisf>
    15a6:	20 91 00 01 	lds	r18, 0x0100
    15aa:	30 91 01 01 	lds	r19, 0x0101
    15ae:	40 91 02 01 	lds	r20, 0x0102
    15b2:	50 91 03 01 	lds	r21, 0x0103
    15b6:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	64 f4       	brge	.+24     	; 0x15d6 <__stack+0x4d7>
			{
				gps_power = 2;
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	90 93 c3 01 	sts	0x01C3, r25
    15c6:	80 93 c2 01 	sts	0x01C2, r24
				star_flag = star_flag +2;
    15ca:	80 91 d8 01 	lds	r24, 0x01D8
    15ce:	8e 5f       	subi	r24, 0xFE	; 254
    15d0:	80 93 d8 01 	sts	0x01D8, r24
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <__stack+0x4e3>
			}
			else
			{
				gps_power=0;
    15d6:	10 92 c3 01 	sts	0x01C3, r1
    15da:	10 92 c2 01 	sts	0x01C2, r1
				star_flag = 0;                        
    15de:	10 92 d8 01 	sts	0x01D8, r1
			}
			
		}
  avg_md = avg_md_new;
    15e2:	80 91 c6 01 	lds	r24, 0x01C6
    15e6:	90 91 c7 01 	lds	r25, 0x01C7
    15ea:	a0 91 c8 01 	lds	r26, 0x01C8
    15ee:	b0 91 c9 01 	lds	r27, 0x01C9
    15f2:	80 93 ca 01 	sts	0x01CA, r24
    15f6:	90 93 cb 01 	sts	0x01CB, r25
    15fa:	a0 93 cc 01 	sts	0x01CC, r26
    15fe:	b0 93 cd 01 	sts	0x01CD, r27
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    1602:	c0 90 98 04 	lds	r12, 0x0498
    1606:	d0 90 99 04 	lds	r13, 0x0499
    160a:	e0 90 9a 04 	lds	r14, 0x049A
    160e:	f0 90 9b 04 	lds	r15, 0x049B
    1612:	2f e6       	ldi	r18, 0x6F	; 111
    1614:	32 e1       	ldi	r19, 0x12	; 18
    1616:	43 e8       	ldi	r20, 0x83	; 131
    1618:	5b e3       	ldi	r21, 0x3B	; 59
    161a:	c7 01       	movw	r24, r14
    161c:	b6 01       	movw	r22, r12
    161e:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    1622:	88 23       	and	r24, r24
    1624:	bc f4       	brge	.+46     	; 0x1654 <__stack+0x555>
    1626:	90 91 e6 01 	lds	r25, 0x01E6
    162a:	80 91 e5 01 	lds	r24, 0x01E5
    162e:	98 9f       	mul	r25, r24
    1630:	c0 01       	movw	r24, r0
    1632:	11 24       	eor	r1, r1
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	71 f4       	brne	.+28     	; 0x1654 <__stack+0x555>
   {
	   flag_N = flag_N+1;
    1638:	80 91 e3 01 	lds	r24, 0x01E3
    163c:	90 91 e4 01 	lds	r25, 0x01E4
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	90 93 e4 01 	sts	0x01E4, r25
    1646:	80 93 e3 01 	sts	0x01E3, r24
	   flag_D = 0;
    164a:	10 92 e2 01 	sts	0x01E2, r1
    164e:	10 92 e1 01 	sts	0x01E1, r1
    1652:	17 c0       	rjmp	.+46     	; 0x1682 <__stack+0x583>
   }
   else if (mod_w > TOLW_N2D)
    1654:	2f e6       	ldi	r18, 0x6F	; 111
    1656:	32 e1       	ldi	r19, 0x12	; 18
    1658:	43 e0       	ldi	r20, 0x03	; 3
    165a:	5c e3       	ldi	r21, 0x3C	; 60
    165c:	c7 01       	movw	r24, r14
    165e:	b6 01       	movw	r22, r12
    1660:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    1664:	18 16       	cp	r1, r24
    1666:	6c f4       	brge	.+26     	; 0x1682 <__stack+0x583>
   {
	   flag_D = flag_D +1;
    1668:	80 91 e1 01 	lds	r24, 0x01E1
    166c:	90 91 e2 01 	lds	r25, 0x01E2
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	90 93 e2 01 	sts	0x01E2, r25
    1676:	80 93 e1 01 	sts	0x01E1, r24
	   flag_N = 0;
    167a:	10 92 e4 01 	sts	0x01E4, r1
    167e:	10 92 e3 01 	sts	0x01E3, r1
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    1682:	20 90 31 05 	lds	r2, 0x0531
    1686:	30 90 32 05 	lds	r3, 0x0532
    168a:	40 90 33 05 	lds	r4, 0x0533
    168e:	50 90 34 05 	lds	r5, 0x0534
    1692:	60 90 35 05 	lds	r6, 0x0535
    1696:	70 90 36 05 	lds	r7, 0x0536
    169a:	80 90 37 05 	lds	r8, 0x0537
    169e:	90 90 38 05 	lds	r9, 0x0538
    16a2:	22 2d       	mov	r18, r2
    16a4:	33 2d       	mov	r19, r3
    16a6:	44 2d       	mov	r20, r4
    16a8:	55 2d       	mov	r21, r5
    16aa:	66 2d       	mov	r22, r6
    16ac:	77 2d       	mov	r23, r7
    16ae:	88 2d       	mov	r24, r8
    16b0:	99 2d       	mov	r25, r9
    16b2:	23 3f       	cpi	r18, 0xF3	; 243
    16b4:	31 40       	sbci	r19, 0x01	; 1
    16b6:	41 05       	cpc	r20, r1
    16b8:	51 05       	cpc	r21, r1
    16ba:	61 05       	cpc	r22, r1
    16bc:	71 05       	cpc	r23, r1
    16be:	81 05       	cpc	r24, r1
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__stack+0x5c7>
    16c4:	a0 f4       	brcc	.+40     	; 0x16ee <__stack+0x5ef>
	{
		Mode = DETUMBLING;
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	80 93 26 01 	sts	0x0126, r24
		t_now = 0;
    16cc:	10 92 d9 01 	sts	0x01D9, r1
    16d0:	10 92 da 01 	sts	0x01DA, r1
    16d4:	10 92 db 01 	sts	0x01DB, r1
    16d8:	10 92 dc 01 	sts	0x01DC, r1
    16dc:	10 92 dd 01 	sts	0x01DD, r1
    16e0:	10 92 de 01 	sts	0x01DE, r1
    16e4:	10 92 df 01 	sts	0x01DF, r1
    16e8:	10 92 e0 01 	sts	0x01E0, r1
    16ec:	77 c0       	rjmp	.+238    	; 0x17dc <__stack+0x6dd>
	}
	else
	{
		if (star_flag >0)
    16ee:	80 91 d8 01 	lds	r24, 0x01D8
    16f2:	18 16       	cp	r1, r24
    16f4:	5c f5       	brge	.+86     	; 0x174c <__stack+0x64d>
		{
			if (Mode == DETUMBLING)
    16f6:	80 91 26 01 	lds	r24, 0x0126
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	39 f5       	brne	.+78     	; 0x174c <__stack+0x64d>
			{
				if (flag_N > tol_time)
    16fe:	a0 91 e3 01 	lds	r26, 0x01E3
    1702:	b0 91 e4 01 	lds	r27, 0x01E4
    1706:	e0 91 0a 01 	lds	r30, 0x010A
    170a:	f0 91 0b 01 	lds	r31, 0x010B
    170e:	ea 17       	cp	r30, r26
    1710:	fb 07       	cpc	r31, r27
    1712:	c4 f4       	brge	.+48     	; 0x1744 <__stack+0x645>
				{
					Mode = NOMINAL;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 93 26 01 	sts	0x0126, r24
					t_now = Time;
    171a:	20 92 d9 01 	sts	0x01D9, r2
    171e:	30 92 da 01 	sts	0x01DA, r3
    1722:	40 92 db 01 	sts	0x01DB, r4
    1726:	50 92 dc 01 	sts	0x01DC, r5
    172a:	60 92 dd 01 	sts	0x01DD, r6
    172e:	70 92 de 01 	sts	0x01DE, r7
    1732:	80 92 df 01 	sts	0x01DF, r8
    1736:	90 92 e0 01 	sts	0x01E0, r9
					flag_N = 0;
    173a:	10 92 e4 01 	sts	0x01E4, r1
    173e:	10 92 e3 01 	sts	0x01E3, r1
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__stack+0x64d>
				}
				else
				{flag_D = 0;}	
    1744:	10 92 e2 01 	sts	0x01E2, r1
    1748:	10 92 e1 01 	sts	0x01E1, r1
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    174c:	80 91 26 01 	lds	r24, 0x0126
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	09 f0       	breq	.+2      	; 0x1756 <__stack+0x657>
    1754:	43 c0       	rjmp	.+134    	; 0x17dc <__stack+0x6dd>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    1756:	a0 91 e1 01 	lds	r26, 0x01E1
    175a:	b0 91 e2 01 	lds	r27, 0x01E2
    175e:	e0 91 0a 01 	lds	r30, 0x010A
    1762:	f0 91 0b 01 	lds	r31, 0x010B
    1766:	ea 17       	cp	r30, r26
    1768:	fb 07       	cpc	r31, r27
    176a:	a4 f5       	brge	.+104    	; 0x17d4 <__stack+0x6d5>
    176c:	20 91 d9 01 	lds	r18, 0x01D9
    1770:	30 91 da 01 	lds	r19, 0x01DA
    1774:	40 91 db 01 	lds	r20, 0x01DB
    1778:	50 91 dc 01 	lds	r21, 0x01DC
    177c:	60 91 dd 01 	lds	r22, 0x01DD
    1780:	70 91 de 01 	lds	r23, 0x01DE
    1784:	80 91 df 01 	lds	r24, 0x01DF
    1788:	90 91 e0 01 	lds	r25, 0x01E0
    178c:	20 5f       	subi	r18, 0xF0	; 240
    178e:	38 4d       	sbci	r19, 0xD8	; 216
    1790:	4f 4f       	sbci	r20, 0xFF	; 255
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	6f 4f       	sbci	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	a2 2e       	mov	r10, r18
    179e:	b3 2e       	mov	r11, r19
    17a0:	c4 2e       	mov	r12, r20
    17a2:	d5 2e       	mov	r13, r21
    17a4:	e6 2e       	mov	r14, r22
    17a6:	f7 2e       	mov	r15, r23
    17a8:	08 2f       	mov	r16, r24
    17aa:	19 2f       	mov	r17, r25
    17ac:	22 2d       	mov	r18, r2
    17ae:	33 2d       	mov	r19, r3
    17b0:	44 2d       	mov	r20, r4
    17b2:	55 2d       	mov	r21, r5
    17b4:	66 2d       	mov	r22, r6
    17b6:	77 2d       	mov	r23, r7
    17b8:	88 2d       	mov	r24, r8
    17ba:	99 2d       	mov	r25, r9
    17bc:	0e 94 24 37 	call	0x6e48	; 0x6e48 <__cmpdi2>
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <__stack+0x6d5>
    17c2:	40 f0       	brcs	.+16     	; 0x17d4 <__stack+0x6d5>
		 {
			 Mode = DETUMBLING;
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	80 93 26 01 	sts	0x0126, r24
			 flag_D = 0;
    17ca:	10 92 e2 01 	sts	0x01E2, r1
    17ce:	10 92 e1 01 	sts	0x01E1, r1
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__stack+0x6dd>
		 }
		 else
		 {
			 flag_N = 0;
    17d4:	10 92 e4 01 	sts	0x01E4, r1
    17d8:	10 92 e3 01 	sts	0x01E3, r1
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    17dc:	80 91 c2 01 	lds	r24, 0x01C2
    17e0:	80 93 ed 04 	sts	0x04ED, r24
}
    17e4:	e0 96       	adiw	r28, 0x30	; 48
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	08 95       	ret

00001816 <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	fc 01       	movw	r30, r24
    181a:	32 97       	sbiw	r30, 0x02	; 2
    181c:	eb 30       	cpi	r30, 0x0B	; 11
    181e:	f1 05       	cpc	r31, r1
    1820:	20 f4       	brcc	.+8      	; 0x182a <days_in_months+0x14>
    1822:	ea 5b       	subi	r30, 0xBA	; 186
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	0c 94 d8 36 	jmp	0x6db0	; 0x6db0 <__tablejump2__>
  {
    case 1:
      return 0;
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	08 95       	ret
      break;
    case 2:
      return 31;
      break;
    case 3:
      return 59;
    183c:	2b e3       	ldi	r18, 0x3B	; 59
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	08 95       	ret
      break;
    case 4:
      return 90;
    184e:	2a e5       	ldi	r18, 0x5A	; 90
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	08 95       	ret
      break;
    case 5:
      return 120;
    1860:	28 e7       	ldi	r18, 0x78	; 120
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	08 95       	ret
      break;
    case 6:
      return 151;
    1872:	27 e9       	ldi	r18, 0x97	; 151
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	08 95       	ret
      break;
    case 7:
      return 181;
    1884:	25 eb       	ldi	r18, 0xB5	; 181
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	08 95       	ret
      break;
    case 8:
      return 212;
    1896:	24 ed       	ldi	r18, 0xD4	; 212
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	08 95       	ret
      break;
    case 9:
      return 243;
    18a8:	23 ef       	ldi	r18, 0xF3	; 243
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	08 95       	ret
      break;
    case 10:
      return 273;
    18ba:	21 e1       	ldi	r18, 0x11	; 17
    18bc:	31 e0       	ldi	r19, 0x01	; 1
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	08 95       	ret
      break;
    case 11:
      return 304;
    18cc:	20 e3       	ldi	r18, 0x30	; 48
    18ce:	31 e0       	ldi	r19, 0x01	; 1
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	08 95       	ret
      break;
    case 12:
      return 334;
    18de:	2e e4       	ldi	r18, 0x4E	; 78
    18e0:	31 e0       	ldi	r19, 0x01	; 1
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	08 95       	ret
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    18f0:	2f e1       	ldi	r18, 0x1F	; 31
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    1900:	08 95       	ret

00001902 <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    1902:	2f 92       	push	r2
    1904:	3f 92       	push	r3
    1906:	4f 92       	push	r4
    1908:	5f 92       	push	r5
    190a:	6f 92       	push	r6
    190c:	7f 92       	push	r7
    190e:	8f 92       	push	r8
    1910:	9f 92       	push	r9
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	67 97       	sbiw	r28, 0x17	; 23
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	1c 01       	movw	r2, r24
    1938:	86 2f       	mov	r24, r22
    193a:	4b 83       	std	Y+3, r20	; 0x03
    193c:	52 2e       	mov	r5, r18
    193e:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1940:	6a df       	rcall	.-300    	; 0x1816 <days_in_months>
    1942:	2c 83       	std	Y+4, r18	; 0x04
    1944:	3d 83       	std	Y+5, r19	; 0x05
    1946:	4e 83       	std	Y+6, r20	; 0x06
    1948:	5f 83       	std	Y+7, r21	; 0x07
    194a:	68 87       	std	Y+8, r22	; 0x08
    194c:	79 87       	std	Y+9, r23	; 0x09
    194e:	8a 87       	std	Y+10, r24	; 0x0a
    1950:	9b 87       	std	Y+11, r25	; 0x0b
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1952:	2e 2d       	mov	r18, r14
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	20 58       	subi	r18, 0x80	; 128
    1964:	3c 45       	sbci	r19, 0x5C	; 92
    1966:	44 49       	sbci	r20, 0x94	; 148
    1968:	5b 4c       	sbci	r21, 0xCB	; 203
    196a:	6e 40       	sbci	r22, 0x0E	; 14
    196c:	71 09       	sbc	r23, r1
    196e:	81 09       	sbc	r24, r1
    1970:	91 09       	sbc	r25, r1
    1972:	72 2e       	mov	r7, r18
    1974:	83 2e       	mov	r8, r19
    1976:	94 2e       	mov	r9, r20
    1978:	65 2e       	mov	r6, r21
    197a:	b6 2f       	mov	r27, r22
    197c:	a7 2f       	mov	r26, r23
    197e:	f8 2f       	mov	r31, r24
    1980:	e9 2f       	mov	r30, r25
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1982:	20 2f       	mov	r18, r16
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	04 e0       	ldi	r16, 0x04	; 4
    1994:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1998:	b1 2c       	mov	r11, r1
    199a:	c1 2c       	mov	r12, r1
    199c:	d1 2c       	mov	r13, r1
    199e:	e1 2c       	mov	r14, r1
    19a0:	f1 2c       	mov	r15, r1
    19a2:	00 e0       	ldi	r16, 0x00	; 0
    19a4:	10 e0       	ldi	r17, 0x00	; 0
    19a6:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    19aa:	02 e0       	ldi	r16, 0x02	; 2
    19ac:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    19b0:	a2 2e       	mov	r10, r18
    19b2:	b3 2e       	mov	r11, r19
    19b4:	c4 2e       	mov	r12, r20
    19b6:	d5 2e       	mov	r13, r21
    19b8:	e6 2e       	mov	r14, r22
    19ba:	f7 2e       	mov	r15, r23
    19bc:	08 2f       	mov	r16, r24
    19be:	19 2f       	mov	r17, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    19c0:	27 2d       	mov	r18, r7
    19c2:	38 2d       	mov	r19, r8
    19c4:	49 2d       	mov	r20, r9
    19c6:	56 2d       	mov	r21, r6
    19c8:	6b 2f       	mov	r22, r27
    19ca:	7a 2f       	mov	r23, r26
    19cc:	8f 2f       	mov	r24, r31
    19ce:	9e 2f       	mov	r25, r30
    19d0:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
    19d4:	62 2e       	mov	r6, r18
    19d6:	73 2e       	mov	r7, r19
    19d8:	84 2e       	mov	r8, r20
    19da:	95 2e       	mov	r9, r21
    19dc:	46 2e       	mov	r4, r22
    19de:	b7 2f       	mov	r27, r23
    19e0:	a8 2f       	mov	r26, r24
    19e2:	f9 2f       	mov	r31, r25
  now += ((uint64_t)hours) * 60 * 60;
    19e4:	25 2d       	mov	r18, r5
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	04 e0       	ldi	r16, 0x04	; 4
    19f6:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    19fa:	a5 2c       	mov	r10, r5
    19fc:	b1 2c       	mov	r11, r1
    19fe:	c1 2c       	mov	r12, r1
    1a00:	d1 2c       	mov	r13, r1
    1a02:	e1 2c       	mov	r14, r1
    1a04:	f1 2c       	mov	r15, r1
    1a06:	00 e0       	ldi	r16, 0x00	; 0
    1a08:	10 e0       	ldi	r17, 0x00	; 0
    1a0a:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1a0e:	a2 2e       	mov	r10, r18
    1a10:	b3 2e       	mov	r11, r19
    1a12:	c4 2e       	mov	r12, r20
    1a14:	d5 2e       	mov	r13, r21
    1a16:	e6 2e       	mov	r14, r22
    1a18:	f7 2e       	mov	r15, r23
    1a1a:	e8 2f       	mov	r30, r24
    1a1c:	19 2f       	mov	r17, r25
    1a1e:	04 e0       	ldi	r16, 0x04	; 4
    1a20:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1a24:	0e 2f       	mov	r16, r30
    1a26:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1a2a:	04 e0       	ldi	r16, 0x04	; 4
    1a2c:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1a30:	a2 2e       	mov	r10, r18
    1a32:	b3 2e       	mov	r11, r19
    1a34:	c4 2e       	mov	r12, r20
    1a36:	d5 2e       	mov	r13, r21
    1a38:	e6 2e       	mov	r14, r22
    1a3a:	f7 2e       	mov	r15, r23
    1a3c:	08 2f       	mov	r16, r24
    1a3e:	19 2f       	mov	r17, r25
    1a40:	26 2d       	mov	r18, r6
    1a42:	37 2d       	mov	r19, r7
    1a44:	48 2d       	mov	r20, r8
    1a46:	59 2d       	mov	r21, r9
    1a48:	64 2d       	mov	r22, r4
    1a4a:	7b 2f       	mov	r23, r27
    1a4c:	8a 2f       	mov	r24, r26
    1a4e:	9f 2f       	mov	r25, r31
    1a50:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
    1a54:	f2 2f       	mov	r31, r18
    1a56:	3d 87       	std	Y+13, r19	; 0x0d
    1a58:	4e 87       	std	Y+14, r20	; 0x0e
    1a5a:	5f 87       	std	Y+15, r21	; 0x0f
    1a5c:	68 8b       	std	Y+16, r22	; 0x10
    1a5e:	79 8b       	std	Y+17, r23	; 0x11
    1a60:	8a 8b       	std	Y+18, r24	; 0x12
    1a62:	9b 8b       	std	Y+19, r25	; 0x13
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1a64:	22 2d       	mov	r18, r2
    1a66:	33 2d       	mov	r19, r3
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	03 e0       	ldi	r16, 0x03	; 3
    1a76:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1a7a:	e2 2f       	mov	r30, r18
    1a7c:	3a 83       	std	Y+2, r19	; 0x02
    1a7e:	4f 8b       	std	Y+23, r20	; 0x17
    1a80:	5c 8b       	std	Y+20, r21	; 0x14
    1a82:	b6 2f       	mov	r27, r22
    1a84:	a7 2f       	mov	r26, r23
    1a86:	8d 8b       	std	Y+21, r24	; 0x15
    1a88:	9e 8b       	std	Y+22, r25	; 0x16
    1a8a:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1a8e:	a2 2e       	mov	r10, r18
    1a90:	b3 2e       	mov	r11, r19
    1a92:	c4 2e       	mov	r12, r20
    1a94:	d5 2e       	mov	r13, r21
    1a96:	e6 2e       	mov	r14, r22
    1a98:	f7 2e       	mov	r15, r23
    1a9a:	08 2f       	mov	r16, r24
    1a9c:	19 2f       	mov	r17, r25
    1a9e:	2e 2f       	mov	r18, r30
    1aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa2:	4f 89       	ldd	r20, Y+23	; 0x17
    1aa4:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa6:	6b 2f       	mov	r22, r27
    1aa8:	7a 2f       	mov	r23, r26
    1aaa:	8d 89       	ldd	r24, Y+21	; 0x15
    1aac:	9e 89       	ldd	r25, Y+22	; 0x16
    1aae:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
    1ab2:	a2 2c       	mov	r10, r2
    1ab4:	b3 2c       	mov	r11, r3
    1ab6:	c1 2c       	mov	r12, r1
    1ab8:	d1 2c       	mov	r13, r1
    1aba:	e1 2c       	mov	r14, r1
    1abc:	f1 2c       	mov	r15, r1
    1abe:	00 e0       	ldi	r16, 0x00	; 0
    1ac0:	10 e0       	ldi	r17, 0x00	; 0
    1ac2:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
    1ac6:	a2 2e       	mov	r10, r18
    1ac8:	b3 2e       	mov	r11, r19
    1aca:	c4 2e       	mov	r12, r20
    1acc:	d5 2e       	mov	r13, r21
    1ace:	e6 2e       	mov	r14, r22
    1ad0:	f7 2e       	mov	r15, r23
    1ad2:	e8 2f       	mov	r30, r24
    1ad4:	19 2f       	mov	r17, r25
    1ad6:	04 e0       	ldi	r16, 0x04	; 4
    1ad8:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1adc:	0e 2f       	mov	r16, r30
    1ade:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1ae2:	a2 2e       	mov	r10, r18
    1ae4:	b3 2e       	mov	r11, r19
    1ae6:	c4 2e       	mov	r12, r20
    1ae8:	d5 2e       	mov	r13, r21
    1aea:	e6 2e       	mov	r14, r22
    1aec:	f7 2e       	mov	r15, r23
    1aee:	e8 2f       	mov	r30, r24
    1af0:	19 2f       	mov	r17, r25
    1af2:	04 e0       	ldi	r16, 0x04	; 4
    1af4:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1af8:	0e 2f       	mov	r16, r30
    1afa:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1afe:	a2 2e       	mov	r10, r18
    1b00:	b3 2e       	mov	r11, r19
    1b02:	c4 2e       	mov	r12, r20
    1b04:	d5 2e       	mov	r13, r21
    1b06:	e6 2e       	mov	r14, r22
    1b08:	f7 2e       	mov	r15, r23
    1b0a:	e8 2f       	mov	r30, r24
    1b0c:	19 2f       	mov	r17, r25
    1b0e:	04 e0       	ldi	r16, 0x04	; 4
    1b10:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1b14:	0e 2f       	mov	r16, r30
    1b16:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1b1a:	07 e0       	ldi	r16, 0x07	; 7
    1b1c:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1b20:	a2 2e       	mov	r10, r18
    1b22:	b3 2e       	mov	r11, r19
    1b24:	c4 2e       	mov	r12, r20
    1b26:	d5 2e       	mov	r13, r21
    1b28:	e6 2e       	mov	r14, r22
    1b2a:	f7 2e       	mov	r15, r23
    1b2c:	08 2f       	mov	r16, r24
    1b2e:	19 2f       	mov	r17, r25
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1b30:	2f 2f       	mov	r18, r31
    1b32:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b34:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b36:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b38:	68 89       	ldd	r22, Y+16	; 0x10
    1b3a:	79 89       	ldd	r23, Y+17	; 0x11
    1b3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b3e:	9b 89       	ldd	r25, Y+19	; 0x13
    1b40:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
    1b44:	72 2e       	mov	r7, r18
    1b46:	83 2e       	mov	r8, r19
    1b48:	94 2e       	mov	r9, r20
    1b4a:	b5 2f       	mov	r27, r21
    1b4c:	66 2e       	mov	r6, r22
    1b4e:	57 2e       	mov	r5, r23
    1b50:	f8 2f       	mov	r31, r24
    1b52:	e9 2f       	mov	r30, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	af ef       	ldi	r26, 0xFF	; 255
    1b66:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <__adddi3_s8>
    1b6a:	ac 80       	ldd	r10, Y+4	; 0x04
    1b6c:	bd 80       	ldd	r11, Y+5	; 0x05
    1b6e:	ce 80       	ldd	r12, Y+6	; 0x06
    1b70:	df 80       	ldd	r13, Y+7	; 0x07
    1b72:	e8 84       	ldd	r14, Y+8	; 0x08
    1b74:	f9 84       	ldd	r15, Y+9	; 0x09
    1b76:	0a 85       	ldd	r16, Y+10	; 0x0a
    1b78:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b7a:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
    1b7e:	a2 2e       	mov	r10, r18
    1b80:	b3 2e       	mov	r11, r19
    1b82:	c4 2e       	mov	r12, r20
    1b84:	d5 2e       	mov	r13, r21
    1b86:	e6 2e       	mov	r14, r22
    1b88:	f7 2e       	mov	r15, r23
    1b8a:	a8 2f       	mov	r26, r24
    1b8c:	19 2f       	mov	r17, r25
    1b8e:	02 e0       	ldi	r16, 0x02	; 2
    1b90:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1b94:	0a 2f       	mov	r16, r26
    1b96:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1b9a:	a2 2e       	mov	r10, r18
    1b9c:	b3 2e       	mov	r11, r19
    1b9e:	c4 2e       	mov	r12, r20
    1ba0:	d5 2e       	mov	r13, r21
    1ba2:	e6 2e       	mov	r14, r22
    1ba4:	f7 2e       	mov	r15, r23
    1ba6:	a8 2f       	mov	r26, r24
    1ba8:	19 2f       	mov	r17, r25
    1baa:	04 e0       	ldi	r16, 0x04	; 4
    1bac:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1bb0:	0a 2f       	mov	r16, r26
    1bb2:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1bb6:	a2 2e       	mov	r10, r18
    1bb8:	b3 2e       	mov	r11, r19
    1bba:	c4 2e       	mov	r12, r20
    1bbc:	d5 2e       	mov	r13, r21
    1bbe:	e6 2e       	mov	r14, r22
    1bc0:	f7 2e       	mov	r15, r23
    1bc2:	a8 2f       	mov	r26, r24
    1bc4:	19 2f       	mov	r17, r25
    1bc6:	04 e0       	ldi	r16, 0x04	; 4
    1bc8:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1bcc:	0a 2f       	mov	r16, r26
    1bce:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1bd2:	07 e0       	ldi	r16, 0x07	; 7
    1bd4:	0e 94 ed 36 	call	0x6dda	; 0x6dda <__ashldi3>
    1bd8:	a2 2e       	mov	r10, r18
    1bda:	b3 2e       	mov	r11, r19
    1bdc:	c4 2e       	mov	r12, r20
    1bde:	d5 2e       	mov	r13, r21
    1be0:	e6 2e       	mov	r14, r22
    1be2:	f7 2e       	mov	r15, r23
    1be4:	08 2f       	mov	r16, r24
    1be6:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1be8:	27 2d       	mov	r18, r7
    1bea:	38 2d       	mov	r19, r8
    1bec:	49 2d       	mov	r20, r9
    1bee:	5b 2f       	mov	r21, r27
    1bf0:	66 2d       	mov	r22, r6
    1bf2:	75 2d       	mov	r23, r5
    1bf4:	8f 2f       	mov	r24, r31
    1bf6:	9e 2f       	mov	r25, r30
    1bf8:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__adddi3>
  return now;
}
    1bfc:	67 96       	adiw	r28, 0x17	; 23
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	9f 90       	pop	r9
    1c1e:	8f 90       	pop	r8
    1c20:	7f 90       	pop	r7
    1c22:	6f 90       	pop	r6
    1c24:	5f 90       	pop	r5
    1c26:	4f 90       	pop	r4
    1c28:	3f 90       	pop	r3
    1c2a:	2f 90       	pop	r2
    1c2c:	08 95       	ret

00001c2e <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1c42:	e1 2c       	mov	r14, r1
    1c44:	0e e1       	ldi	r16, 0x1E	; 30
    1c46:	24 e0       	ldi	r18, 0x04	; 4
    1c48:	44 e1       	ldi	r20, 0x14	; 20
    1c4a:	63 e0       	ldi	r22, 0x03	; 3
    1c4c:	80 ee       	ldi	r24, 0xE0	; 224
    1c4e:	97 e0       	ldi	r25, 0x07	; 7
    1c50:	58 de       	rcall	.-848    	; 0x1902 <get_seconds_since_pivot>
    1c52:	a2 2e       	mov	r10, r18
    1c54:	b3 2e       	mov	r11, r19
    1c56:	c4 2e       	mov	r12, r20
    1c58:	d5 2e       	mov	r13, r21
    1c5a:	d6 2f       	mov	r29, r22
    1c5c:	f7 2e       	mov	r15, r23
    1c5e:	c8 2f       	mov	r28, r24
    1c60:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1c62:	80 91 e8 04 	lds	r24, 0x04E8
    1c66:	90 91 e9 04 	lds	r25, 0x04E9
    1c6a:	e0 90 e5 04 	lds	r14, 0x04E5
    1c6e:	00 91 e4 04 	lds	r16, 0x04E4
    1c72:	20 91 e3 04 	lds	r18, 0x04E3
    1c76:	40 91 e6 04 	lds	r20, 0x04E6
    1c7a:	60 91 e7 04 	lds	r22, 0x04E7
    1c7e:	41 de       	rcall	.-894    	; 0x1902 <get_seconds_since_pivot>
    1c80:	20 93 9c 04 	sts	0x049C, r18
    1c84:	30 93 9d 04 	sts	0x049D, r19
    1c88:	40 93 9e 04 	sts	0x049E, r20
    1c8c:	50 93 9f 04 	sts	0x049F, r21
    1c90:	60 93 a0 04 	sts	0x04A0, r22
    1c94:	70 93 a1 04 	sts	0x04A1, r23
    1c98:	80 93 a2 04 	sts	0x04A2, r24
    1c9c:	90 93 a3 04 	sts	0x04A3, r25
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1ca0:	ed 2e       	mov	r14, r29
    1ca2:	0c 2f       	mov	r16, r28
    1ca4:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__subdi3>
    1ca8:	20 93 a4 04 	sts	0x04A4, r18
    1cac:	30 93 a5 04 	sts	0x04A5, r19
    1cb0:	40 93 a6 04 	sts	0x04A6, r20
    1cb4:	50 93 a7 04 	sts	0x04A7, r21
    1cb8:	60 93 a8 04 	sts	0x04A8, r22
    1cbc:	70 93 a9 04 	sts	0x04A9, r23
    1cc0:	80 93 aa 04 	sts	0x04AA, r24
    1cc4:	90 93 ab 04 	sts	0x04AB, r25
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	bf 90       	pop	r11
    1cda:	af 90       	pop	r10
    1cdc:	08 95       	ret

00001cde <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    1cde:	4f 92       	push	r4
    1ce0:	5f 92       	push	r5
    1ce2:	6f 92       	push	r6
    1ce4:	7f 92       	push	r7
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	a4 97       	sbiw	r28, 0x24	; 36
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	8c 01       	movw	r16, r24
    1d0c:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1d0e:	20 91 a4 04 	lds	r18, 0x04A4
    1d12:	30 91 a5 04 	lds	r19, 0x04A5
    1d16:	40 91 a6 04 	lds	r20, 0x04A6
    1d1a:	50 91 a7 04 	lds	r21, 0x04A7
    1d1e:	60 91 a8 04 	lds	r22, 0x04A8
    1d22:	70 91 a9 04 	lds	r23, 0x04A9
    1d26:	80 91 aa 04 	lds	r24, 0x04AA
    1d2a:	90 91 ab 04 	lds	r25, 0x04AB
    1d2e:	0e 94 8f 33 	call	0x671e	; 0x671e <__floatundisf>
    1d32:	27 eb       	ldi	r18, 0xB7	; 183
    1d34:	39 e5       	ldi	r19, 0x59	; 89
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1d3e:	2e eb       	ldi	r18, 0xBE	; 190
    1d40:	37 ef       	ldi	r19, 0xF7	; 247
    1d42:	48 e9       	ldi	r20, 0x98	; 152
    1d44:	58 e3       	ldi	r21, 0x38	; 56
    1d46:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    1d4a:	2b 01       	movw	r4, r22
    1d4c:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d4e:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    1d52:	6b 01       	movw	r12, r22
    1d54:	7c 01       	movw	r14, r24
    1d56:	69 83       	std	Y+1, r22	; 0x01
    1d58:	7a 83       	std	Y+2, r23	; 0x02
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
    1d5c:	9c 83       	std	Y+4, r25	; 0x04
    1d5e:	c3 01       	movw	r24, r6
    1d60:	b2 01       	movw	r22, r4
    1d62:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    1d66:	6d 83       	std	Y+5, r22	; 0x05
    1d68:	7e 83       	std	Y+6, r23	; 0x06
    1d6a:	8f 83       	std	Y+7, r24	; 0x07
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	19 86       	std	Y+9, r1	; 0x09
    1d70:	1a 86       	std	Y+10, r1	; 0x0a
    1d72:	1b 86       	std	Y+11, r1	; 0x0b
    1d74:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	b0 58       	subi	r27, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1d7c:	8d 87       	std	Y+13, r24	; 0x0d
    1d7e:	9e 87       	std	Y+14, r25	; 0x0e
    1d80:	af 87       	std	Y+15, r26	; 0x0f
    1d82:	b8 8b       	std	Y+16, r27	; 0x10
    1d84:	c9 8a       	std	Y+17, r12	; 0x11
    1d86:	da 8a       	std	Y+18, r13	; 0x12
    1d88:	eb 8a       	std	Y+19, r14	; 0x13
    1d8a:	fc 8a       	std	Y+20, r15	; 0x14
    1d8c:	1d 8a       	std	Y+21, r1	; 0x15
    1d8e:	1e 8a       	std	Y+22, r1	; 0x16
    1d90:	1f 8a       	std	Y+23, r1	; 0x17
    1d92:	18 8e       	std	Y+24, r1	; 0x18
    1d94:	19 8e       	std	Y+25, r1	; 0x19
    1d96:	1a 8e       	std	Y+26, r1	; 0x1a
    1d98:	1b 8e       	std	Y+27, r1	; 0x1b
    1d9a:	1c 8e       	std	Y+28, r1	; 0x1c
    1d9c:	1d 8e       	std	Y+29, r1	; 0x1d
    1d9e:	1e 8e       	std	Y+30, r1	; 0x1e
    1da0:	1f 8e       	std	Y+31, r1	; 0x1f
    1da2:	18 a2       	std	Y+32, r1	; 0x20
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e8       	ldi	r26, 0x80	; 128
    1daa:	bf e3       	ldi	r27, 0x3F	; 63
    1dac:	89 a3       	std	Y+33, r24	; 0x21
    1dae:	9a a3       	std	Y+34, r25	; 0x22
    1db0:	ab a3       	std	Y+35, r26	; 0x23
    1db2:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1db4:	a5 01       	movw	r20, r10
    1db6:	be 01       	movw	r22, r28
    1db8:	6f 5f       	subi	r22, 0xFF	; 255
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	c8 01       	movw	r24, r16
    1dbe:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1dc2:	a4 96       	adiw	r28, 0x24	; 36
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	bf 90       	pop	r11
    1de0:	af 90       	pop	r10
    1de2:	7f 90       	pop	r7
    1de4:	6f 90       	pop	r6
    1de6:	5f 90       	pop	r5
    1de8:	4f 90       	pop	r4
    1dea:	08 95       	ret

00001dec <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1dec:	4f 92       	push	r4
    1dee:	5f 92       	push	r5
    1df0:	6f 92       	push	r6
    1df2:	7f 92       	push	r7
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	a4 97       	sbiw	r28, 0x24	; 36
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	8c 01       	movw	r16, r24
    1e1a:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1e1c:	20 91 a4 04 	lds	r18, 0x04A4
    1e20:	30 91 a5 04 	lds	r19, 0x04A5
    1e24:	40 91 a6 04 	lds	r20, 0x04A6
    1e28:	50 91 a7 04 	lds	r21, 0x04A7
    1e2c:	60 91 a8 04 	lds	r22, 0x04A8
    1e30:	70 91 a9 04 	lds	r23, 0x04A9
    1e34:	80 91 aa 04 	lds	r24, 0x04AA
    1e38:	90 91 ab 04 	lds	r25, 0x04AB
    1e3c:	0e 94 8f 33 	call	0x671e	; 0x671e <__floatundisf>
    1e40:	27 eb       	ldi	r18, 0xB7	; 183
    1e42:	39 e5       	ldi	r19, 0x59	; 89
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1e4c:	2e eb       	ldi	r18, 0xBE	; 190
    1e4e:	37 ef       	ldi	r19, 0xF7	; 247
    1e50:	48 e9       	ldi	r20, 0x98	; 152
    1e52:	58 e3       	ldi	r21, 0x38	; 56
    1e54:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    1e58:	2b 01       	movw	r4, r22
    1e5a:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1e5c:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    1e60:	6b 01       	movw	r12, r22
    1e62:	7c 01       	movw	r14, r24
    1e64:	69 83       	std	Y+1, r22	; 0x01
    1e66:	7a 83       	std	Y+2, r23	; 0x02
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	c3 01       	movw	r24, r6
    1e6e:	b2 01       	movw	r22, r4
    1e70:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    1e74:	2b 01       	movw	r4, r22
    1e76:	3c 01       	movw	r6, r24
    1e78:	77 fa       	bst	r7, 7
    1e7a:	70 94       	com	r7
    1e7c:	77 f8       	bld	r7, 7
    1e7e:	70 94       	com	r7
    1e80:	4d 82       	std	Y+5, r4	; 0x05
    1e82:	5e 82       	std	Y+6, r5	; 0x06
    1e84:	6f 82       	std	Y+7, r6	; 0x07
    1e86:	78 86       	std	Y+8, r7	; 0x08
    1e88:	19 86       	std	Y+9, r1	; 0x09
    1e8a:	1a 86       	std	Y+10, r1	; 0x0a
    1e8c:	1b 86       	std	Y+11, r1	; 0x0b
    1e8e:	1c 86       	std	Y+12, r1	; 0x0c
    1e90:	6d 87       	std	Y+13, r22	; 0x0d
    1e92:	7e 87       	std	Y+14, r23	; 0x0e
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
    1e96:	98 8b       	std	Y+16, r25	; 0x10
    1e98:	c9 8a       	std	Y+17, r12	; 0x11
    1e9a:	da 8a       	std	Y+18, r13	; 0x12
    1e9c:	eb 8a       	std	Y+19, r14	; 0x13
    1e9e:	fc 8a       	std	Y+20, r15	; 0x14
    1ea0:	1d 8a       	std	Y+21, r1	; 0x15
    1ea2:	1e 8a       	std	Y+22, r1	; 0x16
    1ea4:	1f 8a       	std	Y+23, r1	; 0x17
    1ea6:	18 8e       	std	Y+24, r1	; 0x18
    1ea8:	19 8e       	std	Y+25, r1	; 0x19
    1eaa:	1a 8e       	std	Y+26, r1	; 0x1a
    1eac:	1b 8e       	std	Y+27, r1	; 0x1b
    1eae:	1c 8e       	std	Y+28, r1	; 0x1c
    1eb0:	1d 8e       	std	Y+29, r1	; 0x1d
    1eb2:	1e 8e       	std	Y+30, r1	; 0x1e
    1eb4:	1f 8e       	std	Y+31, r1	; 0x1f
    1eb6:	18 a2       	std	Y+32, r1	; 0x20
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	89 a3       	std	Y+33, r24	; 0x21
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	ab a3       	std	Y+35, r26	; 0x23
    1ec6:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1ec8:	a5 01       	movw	r20, r10
    1eca:	be 01       	movw	r22, r28
    1ecc:	6f 5f       	subi	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	c8 01       	movw	r24, r16
    1ed2:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <vector_into_matrix>
}
    1ed6:	a4 96       	adiw	r28, 0x24	; 36
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	7f 90       	pop	r7
    1ef8:	6f 90       	pop	r6
    1efa:	5f 90       	pop	r5
    1efc:	4f 90       	pop	r4
    1efe:	08 95       	ret

00001f00 <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	c8 54       	subi	r28, 0x48	; 72
    1f16:	d1 09       	sbc	r29, r1
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	8c 01       	movw	r16, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	6a 01       	movw	r12, r20
    1f28:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1f2a:	ae 01       	movw	r20, r28
    1f2c:	43 5f       	subi	r20, 0xF3	; 243
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	b8 01       	movw	r22, r16
    1f32:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <vector_cross_product>
  convert_unit_vector(v_o_y);
    1f36:	ce 01       	movw	r24, r28
    1f38:	0d 96       	adiw	r24, 0x0d	; 13
    1f3a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1f3e:	f8 01       	movw	r30, r16
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	a2 81       	ldd	r26, Z+2	; 0x02
    1f46:	b3 81       	ldd	r27, Z+3	; 0x03
    1f48:	b0 58       	subi	r27, 0x80	; 128
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
    1f4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f50:	bc 8f       	std	Y+28, r27	; 0x1c
    1f52:	44 81       	ldd	r20, Z+4	; 0x04
    1f54:	55 81       	ldd	r21, Z+5	; 0x05
    1f56:	66 81       	ldd	r22, Z+6	; 0x06
    1f58:	77 81       	ldd	r23, Z+7	; 0x07
    1f5a:	70 58       	subi	r23, 0x80	; 128
    1f5c:	4d 8f       	std	Y+29, r20	; 0x1d
    1f5e:	5e 8f       	std	Y+30, r21	; 0x1e
    1f60:	6f 8f       	std	Y+31, r22	; 0x1f
    1f62:	78 a3       	std	Y+32, r23	; 0x20
    1f64:	80 85       	ldd	r24, Z+8	; 0x08
    1f66:	91 85       	ldd	r25, Z+9	; 0x09
    1f68:	a2 85       	ldd	r26, Z+10	; 0x0a
    1f6a:	b3 85       	ldd	r27, Z+11	; 0x0b
    1f6c:	b0 58       	subi	r27, 0x80	; 128
    1f6e:	89 a3       	std	Y+33, r24	; 0x21
    1f70:	9a a3       	std	Y+34, r25	; 0x22
    1f72:	ab a3       	std	Y+35, r26	; 0x23
    1f74:	bc a3       	std	Y+36, r27	; 0x24
  convert_unit_vector(v_o_z);
    1f76:	ce 01       	movw	r24, r28
    1f78:	49 96       	adiw	r24, 0x19	; 25
    1f7a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1f7e:	ae 01       	movw	r20, r28
    1f80:	4f 5f       	subi	r20, 0xFF	; 255
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	be 01       	movw	r22, r28
    1f86:	67 5e       	subi	r22, 0xE7	; 231
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	0d 96       	adiw	r24, 0x0d	; 13
    1f8e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <vector_cross_product>
  convert_unit_vector(v_o_x);
    1f92:	ce 01       	movw	r24, r28
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	ab 81       	ldd	r26, Y+3	; 0x03
    1fa0:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa2:	8d a3       	std	Y+37, r24	; 0x25
    1fa4:	9e a3       	std	Y+38, r25	; 0x26
    1fa6:	af a3       	std	Y+39, r26	; 0x27
    1fa8:	b8 a7       	std	Y+40, r27	; 0x28
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	af 85       	ldd	r26, Y+15	; 0x0f
    1fb0:	b8 89       	ldd	r27, Y+16	; 0x10
    1fb2:	89 a7       	std	Y+41, r24	; 0x29
    1fb4:	9a a7       	std	Y+42, r25	; 0x2a
    1fb6:	ab a7       	std	Y+43, r26	; 0x2b
    1fb8:	bc a7       	std	Y+44, r27	; 0x2c
    1fba:	89 8d       	ldd	r24, Y+25	; 0x19
    1fbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fbe:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1fc0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1fc2:	8d a7       	std	Y+45, r24	; 0x2d
    1fc4:	9e a7       	std	Y+46, r25	; 0x2e
    1fc6:	af a7       	std	Y+47, r26	; 0x2f
    1fc8:	b8 ab       	std	Y+48, r27	; 0x30
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	af 81       	ldd	r26, Y+7	; 0x07
    1fd0:	b8 85       	ldd	r27, Y+8	; 0x08
    1fd2:	89 ab       	std	Y+49, r24	; 0x31
    1fd4:	9a ab       	std	Y+50, r25	; 0x32
    1fd6:	ab ab       	std	Y+51, r26	; 0x33
    1fd8:	bc ab       	std	Y+52, r27	; 0x34
    1fda:	89 89       	ldd	r24, Y+17	; 0x11
    1fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fde:	ab 89       	ldd	r26, Y+19	; 0x13
    1fe0:	bc 89       	ldd	r27, Y+20	; 0x14
    1fe2:	8d ab       	std	Y+53, r24	; 0x35
    1fe4:	9e ab       	std	Y+54, r25	; 0x36
    1fe6:	af ab       	std	Y+55, r26	; 0x37
    1fe8:	b8 af       	std	Y+56, r27	; 0x38
    1fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fee:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ff0:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ff2:	89 af       	std	Y+57, r24	; 0x39
    1ff4:	9a af       	std	Y+58, r25	; 0x3a
    1ff6:	ab af       	std	Y+59, r26	; 0x3b
    1ff8:	bc af       	std	Y+60, r27	; 0x3c
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	ab 85       	ldd	r26, Y+11	; 0x0b
    2000:	bc 85       	ldd	r27, Y+12	; 0x0c
    2002:	21 96       	adiw	r28, 0x01	; 1
    2004:	8c af       	std	Y+60, r24	; 0x3c
    2006:	9d af       	std	Y+61, r25	; 0x3d
    2008:	ae af       	std	Y+62, r26	; 0x3e
    200a:	bf af       	std	Y+63, r27	; 0x3f
    200c:	21 97       	sbiw	r28, 0x01	; 1
    200e:	8d 89       	ldd	r24, Y+21	; 0x15
    2010:	9e 89       	ldd	r25, Y+22	; 0x16
    2012:	af 89       	ldd	r26, Y+23	; 0x17
    2014:	b8 8d       	ldd	r27, Y+24	; 0x18
    2016:	25 96       	adiw	r28, 0x05	; 5
    2018:	8c af       	std	Y+60, r24	; 0x3c
    201a:	9d af       	std	Y+61, r25	; 0x3d
    201c:	ae af       	std	Y+62, r26	; 0x3e
    201e:	bf af       	std	Y+63, r27	; 0x3f
    2020:	25 97       	sbiw	r28, 0x05	; 5
    2022:	09 a1       	ldd	r16, Y+33	; 0x21
    2024:	1a a1       	ldd	r17, Y+34	; 0x22
    2026:	2b a1       	ldd	r18, Y+35	; 0x23
    2028:	3c a1       	ldd	r19, Y+36	; 0x24
    202a:	29 96       	adiw	r28, 0x09	; 9
    202c:	0c af       	std	Y+60, r16	; 0x3c
    202e:	1d af       	std	Y+61, r17	; 0x3d
    2030:	2e af       	std	Y+62, r18	; 0x3e
    2032:	3f af       	std	Y+63, r19	; 0x3f
    2034:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    2036:	a7 01       	movw	r20, r14
    2038:	be 01       	movw	r22, r28
    203a:	6b 5d       	subi	r22, 0xDB	; 219
    203c:	7f 4f       	sbci	r23, 0xFF	; 255
    203e:	c6 01       	movw	r24, r12
    2040:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <vector_into_matrix>
}
    2044:	c8 5b       	subi	r28, 0xB8	; 184
    2046:	df 4f       	sbci	r29, 0xFF	; 255
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	08 95       	ret

00002064 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    2064:	2f 92       	push	r2
    2066:	3f 92       	push	r3
    2068:	4f 92       	push	r4
    206a:	5f 92       	push	r5
    206c:	6f 92       	push	r6
    206e:	7f 92       	push	r7
    2070:	8f 92       	push	r8
    2072:	9f 92       	push	r9
    2074:	af 92       	push	r10
    2076:	bf 92       	push	r11
    2078:	cf 92       	push	r12
    207a:	df 92       	push	r13
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	2c 97       	sbiw	r28, 0x0c	; 12
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    2098:	dc 01       	movw	r26, r24
    209a:	8d 90       	ld	r8, X+
    209c:	9d 90       	ld	r9, X+
    209e:	ad 90       	ld	r10, X+
    20a0:	bc 90       	ld	r11, X
    20a2:	13 97       	sbiw	r26, 0x03	; 3
    20a4:	14 96       	adiw	r26, 0x04	; 4
    20a6:	cd 90       	ld	r12, X+
    20a8:	dd 90       	ld	r13, X+
    20aa:	ed 90       	ld	r14, X+
    20ac:	fc 90       	ld	r15, X
    20ae:	17 97       	sbiw	r26, 0x07	; 7
    20b0:	18 96       	adiw	r26, 0x08	; 8
    20b2:	8d 91       	ld	r24, X+
    20b4:	9d 91       	ld	r25, X+
    20b6:	0d 90       	ld	r0, X+
    20b8:	bc 91       	ld	r27, X
    20ba:	a0 2d       	mov	r26, r0
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	ab 83       	std	Y+3, r26	; 0x03
    20c2:	bc 83       	std	Y+4, r27	; 0x04
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    20c4:	a5 01       	movw	r20, r10
    20c6:	94 01       	movw	r18, r8
    20c8:	c7 01       	movw	r24, r14
    20ca:	b6 01       	movw	r22, r12
    20cc:	0e 94 5f 32 	call	0x64be	; 0x64be <atan2>
    20d0:	69 87       	std	Y+9, r22	; 0x09
    20d2:	7a 87       	std	Y+10, r23	; 0x0a
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    20d8:	a5 01       	movw	r20, r10
    20da:	94 01       	movw	r18, r8
    20dc:	c5 01       	movw	r24, r10
    20de:	b4 01       	movw	r22, r8
    20e0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    20e4:	4b 01       	movw	r8, r22
    20e6:	5c 01       	movw	r10, r24
    20e8:	a7 01       	movw	r20, r14
    20ea:	96 01       	movw	r18, r12
    20ec:	c7 01       	movw	r24, r14
    20ee:	b6 01       	movw	r22, r12
    20f0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    20f4:	9b 01       	movw	r18, r22
    20f6:	ac 01       	movw	r20, r24
    20f8:	c5 01       	movw	r24, r10
    20fa:	b4 01       	movw	r22, r8
    20fc:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2100:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    2104:	2b 01       	movw	r4, r22
    2106:	3c 01       	movw	r6, r24
  
  beta = atan2(z, (1 - F) * rho);
    2108:	25 e4       	ldi	r18, 0x45	; 69
    210a:	34 e2       	ldi	r19, 0x24	; 36
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2114:	9b 01       	movw	r18, r22
    2116:	ac 01       	movw	r20, r24
    2118:	69 81       	ldd	r22, Y+1	; 0x01
    211a:	7a 81       	ldd	r23, Y+2	; 0x02
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	0e 94 5f 32 	call	0x64be	; 0x64be <atan2>
    2124:	6b 01       	movw	r12, r22
    2126:	7c 01       	movw	r14, r24
    2128:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    212a:	c7 01       	movw	r24, r14
    212c:	b6 01       	movw	r22, r12
    212e:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e4       	ldi	r20, 0x40	; 64
    2138:	50 e4       	ldi	r21, 0x40	; 64
    213a:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <pow>
    213e:	4b 01       	movw	r8, r22
    2140:	5c 01       	movw	r10, r24
    2142:	c7 01       	movw	r24, r14
    2144:	b6 01       	movw	r22, r12
    2146:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e4       	ldi	r20, 0x40	; 64
    2150:	50 e4       	ldi	r21, 0x40	; 64
    2152:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <pow>
    2156:	6b 01       	movw	r12, r22
    2158:	7c 01       	movw	r14, r24
    215a:	2e ea       	ldi	r18, 0xAE	; 174
    215c:	39 ec       	ldi	r19, 0xC9	; 201
    215e:	46 e2       	ldi	r20, 0x26	; 38
    2160:	57 e4       	ldi	r21, 0x47	; 71
    2162:	c5 01       	movw	r24, r10
    2164:	b4 01       	movw	r22, r8
    2166:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    216a:	9b 01       	movw	r18, r22
    216c:	ac 01       	movw	r20, r24
    216e:	c3 01       	movw	r24, r6
    2170:	b2 01       	movw	r22, r4
    2172:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2176:	4b 01       	movw	r8, r22
    2178:	5c 01       	movw	r10, r24
    217a:	22 e5       	ldi	r18, 0x52	; 82
    217c:	39 e5       	ldi	r19, 0x59	; 89
    217e:	47 e2       	ldi	r20, 0x27	; 39
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	c7 01       	movw	r24, r14
    2184:	b6 01       	movw	r22, r12
    2186:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    218a:	29 81       	ldd	r18, Y+1	; 0x01
    218c:	3a 81       	ldd	r19, Y+2	; 0x02
    218e:	4b 81       	ldd	r20, Y+3	; 0x03
    2190:	5c 81       	ldd	r21, Y+4	; 0x04
    2192:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2196:	a5 01       	movw	r20, r10
    2198:	94 01       	movw	r18, r8
    219a:	0e 94 5f 32 	call	0x64be	; 0x64be <atan2>
    219e:	4b 01       	movw	r8, r22
    21a0:	5c 01       	movw	r10, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    21a2:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    21a6:	6b 01       	movw	r12, r22
    21a8:	7c 01       	movw	r14, r24
    21aa:	c5 01       	movw	r24, r10
    21ac:	b4 01       	movw	r22, r8
    21ae:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    21b2:	25 e4       	ldi	r18, 0x45	; 69
    21b4:	34 e2       	ldi	r19, 0x24	; 36
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    21be:	a7 01       	movw	r20, r14
    21c0:	96 01       	movw	r18, r12
    21c2:	0e 94 5f 32 	call	0x64be	; 0x64be <atan2>
    21c6:	6b 01       	movw	r12, r22
    21c8:	7c 01       	movw	r14, r24
    21ca:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <ecef2lla+0x16c>
    21ce:	ad cf       	rjmp	.-166    	; 0x212a <ecef2lla+0xc6>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    21d0:	c5 01       	movw	r24, r10
    21d2:	b4 01       	movw	r22, r8
    21d4:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    21d8:	6b 01       	movw	r12, r22
    21da:	7c 01       	movw	r14, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    21dc:	2a e8       	ldi	r18, 0x8A	; 138
    21de:	3c e5       	ldi	r19, 0x5C	; 92
    21e0:	4b ed       	ldi	r20, 0xDB	; 219
    21e2:	5b e3       	ldi	r21, 0x3B	; 59
    21e4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    21e8:	a7 01       	movw	r20, r14
    21ea:	96 01       	movw	r18, r12
    21ec:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    21f0:	9b 01       	movw	r18, r22
    21f2:	ac 01       	movw	r20, r24
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	80 e8       	ldi	r24, 0x80	; 128
    21fa:	9f e3       	ldi	r25, 0x3F	; 63
    21fc:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2200:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    2204:	9b 01       	movw	r18, r22
    2206:	ac 01       	movw	r20, r24
    2208:	62 e3       	ldi	r22, 0x32	; 50
    220a:	75 ea       	ldi	r23, 0xA5	; 165
    220c:	82 ec       	ldi	r24, 0xC2	; 194
    220e:	9a e4       	ldi	r25, 0x4A	; 74
    2210:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2214:	6d 83       	std	Y+5, r22	; 0x05
    2216:	7e 83       	std	Y+6, r23	; 0x06
    2218:	8f 83       	std	Y+7, r24	; 0x07
    221a:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    221c:	c5 01       	movw	r24, r10
    221e:	b4 01       	movw	r22, r8
    2220:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
  
  v_lla[0] = phi;
    2224:	f1 01       	movw	r30, r2
    2226:	80 82       	st	Z, r8
    2228:	91 82       	std	Z+1, r9	; 0x01
    222a:	a2 82       	std	Z+2, r10	; 0x02
    222c:	b3 82       	std	Z+3, r11	; 0x03
  v_lla[1] = lambda;
    222e:	29 85       	ldd	r18, Y+9	; 0x09
    2230:	3a 85       	ldd	r19, Y+10	; 0x0a
    2232:	4b 85       	ldd	r20, Y+11	; 0x0b
    2234:	5c 85       	ldd	r21, Y+12	; 0x0c
    2236:	24 83       	std	Z+4, r18	; 0x04
    2238:	35 83       	std	Z+5, r19	; 0x05
    223a:	46 83       	std	Z+6, r20	; 0x06
    223c:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    223e:	a3 01       	movw	r20, r6
    2240:	92 01       	movw	r18, r4
    2242:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2246:	2b 01       	movw	r4, r22
    2248:	3c 01       	movw	r6, r24
    224a:	2a e8       	ldi	r18, 0x8A	; 138
    224c:	3c e5       	ldi	r19, 0x5C	; 92
    224e:	4b ed       	ldi	r20, 0xDB	; 219
    2250:	5b e3       	ldi	r21, 0x3B	; 59
    2252:	6d 81       	ldd	r22, Y+5	; 0x05
    2254:	7e 81       	ldd	r23, Y+6	; 0x06
    2256:	8f 81       	ldd	r24, Y+7	; 0x07
    2258:	98 85       	ldd	r25, Y+8	; 0x08
    225a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    225e:	a7 01       	movw	r20, r14
    2260:	96 01       	movw	r18, r12
    2262:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2266:	29 81       	ldd	r18, Y+1	; 0x01
    2268:	3a 81       	ldd	r19, Y+2	; 0x02
    226a:	4b 81       	ldd	r20, Y+3	; 0x03
    226c:	5c 81       	ldd	r21, Y+4	; 0x04
    226e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2272:	a7 01       	movw	r20, r14
    2274:	96 01       	movw	r18, r12
    2276:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    227a:	9b 01       	movw	r18, r22
    227c:	ac 01       	movw	r20, r24
    227e:	c3 01       	movw	r24, r6
    2280:	b2 01       	movw	r22, r4
    2282:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2286:	2d 81       	ldd	r18, Y+5	; 0x05
    2288:	3e 81       	ldd	r19, Y+6	; 0x06
    228a:	4f 81       	ldd	r20, Y+7	; 0x07
    228c:	58 85       	ldd	r21, Y+8	; 0x08
    228e:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    2292:	f1 01       	movw	r30, r2
    2294:	60 87       	std	Z+8, r22	; 0x08
    2296:	71 87       	std	Z+9, r23	; 0x09
    2298:	82 87       	std	Z+10, r24	; 0x0a
    229a:	93 87       	std	Z+11, r25	; 0x0b
 Current_state.gps.lat=(v_lla[0]*180/3.141592)*100;
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	44 e3       	ldi	r20, 0x34	; 52
    22a2:	53 e4       	ldi	r21, 0x43	; 67
    22a4:	c5 01       	movw	r24, r10
    22a6:	b4 01       	movw	r22, r8
    22a8:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    22ac:	28 ed       	ldi	r18, 0xD8	; 216
    22ae:	3f e0       	ldi	r19, 0x0F	; 15
    22b0:	49 e4       	ldi	r20, 0x49	; 73
    22b2:	50 e4       	ldi	r21, 0x40	; 64
    22b4:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	48 ec       	ldi	r20, 0xC8	; 200
    22be:	52 e4       	ldi	r21, 0x42	; 66
    22c0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    22c4:	0e 94 21 33 	call	0x6642	; 0x6642 <__fixsfsi>
    22c8:	60 93 d7 04 	sts	0x04D7, r22
    22cc:	70 93 d8 04 	sts	0x04D8, r23
    22d0:	80 93 d9 04 	sts	0x04D9, r24
    22d4:	90 93 da 04 	sts	0x04DA, r25
 Current_state.gps.lon=(v_lla[1]*180/3.141592)*100;
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	44 e3       	ldi	r20, 0x34	; 52
    22de:	53 e4       	ldi	r21, 0x43	; 67
    22e0:	d1 01       	movw	r26, r2
    22e2:	14 96       	adiw	r26, 0x04	; 4
    22e4:	6d 91       	ld	r22, X+
    22e6:	7d 91       	ld	r23, X+
    22e8:	8d 91       	ld	r24, X+
    22ea:	9c 91       	ld	r25, X
    22ec:	17 97       	sbiw	r26, 0x07	; 7
    22ee:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    22f2:	28 ed       	ldi	r18, 0xD8	; 216
    22f4:	3f e0       	ldi	r19, 0x0F	; 15
    22f6:	49 e4       	ldi	r20, 0x49	; 73
    22f8:	50 e4       	ldi	r21, 0x40	; 64
    22fa:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	48 ec       	ldi	r20, 0xC8	; 200
    2304:	52 e4       	ldi	r21, 0x42	; 66
    2306:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    230a:	0e 94 21 33 	call	0x6642	; 0x6642 <__fixsfsi>
    230e:	60 93 db 04 	sts	0x04DB, r22
    2312:	70 93 dc 04 	sts	0x04DC, r23
    2316:	80 93 dd 04 	sts	0x04DD, r24
    231a:	90 93 de 04 	sts	0x04DE, r25
  Current_state.gps.alt=v_lla[2];  
    231e:	f1 01       	movw	r30, r2
    2320:	60 85       	ldd	r22, Z+8	; 0x08
    2322:	71 85       	ldd	r23, Z+9	; 0x09
    2324:	82 85       	ldd	r24, Z+10	; 0x0a
    2326:	93 85       	ldd	r25, Z+11	; 0x0b
    2328:	0e 94 21 33 	call	0x6642	; 0x6642 <__fixsfsi>
    232c:	60 93 df 04 	sts	0x04DF, r22
    2330:	70 93 e0 04 	sts	0x04E0, r23
    2334:	80 93 e1 04 	sts	0x04E1, r24
    2338:	90 93 e2 04 	sts	0x04E2, r25
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    233c:	2c 96       	adiw	r28, 0x0c	; 12
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	bf 90       	pop	r11
    2358:	af 90       	pop	r10
    235a:	9f 90       	pop	r9
    235c:	8f 90       	pop	r8
    235e:	7f 90       	pop	r7
    2360:	6f 90       	pop	r6
    2362:	5f 90       	pop	r5
    2364:	4f 90       	pop	r4
    2366:	3f 90       	pop	r3
    2368:	2f 90       	pop	r2
    236a:	08 95       	ret

0000236c <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    236c:	2f 92       	push	r2
    236e:	3f 92       	push	r3
    2370:	4f 92       	push	r4
    2372:	5f 92       	push	r5
    2374:	6f 92       	push	r6
    2376:	7f 92       	push	r7
    2378:	8f 92       	push	r8
    237a:	9f 92       	push	r9
    237c:	af 92       	push	r10
    237e:	bf 92       	push	r11
    2380:	cf 92       	push	r12
    2382:	df 92       	push	r13
    2384:	ef 92       	push	r14
    2386:	ff 92       	push	r15
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	ac 97       	sbiw	r28, 0x2c	; 44
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	1c 01       	movw	r2, r24
    23a2:	7b 01       	movw	r14, r22
    23a4:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    23a6:	db 01       	movw	r26, r22
    23a8:	4d 90       	ld	r4, X+
    23aa:	5d 90       	ld	r5, X+
    23ac:	6d 90       	ld	r6, X+
    23ae:	7c 90       	ld	r7, X
    23b0:	c3 01       	movw	r24, r6
    23b2:	b2 01       	movw	r22, r4
    23b4:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    23b8:	6d a3       	std	Y+37, r22	; 0x25
    23ba:	7e a3       	std	Y+38, r23	; 0x26
    23bc:	8f a3       	std	Y+39, r24	; 0x27
    23be:	98 a7       	std	Y+40, r25	; 0x28
    23c0:	f7 01       	movw	r30, r14
    23c2:	c4 80       	ldd	r12, Z+4	; 0x04
    23c4:	d5 80       	ldd	r13, Z+5	; 0x05
    23c6:	e6 80       	ldd	r14, Z+6	; 0x06
    23c8:	f7 80       	ldd	r15, Z+7	; 0x07
    23ca:	c7 01       	movw	r24, r14
    23cc:	b6 01       	movw	r22, r12
    23ce:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    23d2:	4b 01       	movw	r8, r22
    23d4:	5c 01       	movw	r10, r24
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    23d6:	c3 01       	movw	r24, r6
    23d8:	b2 01       	movw	r22, r4
    23da:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    23de:	2b 01       	movw	r4, r22
    23e0:	3c 01       	movw	r6, r24
    23e2:	c7 01       	movw	r24, r14
    23e4:	b6 01       	movw	r22, r12
    23e6:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    23ea:	6b 01       	movw	r12, r22
    23ec:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    23ee:	77 fa       	bst	r7, 7
    23f0:	70 94       	com	r7
    23f2:	77 f8       	bld	r7, 7
    23f4:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    23f6:	8d a1       	ldd	r24, Y+37	; 0x25
    23f8:	9e a1       	ldd	r25, Y+38	; 0x26
    23fa:	af a1       	ldd	r26, Y+39	; 0x27
    23fc:	b8 a5       	ldd	r27, Y+40	; 0x28
    23fe:	b0 58       	subi	r27, 0x80	; 128
    2400:	89 a7       	std	Y+41, r24	; 0x29
    2402:	9a a7       	std	Y+42, r25	; 0x2a
    2404:	ab a7       	std	Y+43, r26	; 0x2b
    2406:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    2408:	a5 01       	movw	r20, r10
    240a:	94 01       	movw	r18, r8
    240c:	c3 01       	movw	r24, r6
    240e:	b2 01       	movw	r22, r4
    2410:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2414:	69 83       	std	Y+1, r22	; 0x01
    2416:	7a 83       	std	Y+2, r23	; 0x02
    2418:	8b 83       	std	Y+3, r24	; 0x03
    241a:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    241c:	a3 01       	movw	r20, r6
    241e:	92 01       	movw	r18, r4
    2420:	c7 01       	movw	r24, r14
    2422:	b6 01       	movw	r22, r12
    2424:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2428:	6d 83       	std	Y+5, r22	; 0x05
    242a:	7e 83       	std	Y+6, r23	; 0x06
    242c:	8f 83       	std	Y+7, r24	; 0x07
    242e:	98 87       	std	Y+8, r25	; 0x08
    2430:	8d a1       	ldd	r24, Y+37	; 0x25
    2432:	9e a1       	ldd	r25, Y+38	; 0x26
    2434:	af a1       	ldd	r26, Y+39	; 0x27
    2436:	b8 a5       	ldd	r27, Y+40	; 0x28
    2438:	89 87       	std	Y+9, r24	; 0x09
    243a:	9a 87       	std	Y+10, r25	; 0x0a
    243c:	ab 87       	std	Y+11, r26	; 0x0b
    243e:	bc 87       	std	Y+12, r27	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    2440:	d7 01       	movw	r26, r14
    2442:	c6 01       	movw	r24, r12
    2444:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2446:	8d 87       	std	Y+13, r24	; 0x0d
    2448:	9e 87       	std	Y+14, r25	; 0x0e
    244a:	af 87       	std	Y+15, r26	; 0x0f
    244c:	b8 8b       	std	Y+16, r27	; 0x10
    244e:	89 8a       	std	Y+17, r8	; 0x11
    2450:	9a 8a       	std	Y+18, r9	; 0x12
    2452:	ab 8a       	std	Y+19, r10	; 0x13
    2454:	bc 8a       	std	Y+20, r11	; 0x14
    2456:	1d 8a       	std	Y+21, r1	; 0x15
    2458:	1e 8a       	std	Y+22, r1	; 0x16
    245a:	1f 8a       	std	Y+23, r1	; 0x17
    245c:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    245e:	a5 01       	movw	r20, r10
    2460:	94 01       	movw	r18, r8
    2462:	69 a5       	ldd	r22, Y+41	; 0x29
    2464:	7a a5       	ldd	r23, Y+42	; 0x2a
    2466:	8b a5       	ldd	r24, Y+43	; 0x2b
    2468:	9c a5       	ldd	r25, Y+44	; 0x2c
    246a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    246e:	69 8f       	std	Y+25, r22	; 0x19
    2470:	7a 8f       	std	Y+26, r23	; 0x1a
    2472:	8b 8f       	std	Y+27, r24	; 0x1b
    2474:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    2476:	29 a5       	ldd	r18, Y+41	; 0x29
    2478:	3a a5       	ldd	r19, Y+42	; 0x2a
    247a:	4b a5       	ldd	r20, Y+43	; 0x2b
    247c:	5c a5       	ldd	r21, Y+44	; 0x2c
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2486:	6d 8f       	std	Y+29, r22	; 0x1d
    2488:	7e 8f       	std	Y+30, r23	; 0x1e
    248a:	8f 8f       	std	Y+31, r24	; 0x1f
    248c:	98 a3       	std	Y+32, r25	; 0x20
    248e:	49 a2       	std	Y+33, r4	; 0x21
    2490:	5a a2       	std	Y+34, r5	; 0x22
    2492:	6b a2       	std	Y+35, r6	; 0x23
    2494:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    2496:	a8 01       	movw	r20, r16
    2498:	be 01       	movw	r22, r28
    249a:	6f 5f       	subi	r22, 0xFF	; 255
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	c1 01       	movw	r24, r2
    24a0:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <vector_into_matrix>
}
    24a4:	ac 96       	adiw	r28, 0x2c	; 44
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	7f 90       	pop	r7
    24ca:	6f 90       	pop	r6
    24cc:	5f 90       	pop	r5
    24ce:	4f 90       	pop	r4
    24d0:	3f 90       	pop	r3
    24d2:	2f 90       	pop	r2
    24d4:	08 95       	ret

000024d6 <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    24d6:	1f 92       	push	r1
    24d8:	0f 92       	push	r0
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	0f 92       	push	r0
    24de:	11 24       	eor	r1, r1
    24e0:	0b b6       	in	r0, 0x3b	; 59
    24e2:	0f 92       	push	r0
    24e4:	2f 93       	push	r18
    24e6:	8f 93       	push	r24
    24e8:	9f 93       	push	r25
    24ea:	af 93       	push	r26
    24ec:	bf 93       	push	r27
    24ee:	ef 93       	push	r30
    24f0:	ff 93       	push	r31
  PORTA ^= 0xf0;
    24f2:	9b b3       	in	r25, 0x1b	; 27
    24f4:	80 ef       	ldi	r24, 0xF0	; 240
    24f6:	89 27       	eor	r24, r25
    24f8:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    24fa:	8c b1       	in	r24, 0x0c	; 12
    24fc:	80 93 0c 02 	sts	0x020C, r24
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    2500:	80 91 0d 02 	lds	r24, 0x020D
    2504:	90 91 0e 02 	lds	r25, 0x020E
    2508:	a0 91 0f 02 	lds	r26, 0x020F
    250c:	b0 91 10 02 	lds	r27, 0x0210
    2510:	ba 2f       	mov	r27, r26
    2512:	a9 2f       	mov	r26, r25
    2514:	98 2f       	mov	r25, r24
    2516:	88 27       	eor	r24, r24
    2518:	80 93 0d 02 	sts	0x020D, r24
    251c:	90 93 0e 02 	sts	0x020E, r25
    2520:	a0 93 0f 02 	sts	0x020F, r26
    2524:	b0 93 10 02 	sts	0x0210, r27
  buffer &= 0xFFFFFF00;
    2528:	80 91 0d 02 	lds	r24, 0x020D
    252c:	90 91 0e 02 	lds	r25, 0x020E
    2530:	a0 91 0f 02 	lds	r26, 0x020F
    2534:	b0 91 10 02 	lds	r27, 0x0210
    2538:	88 27       	eor	r24, r24
    253a:	80 93 0d 02 	sts	0x020D, r24
    253e:	90 93 0e 02 	sts	0x020E, r25
    2542:	a0 93 0f 02 	sts	0x020F, r26
    2546:	b0 93 10 02 	sts	0x0210, r27
  buffer |= (uint32_t) last_byte;
    254a:	20 91 0c 02 	lds	r18, 0x020C
    254e:	80 91 0d 02 	lds	r24, 0x020D
    2552:	90 91 0e 02 	lds	r25, 0x020E
    2556:	a0 91 0f 02 	lds	r26, 0x020F
    255a:	b0 91 10 02 	lds	r27, 0x0210
    255e:	82 2b       	or	r24, r18
    2560:	80 93 0d 02 	sts	0x020D, r24
    2564:	90 93 0e 02 	sts	0x020E, r25
    2568:	a0 93 0f 02 	sts	0x020F, r26
    256c:	b0 93 10 02 	sts	0x0210, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
    2570:	80 91 11 01 	lds	r24, 0x0111
    2574:	8c 30       	cpi	r24, 0x0C	; 12
    2576:	08 f0       	brcs	.+2      	; 0x257a <__vector_18+0xa4>
    2578:	86 c0       	rjmp	.+268    	; 0x2686 <__vector_18+0x1b0>
  {
    
    if(pos<4)
    257a:	80 91 11 01 	lds	r24, 0x0111
    257e:	84 30       	cpi	r24, 0x04	; 4
    2580:	28 f5       	brcc	.+74     	; 0x25cc <__vector_18+0xf6>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    2582:	ef eb       	ldi	r30, 0xBF	; 191
    2584:	f4 e0       	ldi	r31, 0x04	; 4
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	a2 81       	ldd	r26, Z+2	; 0x02
    258c:	b3 81       	ldd	r27, Z+3	; 0x03
    258e:	89 2f       	mov	r24, r25
    2590:	9a 2f       	mov	r25, r26
    2592:	ab 2f       	mov	r26, r27
    2594:	bb 27       	eor	r27, r27
    2596:	a7 fd       	sbrc	r26, 7
    2598:	ba 95       	dec	r27
    259a:	80 83       	st	Z, r24
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	a2 83       	std	Z+2, r26	; 0x02
    25a0:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	a2 81       	ldd	r26, Z+2	; 0x02
    25a8:	b3 81       	ldd	r27, Z+3	; 0x03
    25aa:	bb 27       	eor	r27, r27
    25ac:	80 83       	st	Z, r24
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	a2 83       	std	Z+2, r26	; 0x02
    25b2:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	a2 81       	ldd	r26, Z+2	; 0x02
    25ba:	b3 81       	ldd	r27, Z+3	; 0x03
    25bc:	20 91 0c 02 	lds	r18, 0x020C
    25c0:	b2 2b       	or	r27, r18
    25c2:	80 83       	st	Z, r24
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	a2 83       	std	Z+2, r26	; 0x02
    25c8:	b3 83       	std	Z+3, r27	; 0x03
    25ca:	51 c0       	rjmp	.+162    	; 0x266e <__vector_18+0x198>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    25cc:	80 91 11 01 	lds	r24, 0x0111
    25d0:	88 30       	cpi	r24, 0x08	; 8
    25d2:	28 f5       	brcc	.+74     	; 0x261e <__vector_18+0x148>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    25d4:	e3 ec       	ldi	r30, 0xC3	; 195
    25d6:	f4 e0       	ldi	r31, 0x04	; 4
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	a2 81       	ldd	r26, Z+2	; 0x02
    25de:	b3 81       	ldd	r27, Z+3	; 0x03
    25e0:	89 2f       	mov	r24, r25
    25e2:	9a 2f       	mov	r25, r26
    25e4:	ab 2f       	mov	r26, r27
    25e6:	bb 27       	eor	r27, r27
    25e8:	a7 fd       	sbrc	r26, 7
    25ea:	ba 95       	dec	r27
    25ec:	80 83       	st	Z, r24
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	a2 83       	std	Z+2, r26	; 0x02
    25f2:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.y &= 0x00FFFFFF;
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	a2 81       	ldd	r26, Z+2	; 0x02
    25fa:	b3 81       	ldd	r27, Z+3	; 0x03
    25fc:	bb 27       	eor	r27, r27
    25fe:	80 83       	st	Z, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	a2 83       	std	Z+2, r26	; 0x02
    2604:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	a2 81       	ldd	r26, Z+2	; 0x02
    260c:	b3 81       	ldd	r27, Z+3	; 0x03
    260e:	20 91 0c 02 	lds	r18, 0x020C
    2612:	b2 2b       	or	r27, r18
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
    261c:	28 c0       	rjmp	.+80     	; 0x266e <__vector_18+0x198>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    261e:	80 91 11 01 	lds	r24, 0x0111
    2622:	8c 30       	cpi	r24, 0x0C	; 12
    2624:	20 f5       	brcc	.+72     	; 0x266e <__vector_18+0x198>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    2626:	e7 ec       	ldi	r30, 0xC7	; 199
    2628:	f4 e0       	ldi	r31, 0x04	; 4
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	a2 81       	ldd	r26, Z+2	; 0x02
    2630:	b3 81       	ldd	r27, Z+3	; 0x03
    2632:	89 2f       	mov	r24, r25
    2634:	9a 2f       	mov	r25, r26
    2636:	ab 2f       	mov	r26, r27
    2638:	bb 27       	eor	r27, r27
    263a:	a7 fd       	sbrc	r26, 7
    263c:	ba 95       	dec	r27
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.z &= 0x00FFFFFF;
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	a2 81       	ldd	r26, Z+2	; 0x02
    264c:	b3 81       	ldd	r27, Z+3	; 0x03
    264e:	bb 27       	eor	r27, r27
    2650:	80 83       	st	Z, r24
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	a2 83       	std	Z+2, r26	; 0x02
    2656:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	a2 81       	ldd	r26, Z+2	; 0x02
    265e:	b3 81       	ldd	r27, Z+3	; 0x03
    2660:	20 91 0c 02 	lds	r18, 0x020C
    2664:	b2 2b       	or	r27, r18
    2666:	80 83       	st	Z, r24
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	a2 83       	std	Z+2, r26	; 0x02
    266c:	b3 83       	std	Z+3, r27	; 0x03
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    266e:	80 91 11 01 	lds	r24, 0x0111
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	80 93 11 01 	sts	0x0111, r24
    if(pos == 12)
    2678:	80 91 11 01 	lds	r24, 0x0111
    267c:	8c 30       	cpi	r24, 0x0C	; 12
    267e:	19 f4       	brne	.+6      	; 0x2686 <__vector_18+0x1b0>
	{
      pos = 0xFF;
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	80 93 11 01 	sts	0x0111, r24
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    2686:	80 91 10 01 	lds	r24, 0x0110
    268a:	8c 30       	cpi	r24, 0x0C	; 12
    268c:	08 f0       	brcs	.+2      	; 0x2690 <__vector_18+0x1ba>
    268e:	86 c0       	rjmp	.+268    	; 0x279c <__vector_18+0x2c6>
  {
	  
    if(vel < 4)
    2690:	80 91 10 01 	lds	r24, 0x0110
    2694:	84 30       	cpi	r24, 0x04	; 4
    2696:	28 f5       	brcc	.+74     	; 0x26e2 <__vector_18+0x20c>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    2698:	eb ec       	ldi	r30, 0xCB	; 203
    269a:	f4 e0       	ldi	r31, 0x04	; 4
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	a2 81       	ldd	r26, Z+2	; 0x02
    26a2:	b3 81       	ldd	r27, Z+3	; 0x03
    26a4:	89 2f       	mov	r24, r25
    26a6:	9a 2f       	mov	r25, r26
    26a8:	ab 2f       	mov	r26, r27
    26aa:	bb 27       	eor	r27, r27
    26ac:	a7 fd       	sbrc	r26, 7
    26ae:	ba 95       	dec	r27
    26b0:	80 83       	st	Z, r24
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	a2 83       	std	Z+2, r26	; 0x02
    26b6:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_x &= 0x00FFFFFF;
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	a2 81       	ldd	r26, Z+2	; 0x02
    26be:	b3 81       	ldd	r27, Z+3	; 0x03
    26c0:	bb 27       	eor	r27, r27
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	a2 81       	ldd	r26, Z+2	; 0x02
    26d0:	b3 81       	ldd	r27, Z+3	; 0x03
    26d2:	20 91 0c 02 	lds	r18, 0x020C
    26d6:	b2 2b       	or	r27, r18
    26d8:	80 83       	st	Z, r24
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	a2 83       	std	Z+2, r26	; 0x02
    26de:	b3 83       	std	Z+3, r27	; 0x03
    26e0:	51 c0       	rjmp	.+162    	; 0x2784 <__vector_18+0x2ae>
		
	}
	else if(vel < 8)
    26e2:	80 91 10 01 	lds	r24, 0x0110
    26e6:	88 30       	cpi	r24, 0x08	; 8
    26e8:	28 f5       	brcc	.+74     	; 0x2734 <__vector_18+0x25e>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    26ea:	ef ec       	ldi	r30, 0xCF	; 207
    26ec:	f4 e0       	ldi	r31, 0x04	; 4
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	a2 81       	ldd	r26, Z+2	; 0x02
    26f4:	b3 81       	ldd	r27, Z+3	; 0x03
    26f6:	89 2f       	mov	r24, r25
    26f8:	9a 2f       	mov	r25, r26
    26fa:	ab 2f       	mov	r26, r27
    26fc:	bb 27       	eor	r27, r27
    26fe:	a7 fd       	sbrc	r26, 7
    2700:	ba 95       	dec	r27
    2702:	80 83       	st	Z, r24
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	a2 83       	std	Z+2, r26	; 0x02
    2708:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_y &= 0x00FFFFFF;
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	a2 81       	ldd	r26, Z+2	; 0x02
    2710:	b3 81       	ldd	r27, Z+3	; 0x03
    2712:	bb 27       	eor	r27, r27
    2714:	80 83       	st	Z, r24
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	a2 83       	std	Z+2, r26	; 0x02
    271a:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	a2 81       	ldd	r26, Z+2	; 0x02
    2722:	b3 81       	ldd	r27, Z+3	; 0x03
    2724:	20 91 0c 02 	lds	r18, 0x020C
    2728:	b2 2b       	or	r27, r18
    272a:	80 83       	st	Z, r24
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	a2 83       	std	Z+2, r26	; 0x02
    2730:	b3 83       	std	Z+3, r27	; 0x03
    2732:	28 c0       	rjmp	.+80     	; 0x2784 <__vector_18+0x2ae>
	}
	else if(vel < 12)
    2734:	80 91 10 01 	lds	r24, 0x0110
    2738:	8c 30       	cpi	r24, 0x0C	; 12
    273a:	20 f5       	brcc	.+72     	; 0x2784 <__vector_18+0x2ae>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    273c:	e3 ed       	ldi	r30, 0xD3	; 211
    273e:	f4 e0       	ldi	r31, 0x04	; 4
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	a2 81       	ldd	r26, Z+2	; 0x02
    2746:	b3 81       	ldd	r27, Z+3	; 0x03
    2748:	89 2f       	mov	r24, r25
    274a:	9a 2f       	mov	r25, r26
    274c:	ab 2f       	mov	r26, r27
    274e:	bb 27       	eor	r27, r27
    2750:	a7 fd       	sbrc	r26, 7
    2752:	ba 95       	dec	r27
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.v_z &= 0x00FFFFFF;
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	a2 81       	ldd	r26, Z+2	; 0x02
    2762:	b3 81       	ldd	r27, Z+3	; 0x03
    2764:	bb 27       	eor	r27, r27
    2766:	80 83       	st	Z, r24
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	a2 83       	std	Z+2, r26	; 0x02
    276c:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	a2 81       	ldd	r26, Z+2	; 0x02
    2774:	b3 81       	ldd	r27, Z+3	; 0x03
    2776:	20 91 0c 02 	lds	r18, 0x020C
    277a:	b2 2b       	or	r27, r18
    277c:	80 83       	st	Z, r24
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	a2 83       	std	Z+2, r26	; 0x02
    2782:	b3 83       	std	Z+3, r27	; 0x03
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    2784:	80 91 10 01 	lds	r24, 0x0110
    2788:	8f 5f       	subi	r24, 0xFF	; 255
    278a:	80 93 10 01 	sts	0x0110, r24
    if(vel == 12)
    278e:	80 91 10 01 	lds	r24, 0x0110
    2792:	8c 30       	cpi	r24, 0x0C	; 12
    2794:	19 f4       	brne	.+6      	; 0x279c <__vector_18+0x2c6>
     {
		  vel = 0xFF;
    2796:	8f ef       	ldi	r24, 0xFF	; 255
    2798:	80 93 10 01 	sts	0x0110, r24

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    279c:	80 91 0f 01 	lds	r24, 0x010F
    27a0:	84 30       	cpi	r24, 0x04	; 4
    27a2:	20 f5       	brcc	.+72     	; 0x27ec <__vector_18+0x316>
  {
    if(dop >= 2)
    27a4:	80 91 0f 01 	lds	r24, 0x010F
    27a8:	82 30       	cpi	r24, 0x02	; 2
    27aa:	a0 f0       	brcs	.+40     	; 0x27d4 <__vector_18+0x2fe>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    27ac:	ea ee       	ldi	r30, 0xEA	; 234
    27ae:	f4 e0       	ldi	r31, 0x04	; 4
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	89 2f       	mov	r24, r25
    27b6:	99 27       	eor	r25, r25
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
		 Current_state.gps.pdop &= 0x00FF;
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	99 27       	eor	r25, r25
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	20 91 0c 02 	lds	r18, 0x020C
    27ce:	92 2b       	or	r25, r18
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    27d4:	80 91 0f 01 	lds	r24, 0x010F
    27d8:	8f 5f       	subi	r24, 0xFF	; 255
    27da:	80 93 0f 01 	sts	0x010F, r24
    if(dop == 4)
    27de:	80 91 0f 01 	lds	r24, 0x010F
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	19 f4       	brne	.+6      	; 0x27ec <__vector_18+0x316>
      dop = 0xFF;
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	80 93 0f 01 	sts	0x010F, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    27ec:	80 91 0e 01 	lds	r24, 0x010E
    27f0:	80 31       	cpi	r24, 0x10	; 16
    27f2:	08 f0       	brcs	.+2      	; 0x27f6 <__vector_18+0x320>
    27f4:	8b c0       	rjmp	.+278    	; 0x290c <__vector_18+0x436>
  {
	if(geo < 4);  
    27f6:	80 91 0e 01 	lds	r24, 0x010E
    27fa:	84 30       	cpi	r24, 0x04	; 4
    27fc:	08 f4       	brcc	.+2      	; 0x2800 <__vector_18+0x32a>
    27fe:	7a c0       	rjmp	.+244    	; 0x28f4 <__vector_18+0x41e>
    else if(geo < 8)
    2800:	80 91 0e 01 	lds	r24, 0x010E
    2804:	88 30       	cpi	r24, 0x08	; 8
    2806:	28 f5       	brcc	.+74     	; 0x2852 <__vector_18+0x37c>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    2808:	e7 ed       	ldi	r30, 0xD7	; 215
    280a:	f4 e0       	ldi	r31, 0x04	; 4
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	a2 81       	ldd	r26, Z+2	; 0x02
    2812:	b3 81       	ldd	r27, Z+3	; 0x03
    2814:	89 2f       	mov	r24, r25
    2816:	9a 2f       	mov	r25, r26
    2818:	ab 2f       	mov	r26, r27
    281a:	bb 27       	eor	r27, r27
    281c:	a7 fd       	sbrc	r26, 7
    281e:	ba 95       	dec	r27
    2820:	80 83       	st	Z, r24
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	a2 83       	std	Z+2, r26	; 0x02
    2826:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lat &= 0x00FFFFFF;
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	a2 81       	ldd	r26, Z+2	; 0x02
    282e:	b3 81       	ldd	r27, Z+3	; 0x03
    2830:	bb 27       	eor	r27, r27
    2832:	80 83       	st	Z, r24
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	a2 83       	std	Z+2, r26	; 0x02
    2838:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	a2 81       	ldd	r26, Z+2	; 0x02
    2840:	b3 81       	ldd	r27, Z+3	; 0x03
    2842:	20 91 0c 02 	lds	r18, 0x020C
    2846:	b2 2b       	or	r27, r18
    2848:	80 83       	st	Z, r24
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	a2 83       	std	Z+2, r26	; 0x02
    284e:	b3 83       	std	Z+3, r27	; 0x03
    2850:	51 c0       	rjmp	.+162    	; 0x28f4 <__vector_18+0x41e>
	}
	else if(geo < 12)
    2852:	80 91 0e 01 	lds	r24, 0x010E
    2856:	8c 30       	cpi	r24, 0x0C	; 12
    2858:	28 f5       	brcc	.+74     	; 0x28a4 <__vector_18+0x3ce>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    285a:	eb ed       	ldi	r30, 0xDB	; 219
    285c:	f4 e0       	ldi	r31, 0x04	; 4
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	a2 81       	ldd	r26, Z+2	; 0x02
    2864:	b3 81       	ldd	r27, Z+3	; 0x03
    2866:	89 2f       	mov	r24, r25
    2868:	9a 2f       	mov	r25, r26
    286a:	ab 2f       	mov	r26, r27
    286c:	bb 27       	eor	r27, r27
    286e:	a7 fd       	sbrc	r26, 7
    2870:	ba 95       	dec	r27
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lon &= 0x00FFFFFF;
    287a:	80 81       	ld	r24, Z
    287c:	91 81       	ldd	r25, Z+1	; 0x01
    287e:	a2 81       	ldd	r26, Z+2	; 0x02
    2880:	b3 81       	ldd	r27, Z+3	; 0x03
    2882:	bb 27       	eor	r27, r27
    2884:	80 83       	st	Z, r24
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	a2 83       	std	Z+2, r26	; 0x02
    288a:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	a2 81       	ldd	r26, Z+2	; 0x02
    2892:	b3 81       	ldd	r27, Z+3	; 0x03
    2894:	20 91 0c 02 	lds	r18, 0x020C
    2898:	b2 2b       	or	r27, r18
    289a:	80 83       	st	Z, r24
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	a2 83       	std	Z+2, r26	; 0x02
    28a0:	b3 83       	std	Z+3, r27	; 0x03
    28a2:	28 c0       	rjmp	.+80     	; 0x28f4 <__vector_18+0x41e>
	}
	else if(geo < 16 )
    28a4:	80 91 0e 01 	lds	r24, 0x010E
    28a8:	80 31       	cpi	r24, 0x10	; 16
    28aa:	20 f5       	brcc	.+72     	; 0x28f4 <__vector_18+0x41e>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    28ac:	ef ed       	ldi	r30, 0xDF	; 223
    28ae:	f4 e0       	ldi	r31, 0x04	; 4
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	a2 81       	ldd	r26, Z+2	; 0x02
    28b6:	b3 81       	ldd	r27, Z+3	; 0x03
    28b8:	89 2f       	mov	r24, r25
    28ba:	9a 2f       	mov	r25, r26
    28bc:	ab 2f       	mov	r26, r27
    28be:	bb 27       	eor	r27, r27
    28c0:	a7 fd       	sbrc	r26, 7
    28c2:	ba 95       	dec	r27
    28c4:	80 83       	st	Z, r24
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.alt &= 0x00FFFFFF;
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	a2 81       	ldd	r26, Z+2	; 0x02
    28d2:	b3 81       	ldd	r27, Z+3	; 0x03
    28d4:	bb 27       	eor	r27, r27
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	a2 81       	ldd	r26, Z+2	; 0x02
    28e4:	b3 81       	ldd	r27, Z+3	; 0x03
    28e6:	20 91 0c 02 	lds	r18, 0x020C
    28ea:	b2 2b       	or	r27, r18
    28ec:	80 83       	st	Z, r24
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	a2 83       	std	Z+2, r26	; 0x02
    28f2:	b3 83       	std	Z+3, r27	; 0x03
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    28f4:	80 91 0e 01 	lds	r24, 0x010E
    28f8:	8f 5f       	subi	r24, 0xFF	; 255
    28fa:	80 93 0e 01 	sts	0x010E, r24
    if(geo == 16)
    28fe:	80 91 0e 01 	lds	r24, 0x010E
    2902:	80 31       	cpi	r24, 0x10	; 16
    2904:	19 f4       	brne	.+6      	; 0x290c <__vector_18+0x436>
	{
      geo = 0xFF;
    2906:	8f ef       	ldi	r24, 0xFF	; 255
    2908:	80 93 0e 01 	sts	0x010E, r24

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    290c:	80 91 0d 01 	lds	r24, 0x010D
    2910:	87 30       	cpi	r24, 0x07	; 7
    2912:	08 f0       	brcs	.+2      	; 0x2916 <__vector_18+0x440>
    2914:	54 c0       	rjmp	.+168    	; 0x29be <__vector_18+0x4e8>
  {
	  
	  if(time == 0)
    2916:	80 91 0d 01 	lds	r24, 0x010D
    291a:	81 11       	cpse	r24, r1
    291c:	05 c0       	rjmp	.+10     	; 0x2928 <__vector_18+0x452>
	  {
		  Current_state.gps.hours = last_byte;
    291e:	80 91 0c 02 	lds	r24, 0x020C
    2922:	80 93 e3 04 	sts	0x04E3, r24
    2926:	3c c0       	rjmp	.+120    	; 0x29a0 <__vector_18+0x4ca>
	  }
	  else if(time == 1)
    2928:	80 91 0d 01 	lds	r24, 0x010D
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	29 f4       	brne	.+10     	; 0x293a <__vector_18+0x464>
	  {
		  Current_state.gps.minutes = last_byte;
    2930:	80 91 0c 02 	lds	r24, 0x020C
    2934:	80 93 e4 04 	sts	0x04E4, r24
    2938:	33 c0       	rjmp	.+102    	; 0x29a0 <__vector_18+0x4ca>
	  }
	  else if(time == 2)
    293a:	80 91 0d 01 	lds	r24, 0x010D
    293e:	82 30       	cpi	r24, 0x02	; 2
    2940:	29 f4       	brne	.+10     	; 0x294c <__vector_18+0x476>
	  {
		  Current_state.gps.seconds = last_byte;
    2942:	80 91 0c 02 	lds	r24, 0x020C
    2946:	80 93 e5 04 	sts	0x04E5, r24
    294a:	2a c0       	rjmp	.+84     	; 0x29a0 <__vector_18+0x4ca>
	  }
	  else if(time == 3)
    294c:	80 91 0d 01 	lds	r24, 0x010D
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	29 f4       	brne	.+10     	; 0x295e <__vector_18+0x488>
	  {
		  Current_state.gps.date = last_byte;
    2954:	80 91 0c 02 	lds	r24, 0x020C
    2958:	80 93 e6 04 	sts	0x04E6, r24
    295c:	21 c0       	rjmp	.+66     	; 0x29a0 <__vector_18+0x4ca>
	  }else if(time == 4)
    295e:	80 91 0d 01 	lds	r24, 0x010D
    2962:	84 30       	cpi	r24, 0x04	; 4
    2964:	29 f4       	brne	.+10     	; 0x2970 <__vector_18+0x49a>
	  {
		  Current_state.gps.month = last_byte;
    2966:	80 91 0c 02 	lds	r24, 0x020C
    296a:	80 93 e7 04 	sts	0x04E7, r24
    296e:	18 c0       	rjmp	.+48     	; 0x29a0 <__vector_18+0x4ca>
	  }else if(time > 4)
    2970:	80 91 0d 01 	lds	r24, 0x010D
    2974:	85 30       	cpi	r24, 0x05	; 5
    2976:	a0 f0       	brcs	.+40     	; 0x29a0 <__vector_18+0x4ca>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    2978:	e8 ee       	ldi	r30, 0xE8	; 232
    297a:	f4 e0       	ldi	r31, 0x04	; 4
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	89 2f       	mov	r24, r25
    2982:	99 27       	eor	r25, r25
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	80 83       	st	Z, r24
		  Current_state.gps.year &= 0x00FF;
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	99 27       	eor	r25, r25
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    2992:	80 81       	ld	r24, Z
    2994:	91 81       	ldd	r25, Z+1	; 0x01
    2996:	20 91 0c 02 	lds	r18, 0x020C
    299a:	92 2b       	or	r25, r18
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    29a0:	80 91 0d 01 	lds	r24, 0x010D
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	80 93 0d 01 	sts	0x010D, r24
    if(time == 7)
    29aa:	80 91 0d 01 	lds	r24, 0x010D
    29ae:	87 30       	cpi	r24, 0x07	; 7
    29b0:	31 f4       	brne	.+12     	; 0x29be <__vector_18+0x4e8>
    {
      time = 0xFF;
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	80 93 0d 01 	sts	0x010D, r24
      ///* * The Entire message has been read
      message_end = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	80 93 0b 02 	sts	0x020B, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    29be:	80 91 0d 02 	lds	r24, 0x020D
    29c2:	90 91 0e 02 	lds	r25, 0x020E
    29c6:	a0 91 0f 02 	lds	r26, 0x020F
    29ca:	b0 91 10 02 	lds	r27, 0x0210
    29ce:	8c 3a       	cpi	r24, 0xAC	; 172
    29d0:	94 40       	sbci	r25, 0x04	; 4
    29d2:	af 43       	sbci	r26, 0x3F	; 63
    29d4:	bf 43       	sbci	r27, 0x3F	; 63
    29d6:	29 f4       	brne	.+10     	; 0x29e2 <__vector_18+0x50c>
  {
    message_end = 0;
    29d8:	10 92 0b 02 	sts	0x020B, r1
    pos = 0;
    29dc:	10 92 11 01 	sts	0x0111, r1
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <__vector_18+0x58a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    29e2:	80 91 0d 02 	lds	r24, 0x020D
    29e6:	90 91 0e 02 	lds	r25, 0x020E
    29ea:	a0 91 0f 02 	lds	r26, 0x020F
    29ee:	b0 91 10 02 	lds	r27, 0x0210
    29f2:	8c 3a       	cpi	r24, 0xAC	; 172
    29f4:	95 40       	sbci	r25, 0x05	; 5
    29f6:	af 43       	sbci	r26, 0x3F	; 63
    29f8:	bf 43       	sbci	r27, 0x3F	; 63
    29fa:	19 f4       	brne	.+6      	; 0x2a02 <__vector_18+0x52c>
    vel = 0;
    29fc:	10 92 10 01 	sts	0x0110, r1
    2a00:	2f c0       	rjmp	.+94     	; 0x2a60 <__vector_18+0x58a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2a02:	80 91 0d 02 	lds	r24, 0x020D
    2a06:	90 91 0e 02 	lds	r25, 0x020E
    2a0a:	a0 91 0f 02 	lds	r26, 0x020F
    2a0e:	b0 91 10 02 	lds	r27, 0x0210
    2a12:	8c 3a       	cpi	r24, 0xAC	; 172
    2a14:	9b 40       	sbci	r25, 0x0B	; 11
    2a16:	af 43       	sbci	r26, 0x3F	; 63
    2a18:	bf 43       	sbci	r27, 0x3F	; 63
    2a1a:	19 f4       	brne	.+6      	; 0x2a22 <__vector_18+0x54c>
    dop = 0;
    2a1c:	10 92 0f 01 	sts	0x010F, r1
    2a20:	1f c0       	rjmp	.+62     	; 0x2a60 <__vector_18+0x58a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    2a22:	80 91 0d 02 	lds	r24, 0x020D
    2a26:	90 91 0e 02 	lds	r25, 0x020E
    2a2a:	a0 91 0f 02 	lds	r26, 0x020F
    2a2e:	b0 91 10 02 	lds	r27, 0x0210
    2a32:	8c 3a       	cpi	r24, 0xAC	; 172
    2a34:	9e 40       	sbci	r25, 0x0E	; 14
    2a36:	af 43       	sbci	r26, 0x3F	; 63
    2a38:	bf 43       	sbci	r27, 0x3F	; 63
    2a3a:	19 f4       	brne	.+6      	; 0x2a42 <__vector_18+0x56c>
    geo = 0;
    2a3c:	10 92 0e 01 	sts	0x010E, r1
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <__vector_18+0x58a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    2a42:	80 91 0d 02 	lds	r24, 0x020D
    2a46:	90 91 0e 02 	lds	r25, 0x020E
    2a4a:	a0 91 0f 02 	lds	r26, 0x020F
    2a4e:	b0 91 10 02 	lds	r27, 0x0210
    2a52:	8c 3a       	cpi	r24, 0xAC	; 172
    2a54:	9f 40       	sbci	r25, 0x0F	; 15
    2a56:	af 43       	sbci	r26, 0x3F	; 63
    2a58:	bf 43       	sbci	r27, 0x3F	; 63
    2a5a:	11 f4       	brne	.+4      	; 0x2a60 <__vector_18+0x58a>
    time = 0;
    2a5c:	10 92 0d 01 	sts	0x010D, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 1000)  && message_end && (Current_state.gps.pdop!=0))
    2a60:	80 91 ea 04 	lds	r24, 0x04EA
    2a64:	90 91 eb 04 	lds	r25, 0x04EB
    2a68:	88 3e       	cpi	r24, 0xE8	; 232
    2a6a:	93 40       	sbci	r25, 0x03	; 3
    2a6c:	f0 f4       	brcc	.+60     	; 0x2aaa <__vector_18+0x5d4>
    2a6e:	80 91 0b 02 	lds	r24, 0x020B
    2a72:	88 23       	and	r24, r24
    2a74:	d1 f0       	breq	.+52     	; 0x2aaa <__vector_18+0x5d4>
    2a76:	80 91 ea 04 	lds	r24, 0x04EA
    2a7a:	90 91 eb 04 	lds	r25, 0x04EB
    2a7e:	89 2b       	or	r24, r25
    2a80:	a1 f0       	breq	.+40     	; 0x2aaa <__vector_18+0x5d4>
  {
    GPS_done = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 27 01 	sts	0x0127, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    2a88:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	9f ef       	ldi	r25, 0xFF	; 255
    2a8e:	90 93 eb 04 	sts	0x04EB, r25
    2a92:	80 93 ea 04 	sts	0x04EA, r24
    message_end = 0;
    2a96:	10 92 0b 02 	sts	0x020B, r1
    buffer = 0;
    2a9a:	10 92 0d 02 	sts	0x020D, r1
    2a9e:	10 92 0e 02 	sts	0x020E, r1
    2aa2:	10 92 0f 02 	sts	0x020F, r1
    2aa6:	10 92 10 02 	sts	0x0210, r1
  }
}
    2aaa:	ff 91       	pop	r31
    2aac:	ef 91       	pop	r30
    2aae:	bf 91       	pop	r27
    2ab0:	af 91       	pop	r26
    2ab2:	9f 91       	pop	r25
    2ab4:	8f 91       	pop	r24
    2ab6:	2f 91       	pop	r18
    2ab8:	0f 90       	pop	r0
    2aba:	0b be       	out	0x3b, r0	; 59
    2abc:	0f 90       	pop	r0
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	0f 90       	pop	r0
    2ac2:	1f 90       	pop	r1
    2ac4:	18 95       	reti

00002ac6 <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2ac6:	2f 92       	push	r2
    2ac8:	3f 92       	push	r3
    2aca:	4f 92       	push	r4
    2acc:	5f 92       	push	r5
    2ace:	6f 92       	push	r6
    2ad0:	7f 92       	push	r7
    2ad2:	8f 92       	push	r8
    2ad4:	9f 92       	push	r9
    2ad6:	af 92       	push	r10
    2ad8:	bf 92       	push	r11
    2ada:	cf 92       	push	r12
    2adc:	df 92       	push	r13
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	cc 54       	subi	r28, 0x4C	; 76
    2af0:	d1 09       	sbc	r29, r1
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	fc 01       	movw	r30, r24
    2afe:	49 83       	std	Y+1, r20	; 0x01
    2b00:	5a 83       	std	Y+2, r21	; 0x02
    2b02:	6b 83       	std	Y+3, r22	; 0x03
    2b04:	7c 83       	std	Y+4, r23	; 0x04
    2b06:	32 2e       	mov	r3, r18
    2b08:	2b 96       	adiw	r28, 0x0b	; 11
    2b0a:	1f af       	std	Y+63, r17	; 0x3f
    2b0c:	0e af       	std	Y+62, r16	; 0x3e
    2b0e:	2b 97       	sbiw	r28, 0x0b	; 11
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    2b10:	80 80       	ld	r8, Z
    2b12:	91 80       	ldd	r9, Z+1	; 0x01
    2b14:	a2 80       	ldd	r10, Z+2	; 0x02
    2b16:	b3 80       	ldd	r11, Z+3	; 0x03
    2b18:	c4 80       	ldd	r12, Z+4	; 0x04
    2b1a:	d5 80       	ldd	r13, Z+5	; 0x05
    2b1c:	e6 80       	ldd	r14, Z+6	; 0x06
    2b1e:	f7 80       	ldd	r15, Z+7	; 0x07
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a e7       	ldi	r20, 0x7A	; 122
    2b26:	54 e4       	ldi	r21, 0x44	; 68
    2b28:	60 85       	ldd	r22, Z+8	; 0x08
    2b2a:	71 85       	ldd	r23, Z+9	; 0x09
    2b2c:	82 85       	ldd	r24, Z+10	; 0x0a
    2b2e:	93 85       	ldd	r25, Z+11	; 0x0b
    2b30:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2b34:	69 8b       	std	Y+17, r22	; 0x11
    2b36:	7a 8b       	std	Y+18, r23	; 0x12
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    2b3c:	c5 01       	movw	r24, r10
    2b3e:	b4 01       	movw	r22, r8
    2b40:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    2b44:	2b 01       	movw	r4, r22
    2b46:	3c 01       	movw	r6, r24
    2b48:	c5 01       	movw	r24, r10
    2b4a:	b4 01       	movw	r22, r8
    2b4c:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    2b50:	6d 83       	std	Y+5, r22	; 0x05
    2b52:	7e 83       	std	Y+6, r23	; 0x06
    2b54:	8f 83       	std	Y+7, r24	; 0x07
    2b56:	98 87       	std	Y+8, r25	; 0x08
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 ee       	ldi	r19, 0xE0	; 224
    2b5c:	4b ef       	ldi	r20, 0xFB	; 251
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	69 81       	ldd	r22, Y+1	; 0x01
    2b62:	7a 81       	ldd	r23, Y+2	; 0x02
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2b6c:	6e a7       	std	Y+46, r22	; 0x2e
    2b6e:	7f a7       	std	Y+47, r23	; 0x2f
    2b70:	88 ab       	std	Y+48, r24	; 0x30
    2b72:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2b74:	c7 01       	movw	r24, r14
    2b76:	b6 01       	movw	r22, r12
    2b78:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    2b7c:	60 93 51 02 	sts	0x0251, r22
    2b80:	70 93 52 02 	sts	0x0252, r23
    2b84:	80 93 53 02 	sts	0x0253, r24
    2b88:	90 93 54 02 	sts	0x0254, r25
  sl[1] = sin(lon);
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	b6 01       	movw	r22, r12
    2b90:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    2b94:	60 93 15 02 	sts	0x0215, r22
    2b98:	70 93 16 02 	sts	0x0216, r23
    2b9c:	80 93 17 02 	sts	0x0217, r24
    2ba0:	90 93 18 02 	sts	0x0218, r25
  one = A2 * clat * clat;
    2ba4:	2e e2       	ldi	r18, 0x2E	; 46
    2ba6:	3f e2       	ldi	r19, 0x2F	; 47
    2ba8:	4b e1       	ldi	r20, 0x1B	; 27
    2baa:	5c e4       	ldi	r21, 0x4C	; 76
    2bac:	6d 81       	ldd	r22, Y+5	; 0x05
    2bae:	7e 81       	ldd	r23, Y+6	; 0x06
    2bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb2:	98 85       	ldd	r25, Y+8	; 0x08
    2bb4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2bb8:	2d 81       	ldd	r18, Y+5	; 0x05
    2bba:	3e 81       	ldd	r19, Y+6	; 0x06
    2bbc:	4f 81       	ldd	r20, Y+7	; 0x07
    2bbe:	58 85       	ldd	r21, Y+8	; 0x08
    2bc0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2bc4:	4b 01       	movw	r8, r22
    2bc6:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2bc8:	2b e3       	ldi	r18, 0x3B	; 59
    2bca:	35 e2       	ldi	r19, 0x25	; 37
    2bcc:	4a e1       	ldi	r20, 0x1A	; 26
    2bce:	5c e4       	ldi	r21, 0x4C	; 76
    2bd0:	c3 01       	movw	r24, r6
    2bd2:	b2 01       	movw	r22, r4
    2bd4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2bd8:	a3 01       	movw	r20, r6
    2bda:	92 01       	movw	r18, r4
    2bdc:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2be0:	6b 01       	movw	r12, r22
    2be2:	7c 01       	movw	r14, r24
  three = one + two;
    2be4:	9b 01       	movw	r18, r22
    2be6:	ac 01       	movw	r20, r24
    2be8:	c5 01       	movw	r24, r10
    2bea:	b4 01       	movw	r22, r8
    2bec:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2bf0:	69 8f       	std	Y+25, r22	; 0x19
    2bf2:	7a 8f       	std	Y+26, r23	; 0x1a
    2bf4:	8b 8f       	std	Y+27, r24	; 0x1b
    2bf6:	9c 8f       	std	Y+28, r25	; 0x1c
  four = sqrt(three);
    2bf8:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    2bfc:	69 83       	std	Y+1, r22	; 0x01
    2bfe:	7a 83       	std	Y+2, r23	; 0x02
    2c00:	8b 83       	std	Y+3, r24	; 0x03
    2c02:	9c 83       	std	Y+4, r25	; 0x04
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2c0c:	29 89       	ldd	r18, Y+17	; 0x11
    2c0e:	3a 89       	ldd	r19, Y+18	; 0x12
    2c10:	4b 89       	ldd	r20, Y+19	; 0x13
    2c12:	5c 89       	ldd	r21, Y+20	; 0x14
    2c14:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2c18:	29 89       	ldd	r18, Y+17	; 0x11
    2c1a:	3a 89       	ldd	r19, Y+18	; 0x12
    2c1c:	4b 89       	ldd	r20, Y+19	; 0x13
    2c1e:	5c 89       	ldd	r21, Y+20	; 0x14
    2c20:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2c24:	69 87       	std	Y+9, r22	; 0x09
    2c26:	7a 87       	std	Y+10, r23	; 0x0a
    2c28:	8b 87       	std	Y+11, r24	; 0x0b
    2c2a:	9c 87       	std	Y+12, r25	; 0x0c
    2c2c:	2e e2       	ldi	r18, 0x2E	; 46
    2c2e:	3f e2       	ldi	r19, 0x2F	; 47
    2c30:	4b e1       	ldi	r20, 0x1B	; 27
    2c32:	5c e4       	ldi	r21, 0x4C	; 76
    2c34:	c5 01       	movw	r24, r10
    2c36:	b4 01       	movw	r22, r8
    2c38:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2c3c:	4b 01       	movw	r8, r22
    2c3e:	5c 01       	movw	r10, r24
    2c40:	2b e3       	ldi	r18, 0x3B	; 59
    2c42:	35 e2       	ldi	r19, 0x25	; 37
    2c44:	4a e1       	ldi	r20, 0x1A	; 26
    2c46:	5c e4       	ldi	r21, 0x4C	; 76
    2c48:	c7 01       	movw	r24, r14
    2c4a:	b6 01       	movw	r22, r12
    2c4c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2c50:	9b 01       	movw	r18, r22
    2c52:	ac 01       	movw	r20, r24
    2c54:	c5 01       	movw	r24, r10
    2c56:	b4 01       	movw	r22, r8
    2c58:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2c5c:	29 8d       	ldd	r18, Y+25	; 0x19
    2c5e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c60:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2c62:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2c64:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2c68:	9b 01       	movw	r18, r22
    2c6a:	ac 01       	movw	r20, r24
    2c6c:	69 85       	ldd	r22, Y+9	; 0x09
    2c6e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c74:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2c78:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    2c7c:	4b 01       	movw	r8, r22
    2c7e:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2c80:	29 81       	ldd	r18, Y+1	; 0x01
    2c82:	3a 81       	ldd	r19, Y+2	; 0x02
    2c84:	4b 81       	ldd	r20, Y+3	; 0x03
    2c86:	5c 81       	ldd	r21, Y+4	; 0x04
    2c88:	69 89       	ldd	r22, Y+17	; 0x11
    2c8a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2c94:	a5 01       	movw	r20, r10
    2c96:	94 01       	movw	r18, r8
    2c98:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2c9c:	25 96       	adiw	r28, 0x05	; 5
    2c9e:	6c af       	std	Y+60, r22	; 0x3c
    2ca0:	7d af       	std	Y+61, r23	; 0x3d
    2ca2:	8e af       	std	Y+62, r24	; 0x3e
    2ca4:	9f af       	std	Y+63, r25	; 0x3f
    2ca6:	25 97       	sbiw	r28, 0x05	; 5
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2ca8:	20 e8       	ldi	r18, 0x80	; 128
    2caa:	39 ef       	ldi	r19, 0xF9	; 249
    2cac:	44 e8       	ldi	r20, 0x84	; 132
    2cae:	58 e4       	ldi	r21, 0x48	; 72
    2cb0:	c3 01       	movw	r24, r6
    2cb2:	b2 01       	movw	r22, r4
    2cb4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2cb8:	2d 81       	ldd	r18, Y+5	; 0x05
    2cba:	3e 81       	ldd	r19, Y+6	; 0x06
    2cbc:	4f 81       	ldd	r20, Y+7	; 0x07
    2cbe:	58 85       	ldd	r21, Y+8	; 0x08
    2cc0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2cc4:	6b 01       	movw	r12, r22
    2cc6:	7c 01       	movw	r14, r24
    2cc8:	a5 01       	movw	r20, r10
    2cca:	94 01       	movw	r18, r8
    2ccc:	69 81       	ldd	r22, Y+1	; 0x01
    2cce:	7a 81       	ldd	r23, Y+2	; 0x02
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2cd8:	9b 01       	movw	r18, r22
    2cda:	ac 01       	movw	r20, r24
    2cdc:	c7 01       	movw	r24, r14
    2cde:	b6 01       	movw	r22, r12
    2ce0:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2ce4:	29 96       	adiw	r28, 0x09	; 9
    2ce6:	6c af       	std	Y+60, r22	; 0x3c
    2ce8:	7d af       	std	Y+61, r23	; 0x3d
    2cea:	8e af       	std	Y+62, r24	; 0x3e
    2cec:	9f af       	std	Y+63, r25	; 0x3f
    2cee:	29 97       	sbiw	r28, 0x09	; 9
  slat = slat * cd - clat * sd;
    2cf0:	25 96       	adiw	r28, 0x05	; 5
    2cf2:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cf4:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cf6:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cf8:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cfa:	25 97       	sbiw	r28, 0x05	; 5
    2cfc:	c3 01       	movw	r24, r6
    2cfe:	b2 01       	movw	r22, r4
    2d00:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2d04:	6b 01       	movw	r12, r22
    2d06:	7c 01       	movw	r14, r24
    2d08:	29 96       	adiw	r28, 0x09	; 9
    2d0a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d0c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d0e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d10:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d12:	29 97       	sbiw	r28, 0x09	; 9
    2d14:	6d 81       	ldd	r22, Y+5	; 0x05
    2d16:	7e 81       	ldd	r23, Y+6	; 0x06
    2d18:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1a:	98 85       	ldd	r25, Y+8	; 0x08
    2d1c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	c7 01       	movw	r24, r14
    2d26:	b6 01       	movw	r22, r12
    2d28:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2d2c:	6d 8f       	std	Y+29, r22	; 0x1d
    2d2e:	7e 8f       	std	Y+30, r23	; 0x1e
    2d30:	8f 8f       	std	Y+31, r24	; 0x1f
    2d32:	98 a3       	std	Y+32, r25	; 0x20
  clat = clat * cd + one * sd;
    2d34:	25 96       	adiw	r28, 0x05	; 5
    2d36:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d38:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d3e:	25 97       	sbiw	r28, 0x05	; 5
    2d40:	6d 81       	ldd	r22, Y+5	; 0x05
    2d42:	7e 81       	ldd	r23, Y+6	; 0x06
    2d44:	8f 81       	ldd	r24, Y+7	; 0x07
    2d46:	98 85       	ldd	r25, Y+8	; 0x08
    2d48:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2d4c:	6b 01       	movw	r12, r22
    2d4e:	7c 01       	movw	r14, r24
    2d50:	29 96       	adiw	r28, 0x09	; 9
    2d52:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d54:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d56:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d58:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d5a:	29 97       	sbiw	r28, 0x09	; 9
    2d5c:	c3 01       	movw	r24, r6
    2d5e:	b2 01       	movw	r22, r4
    2d60:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2d64:	9b 01       	movw	r18, r22
    2d66:	ac 01       	movw	r20, r24
    2d68:	c7 01       	movw	r24, r14
    2d6a:	b6 01       	movw	r22, r12
    2d6c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2d70:	69 8f       	std	Y+25, r22	; 0x19
    2d72:	7a 8f       	std	Y+26, r23	; 0x1a
    2d74:	8b 8f       	std	Y+27, r24	; 0x1b
    2d76:	9c 8f       	std	Y+28, r25	; 0x1c
  
  p[1] = 2.0 * slat;
    2d78:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d7a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d7c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d7e:	58 a1       	ldd	r21, Y+32	; 0x20
    2d80:	ca 01       	movw	r24, r20
    2d82:	b9 01       	movw	r22, r18
    2d84:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2d88:	60 93 55 03 	sts	0x0355, r22
    2d8c:	70 93 56 03 	sts	0x0356, r23
    2d90:	80 93 57 03 	sts	0x0357, r24
    2d94:	90 93 58 03 	sts	0x0358, r25
  p[2] = 2.0 * clat;
    2d98:	29 8d       	ldd	r18, Y+25	; 0x19
    2d9a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2d9c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2d9e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2da0:	ca 01       	movw	r24, r20
    2da2:	b9 01       	movw	r22, r18
    2da4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    2da8:	60 93 59 03 	sts	0x0359, r22
    2dac:	70 93 5a 03 	sts	0x035A, r23
    2db0:	80 93 5b 03 	sts	0x035B, r24
    2db4:	90 93 5c 03 	sts	0x035C, r25
  p[3] = 4.5 * slat * slat - 1.5;
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e9       	ldi	r20, 0x90	; 144
    2dbe:	50 e4       	ldi	r21, 0x40	; 64
    2dc0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2dc2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2dc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc8:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2dcc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dce:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2dd0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2dd2:	58 a1       	ldd	r21, Y+32	; 0x20
    2dd4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 ec       	ldi	r20, 0xC0	; 192
    2dde:	5f e3       	ldi	r21, 0x3F	; 63
    2de0:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2de4:	60 93 5d 03 	sts	0x035D, r22
    2de8:	70 93 5e 03 	sts	0x035E, r23
    2dec:	80 93 5f 03 	sts	0x035F, r24
    2df0:	90 93 60 03 	sts	0x0360, r25
  p[4] = sqrt(27) * clat * slat;
    2df4:	21 ee       	ldi	r18, 0xE1	; 225
    2df6:	36 e4       	ldi	r19, 0x46	; 70
    2df8:	46 ea       	ldi	r20, 0xA6	; 166
    2dfa:	50 e4       	ldi	r21, 0x40	; 64
    2dfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e04:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2e08:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e0a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e0c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e0e:	58 a1       	ldd	r21, Y+32	; 0x20
    2e10:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2e14:	60 93 61 03 	sts	0x0361, r22
    2e18:	70 93 62 03 	sts	0x0362, r23
    2e1c:	80 93 63 03 	sts	0x0363, r24
    2e20:	90 93 64 03 	sts	0x0364, r25
  q[1] = -1 * clat;
    2e24:	89 8d       	ldd	r24, Y+25	; 0x19
    2e26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e28:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2e2a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2e2c:	b0 58       	subi	r27, 0x80	; 128
    2e2e:	80 93 8d 02 	sts	0x028D, r24
    2e32:	90 93 8e 02 	sts	0x028E, r25
    2e36:	a0 93 8f 02 	sts	0x028F, r26
    2e3a:	b0 93 90 02 	sts	0x0290, r27
  q[2] = slat;
    2e3e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e40:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e42:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e44:	58 a1       	ldd	r21, Y+32	; 0x20
    2e46:	20 93 91 02 	sts	0x0291, r18
    2e4a:	30 93 92 02 	sts	0x0292, r19
    2e4e:	40 93 93 02 	sts	0x0293, r20
    2e52:	50 93 94 02 	sts	0x0294, r21
  q[3] = -3.0 * clat * slat;
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e4       	ldi	r20, 0x40	; 64
    2e5c:	50 ec       	ldi	r21, 0xC0	; 192
    2e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e66:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2e6a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e6c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e6e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e70:	58 a1       	ldd	r21, Y+32	; 0x20
    2e72:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2e76:	60 93 95 02 	sts	0x0295, r22
    2e7a:	70 93 96 02 	sts	0x0296, r23
    2e7e:	80 93 97 02 	sts	0x0297, r24
    2e82:	90 93 98 02 	sts	0x0298, r25
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2e86:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e88:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e8a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e8c:	58 a1       	ldd	r21, Y+32	; 0x20
    2e8e:	ca 01       	movw	r24, r20
    2e90:	b9 01       	movw	r22, r18
    2e92:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2e96:	6b 01       	movw	r12, r22
    2e98:	7c 01       	movw	r14, r24
    2e9a:	29 8d       	ldd	r18, Y+25	; 0x19
    2e9c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e9e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ea0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ea2:	ca 01       	movw	r24, r20
    2ea4:	b9 01       	movw	r22, r18
    2ea6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2eaa:	9b 01       	movw	r18, r22
    2eac:	ac 01       	movw	r20, r24
    2eae:	c7 01       	movw	r24, r14
    2eb0:	b6 01       	movw	r22, r12
    2eb2:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2eb6:	27 ed       	ldi	r18, 0xD7	; 215
    2eb8:	33 eb       	ldi	r19, 0xB3	; 179
    2eba:	4d ed       	ldi	r20, 0xDD	; 221
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    2ec2:	60 93 99 02 	sts	0x0299, r22
    2ec6:	70 93 9a 02 	sts	0x029A, r23
    2eca:	80 93 9b 02 	sts	0x029B, r24
    2ece:	90 93 9c 02 	sts	0x029C, r25
  
  ratio = RE / r;
    2ed2:	a5 01       	movw	r20, r10
    2ed4:	94 01       	movw	r18, r8
    2ed6:	6a e9       	ldi	r22, 0x9A	; 154
    2ed8:	79 e1       	ldi	r23, 0x19	; 25
    2eda:	87 ec       	ldi	r24, 0xC7	; 199
    2edc:	95 e4       	ldi	r25, 0x45	; 69
    2ede:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2ee2:	21 96       	adiw	r28, 0x01	; 1
    2ee4:	6c af       	std	Y+60, r22	; 0x3c
    2ee6:	7d af       	std	Y+61, r23	; 0x3d
    2ee8:	8e af       	std	Y+62, r24	; 0x3e
    2eea:	9f af       	std	Y+63, r25	; 0x3f
    2eec:	21 97       	sbiw	r28, 0x01	; 1
  
  max = (order * (order + 3)) / 2;
    2eee:	43 2d       	mov	r20, r3
    2ef0:	50 e0       	ldi	r21, 0x00	; 0
    2ef2:	9a 01       	movw	r18, r20
    2ef4:	2d 5f       	subi	r18, 0xFD	; 253
    2ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef8:	42 9f       	mul	r20, r18
    2efa:	c0 01       	movw	r24, r0
    2efc:	43 9f       	mul	r20, r19
    2efe:	90 0d       	add	r25, r0
    2f00:	52 9f       	mul	r21, r18
    2f02:	90 0d       	add	r25, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	99 23       	and	r25, r25
    2f08:	0c f4       	brge	.+2      	; 0x2f0c <igrf+0x446>
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	95 95       	asr	r25
    2f0e:	87 95       	ror	r24
    2f10:	88 af       	std	Y+56, r24	; 0x38
  for(k = 1; k <= max; k++)
    2f12:	88 23       	and	r24, r24
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <igrf+0x452>
    2f16:	0f c4       	rjmp	.+2078   	; 0x3736 <igrf+0xc70>
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2f18:	1d a6       	std	Y+45, r1	; 0x2d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    2f1a:	22 24       	eor	r2, r2
    2f1c:	23 94       	inc	r2
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2f1e:	1d 82       	std	Y+5, r1	; 0x05
    2f20:	33 24       	eor	r3, r3
    2f22:	33 94       	inc	r3
    2f24:	31 e0       	ldi	r19, 0x01	; 1
    2f26:	39 8b       	std	Y+17, r19	; 0x11
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2f28:	19 a6       	std	Y+41, r1	; 0x29
    2f2a:	1a a6       	std	Y+42, r1	; 0x2a
    2f2c:	1b a6       	std	Y+43, r1	; 0x2b
    2f2e:	1c a6       	std	Y+44, r1	; 0x2c
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    2f30:	1d a2       	std	Y+37, r1	; 0x25
    2f32:	1e a2       	std	Y+38, r1	; 0x26
    2f34:	1f a2       	std	Y+39, r1	; 0x27
    2f36:	18 a6       	std	Y+40, r1	; 0x28
    2f38:	19 ae       	std	Y+57, r1	; 0x39
    2f3a:	1a ae       	std	Y+58, r1	; 0x3a
    2f3c:	1b ae       	std	Y+59, r1	; 0x3b
    2f3e:	1c ae       	std	Y+60, r1	; 0x3c
    2f40:	19 a2       	std	Y+33, r1	; 0x21
    2f42:	1a a2       	std	Y+34, r1	; 0x22
    2f44:	1b a2       	std	Y+35, r1	; 0x23
    2f46:	1c a2       	std	Y+36, r1	; 0x24
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2f48:	4d 81       	ldd	r20, Y+5	; 0x05
    2f4a:	43 15       	cp	r20, r3
    2f4c:	e8 f4       	brcc	.+58     	; 0x2f88 <igrf+0x4c2>
    {
      m = 0;
      n++;
    2f4e:	4f 5f       	subi	r20, 0xFF	; 255
    2f50:	4d 83       	std	Y+5, r20	; 0x05
      rr = pow(ratio, n + 2);
    2f52:	64 2f       	mov	r22, r20
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	6e 5f       	subi	r22, 0xFE	; 254
    2f58:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5a:	88 27       	eor	r24, r24
    2f5c:	77 fd       	sbrc	r23, 7
    2f5e:	80 95       	com	r24
    2f60:	98 2f       	mov	r25, r24
    2f62:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    2f66:	9b 01       	movw	r18, r22
    2f68:	ac 01       	movw	r20, r24
    2f6a:	21 96       	adiw	r28, 0x01	; 1
    2f6c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f6e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f70:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f72:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f74:	21 97       	sbiw	r28, 0x01	; 1
    2f76:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <pow>
    2f7a:	69 a7       	std	Y+41, r22	; 0x29
    2f7c:	7a a7       	std	Y+42, r23	; 0x2a
    2f7e:	8b a7       	std	Y+43, r24	; 0x2b
    2f80:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    2f82:	5d 81       	ldd	r21, Y+5	; 0x05
    2f84:	5d a7       	std	Y+45, r21	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    2f86:	31 2c       	mov	r3, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2f88:	84 e0       	ldi	r24, 0x04	; 4
    2f8a:	82 15       	cp	r24, r2
    2f8c:	08 f0       	brcs	.+2      	; 0x2f90 <igrf+0x4ca>
    2f8e:	22 c2       	rjmp	.+1092   	; 0x33d4 <igrf+0x90e>
    {
      if(m == n)
    2f90:	9d 81       	ldd	r25, Y+5	; 0x05
    2f92:	39 12       	cpse	r3, r25
    2f94:	00 c1       	rjmp	.+512    	; 0x3196 <igrf+0x6d0>
      {
        one = sqrt(1 - (0.5 / fm));
    2f96:	a3 2d       	mov	r26, r3
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	ba 83       	std	Y+2, r27	; 0x02
    2f9c:	a9 83       	std	Y+1, r26	; 0x01
    2f9e:	bd 01       	movw	r22, r26
    2fa0:	88 27       	eor	r24, r24
    2fa2:	77 fd       	sbrc	r23, 7
    2fa4:	80 95       	com	r24
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    2fac:	6b 01       	movw	r12, r22
    2fae:	7c 01       	movw	r14, r24
    2fb0:	9b 01       	movw	r18, r22
    2fb2:	ac 01       	movw	r20, r24
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	9f e3       	ldi	r25, 0x3F	; 63
    2fbc:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    2fc0:	9b 01       	movw	r18, r22
    2fc2:	ac 01       	movw	r20, r24
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	80 e8       	ldi	r24, 0x80	; 128
    2fca:	9f e3       	ldi	r25, 0x3F	; 63
    2fcc:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    2fd0:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    2fd4:	4b 01       	movw	r8, r22
    2fd6:	5c 01       	movw	r10, r24
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    2fd8:	62 2c       	mov	r6, r2
    2fda:	71 2c       	mov	r7, r1
    2fdc:	83 01       	movw	r16, r6
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	0e 1b       	sub	r16, r30
    2fe4:	1f 0b       	sbc	r17, r31
    2fe6:	01 50       	subi	r16, 0x01	; 1
    2fe8:	11 09       	sbc	r17, r1
    2fea:	66 0c       	add	r6, r6
    2fec:	77 1c       	adc	r7, r7
    2fee:	66 0c       	add	r6, r6
    2ff0:	77 1c       	adc	r7, r7
    2ff2:	93 01       	movw	r18, r6
    2ff4:	2f 5a       	subi	r18, 0xAF	; 175
    2ff6:	3c 4f       	sbci	r19, 0xFC	; 252
    2ff8:	29 01       	movw	r4, r18
    2ffa:	a7 01       	movw	r20, r14
    2ffc:	96 01       	movw	r18, r12
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	80 e8       	ldi	r24, 0x80	; 128
    3004:	9f e3       	ldi	r25, 0x3F	; 63
    3006:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	5f e3       	ldi	r21, 0x3F	; 63
    3012:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3016:	a5 01       	movw	r20, r10
    3018:	94 01       	movw	r18, r8
    301a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    301e:	29 8d       	ldd	r18, Y+25	; 0x19
    3020:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3022:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3024:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3026:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    302a:	a8 01       	movw	r20, r16
    302c:	44 0f       	add	r20, r20
    302e:	55 1f       	adc	r21, r21
    3030:	44 0f       	add	r20, r20
    3032:	55 1f       	adc	r21, r21
    3034:	5e 87       	std	Y+14, r21	; 0x0e
    3036:	4d 87       	std	Y+13, r20	; 0x0d
    3038:	8a 01       	movw	r16, r20
    303a:	0f 5a       	subi	r16, 0xAF	; 175
    303c:	1c 4f       	sbci	r17, 0xFC	; 252
    303e:	d8 01       	movw	r26, r16
    3040:	2d 91       	ld	r18, X+
    3042:	3d 91       	ld	r19, X+
    3044:	4d 91       	ld	r20, X+
    3046:	5c 91       	ld	r21, X
    3048:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    304c:	f2 01       	movw	r30, r4
    304e:	60 83       	st	Z, r22
    3050:	71 83       	std	Z+1, r23	; 0x01
    3052:	82 83       	std	Z+2, r24	; 0x02
    3054:	93 83       	std	Z+3, r25	; 0x03
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    3056:	93 01       	movw	r18, r6
    3058:	27 57       	subi	r18, 0x77	; 119
    305a:	3d 4f       	sbci	r19, 0xFD	; 253
    305c:	3a 87       	std	Y+10, r19	; 0x0a
    305e:	29 87       	std	Y+9, r18	; 0x09
    3060:	ed 85       	ldd	r30, Y+13	; 0x0d
    3062:	fe 85       	ldd	r31, Y+14	; 0x0e
    3064:	e7 57       	subi	r30, 0x77	; 119
    3066:	fd 4f       	sbci	r31, 0xFD	; 253
    3068:	20 81       	ld	r18, Z
    306a:	31 81       	ldd	r19, Z+1	; 0x01
    306c:	42 81       	ldd	r20, Z+2	; 0x02
    306e:	53 81       	ldd	r21, Z+3	; 0x03
    3070:	69 8d       	ldd	r22, Y+25	; 0x19
    3072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3078:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    307c:	2b 01       	movw	r4, r22
    307e:	3c 01       	movw	r6, r24
    3080:	d8 01       	movw	r26, r16
    3082:	2d 91       	ld	r18, X+
    3084:	3d 91       	ld	r19, X+
    3086:	4d 91       	ld	r20, X+
    3088:	5c 91       	ld	r21, X
    308a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    308c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    308e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3090:	98 a1       	ldd	r25, Y+32	; 0x20
    3092:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3096:	a7 01       	movw	r20, r14
    3098:	96 01       	movw	r18, r12
    309a:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    309e:	9b 01       	movw	r18, r22
    30a0:	ac 01       	movw	r20, r24
    30a2:	c3 01       	movw	r24, r6
    30a4:	b2 01       	movw	r22, r4
    30a6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    30aa:	a5 01       	movw	r20, r10
    30ac:	94 01       	movw	r18, r8
    30ae:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    30b2:	e9 85       	ldd	r30, Y+9	; 0x09
    30b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    30b6:	60 83       	st	Z, r22
    30b8:	71 83       	std	Z+1, r23	; 0x01
    30ba:	82 83       	std	Z+2, r24	; 0x02
    30bc:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    30be:	09 81       	ldd	r16, Y+1	; 0x01
    30c0:	1a 81       	ldd	r17, Y+2	; 0x02
    30c2:	01 50       	subi	r16, 0x01	; 1
    30c4:	11 09       	sbc	r17, r1
    30c6:	a1 e5       	ldi	r26, 0x51	; 81
    30c8:	b2 e0       	ldi	r27, 0x02	; 2
    30ca:	cd 90       	ld	r12, X+
    30cc:	dd 90       	ld	r13, X+
    30ce:	ed 90       	ld	r14, X+
    30d0:	fc 90       	ld	r15, X
    30d2:	00 0f       	add	r16, r16
    30d4:	11 1f       	adc	r17, r17
    30d6:	00 0f       	add	r16, r16
    30d8:	11 1f       	adc	r17, r17
    30da:	f8 01       	movw	r30, r16
    30dc:	e3 5b       	subi	r30, 0xB3	; 179
    30de:	fd 4f       	sbci	r31, 0xFD	; 253
    30e0:	80 80       	ld	r8, Z
    30e2:	91 80       	ldd	r9, Z+1	; 0x01
    30e4:	a2 80       	ldd	r10, Z+2	; 0x02
    30e6:	b3 80       	ldd	r11, Z+3	; 0x03
    30e8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ea:	fa 81       	ldd	r31, Y+2	; 0x02
    30ec:	ee 0f       	add	r30, r30
    30ee:	ff 1f       	adc	r31, r31
    30f0:	ee 0f       	add	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	fa 87       	std	Y+10, r31	; 0x0a
    30f6:	e9 87       	std	Y+9, r30	; 0x09
    30f8:	ef 5e       	subi	r30, 0xEF	; 239
    30fa:	fd 4f       	sbci	r31, 0xFD	; 253
    30fc:	fa 83       	std	Y+2, r31	; 0x02
    30fe:	e9 83       	std	Y+1, r30	; 0x01
    3100:	0f 5e       	subi	r16, 0xEF	; 239
    3102:	1d 4f       	sbci	r17, 0xFD	; 253
    3104:	d8 01       	movw	r26, r16
    3106:	2d 91       	ld	r18, X+
    3108:	3d 91       	ld	r19, X+
    310a:	4d 91       	ld	r20, X+
    310c:	5c 91       	ld	r21, X
    310e:	c7 01       	movw	r24, r14
    3110:	b6 01       	movw	r22, r12
    3112:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3116:	2b 01       	movw	r4, r22
    3118:	3c 01       	movw	r6, r24
    311a:	e5 e1       	ldi	r30, 0x15	; 21
    311c:	f2 e0       	ldi	r31, 0x02	; 2
    311e:	20 81       	ld	r18, Z
    3120:	31 81       	ldd	r19, Z+1	; 0x01
    3122:	42 81       	ldd	r20, Z+2	; 0x02
    3124:	53 81       	ldd	r21, Z+3	; 0x03
    3126:	c5 01       	movw	r24, r10
    3128:	b4 01       	movw	r22, r8
    312a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    312e:	9b 01       	movw	r18, r22
    3130:	ac 01       	movw	r20, r24
    3132:	c3 01       	movw	r24, r6
    3134:	b2 01       	movw	r22, r4
    3136:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    313a:	a9 81       	ldd	r26, Y+1	; 0x01
    313c:	ba 81       	ldd	r27, Y+2	; 0x02
    313e:	6d 93       	st	X+, r22
    3140:	7d 93       	st	X+, r23
    3142:	8d 93       	st	X+, r24
    3144:	9c 93       	st	X, r25
    3146:	13 97       	sbiw	r26, 0x03	; 3
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    3148:	e9 85       	ldd	r30, Y+9	; 0x09
    314a:	fa 85       	ldd	r31, Y+10	; 0x0a
    314c:	e3 5b       	subi	r30, 0xB3	; 179
    314e:	fd 4f       	sbci	r31, 0xFD	; 253
    3150:	3f 01       	movw	r6, r30
    3152:	a5 01       	movw	r20, r10
    3154:	94 01       	movw	r18, r8
    3156:	c7 01       	movw	r24, r14
    3158:	b6 01       	movw	r22, r12
    315a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    315e:	6b 01       	movw	r12, r22
    3160:	7c 01       	movw	r14, r24
    3162:	a5 e1       	ldi	r26, 0x15	; 21
    3164:	b2 e0       	ldi	r27, 0x02	; 2
    3166:	2d 91       	ld	r18, X+
    3168:	3d 91       	ld	r19, X+
    316a:	4d 91       	ld	r20, X+
    316c:	5c 91       	ld	r21, X
    316e:	f8 01       	movw	r30, r16
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
    3180:	c7 01       	movw	r24, r14
    3182:	b6 01       	movw	r22, r12
    3184:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3188:	d3 01       	movw	r26, r6
    318a:	6d 93       	st	X+, r22
    318c:	7d 93       	st	X+, r23
    318e:	8d 93       	st	X+, r24
    3190:	9c 93       	st	X, r25
    3192:	13 97       	sbiw	r26, 0x03	; 3
    3194:	1f c1       	rjmp	.+574    	; 0x33d4 <igrf+0x90e>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    3196:	bd a5       	ldd	r27, Y+45	; 0x2d
    3198:	0b 2f       	mov	r16, r27
    319a:	10 e0       	ldi	r17, 0x00	; 0
    319c:	33 9c       	mul	r3, r3
    319e:	c0 01       	movw	r24, r0
    31a0:	11 24       	eor	r1, r1
    31a2:	00 9f       	mul	r16, r16
    31a4:	b0 01       	movw	r22, r0
    31a6:	01 9f       	mul	r16, r17
    31a8:	70 0d       	add	r23, r0
    31aa:	70 0d       	add	r23, r0
    31ac:	11 24       	eor	r1, r1
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	68 1b       	sub	r22, r24
    31b4:	79 0b       	sbc	r23, r25
    31b6:	88 27       	eor	r24, r24
    31b8:	77 fd       	sbrc	r23, 7
    31ba:	80 95       	com	r24
    31bc:	98 2f       	mov	r25, r24
    31be:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    31c2:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    31c6:	4b 01       	movw	r8, r22
    31c8:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    31ca:	b8 01       	movw	r22, r16
    31cc:	88 27       	eor	r24, r24
    31ce:	77 fd       	sbrc	r23, 7
    31d0:	80 95       	com	r24
    31d2:	98 2f       	mov	r25, r24
    31d4:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    31d8:	2b 01       	movw	r4, r22
    31da:	3c 01       	movw	r6, r24
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	5f e3       	ldi	r21, 0x3F	; 63
    31e4:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    31e8:	69 87       	std	Y+9, r22	; 0x09
    31ea:	7a 87       	std	Y+10, r23	; 0x0a
    31ec:	8b 87       	std	Y+11, r24	; 0x0b
    31ee:	9c 87       	std	Y+12, r25	; 0x0c
    31f0:	9b 01       	movw	r18, r22
    31f2:	ac 01       	movw	r20, r24
    31f4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    31f8:	6b 01       	movw	r12, r22
    31fa:	7c 01       	movw	r14, r24
    31fc:	e9 81       	ldd	r30, Y+1	; 0x01
    31fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3200:	bf 01       	movw	r22, r30
    3202:	88 27       	eor	r24, r24
    3204:	77 fd       	sbrc	r23, 7
    3206:	80 95       	com	r24
    3208:	98 2f       	mov	r25, r24
    320a:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    320e:	9b 01       	movw	r18, r22
    3210:	ac 01       	movw	r20, r24
    3212:	c7 01       	movw	r24, r14
    3214:	b6 01       	movw	r22, r12
    3216:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    321a:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    321e:	a5 01       	movw	r20, r10
    3220:	94 01       	movw	r18, r8
    3222:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3226:	6b 01       	movw	r12, r22
    3228:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    322a:	a3 01       	movw	r20, r6
    322c:	92 01       	movw	r18, r4
    322e:	c3 01       	movw	r24, r6
    3230:	b2 01       	movw	r22, r4
    3232:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3242:	a5 01       	movw	r20, r10
    3244:	94 01       	movw	r18, r8
    3246:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    324a:	6d 87       	std	Y+13, r22	; 0x0d
    324c:	7e 87       	std	Y+14, r23	; 0x0e
    324e:	8f 87       	std	Y+15, r24	; 0x0f
    3250:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    3252:	82 2d       	mov	r24, r2
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	fd 81       	ldd	r31, Y+5	; 0x05
    3258:	2f 2f       	mov	r18, r31
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	ac 01       	movw	r20, r24
    325e:	42 1b       	sub	r20, r18
    3260:	53 0b       	sbc	r21, r19
    3262:	5e 8b       	std	Y+22, r21	; 0x16
    3264:	4d 8b       	std	Y+21, r20	; 0x15
    3266:	8a 01       	movw	r16, r20
    3268:	02 1b       	sub	r16, r18
    326a:	13 0b       	sbc	r17, r19
    326c:	0f 5f       	subi	r16, 0xFF	; 255
    326e:	1f 4f       	sbci	r17, 0xFF	; 255
    3270:	dc 01       	movw	r26, r24
    3272:	aa 0f       	add	r26, r26
    3274:	bb 1f       	adc	r27, r27
    3276:	aa 0f       	add	r26, r26
    3278:	bb 1f       	adc	r27, r27
    327a:	ba 83       	std	Y+2, r27	; 0x02
    327c:	a9 83       	std	Y+1, r26	; 0x01
    327e:	af 5a       	subi	r26, 0xAF	; 175
    3280:	bc 4f       	sbci	r27, 0xFC	; 252
    3282:	bb ab       	std	Y+51, r27	; 0x33
    3284:	aa ab       	std	Y+50, r26	; 0x32
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	40 e8       	ldi	r20, 0x80	; 128
    328c:	5f e3       	ldi	r21, 0x3F	; 63
    328e:	c3 01       	movw	r24, r6
    3290:	b2 01       	movw	r22, r4
    3292:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3296:	4b 01       	movw	r8, r22
    3298:	5c 01       	movw	r10, r24
    329a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    329c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    329e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    32a0:	58 a1       	ldd	r21, Y+32	; 0x20
    32a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    32a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	98 89       	ldd	r25, Y+16	; 0x10
    32aa:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    32ae:	ed 89       	ldd	r30, Y+21	; 0x15
    32b0:	fe 89       	ldd	r31, Y+22	; 0x16
    32b2:	ee 0f       	add	r30, r30
    32b4:	ff 1f       	adc	r31, r31
    32b6:	ee 0f       	add	r30, r30
    32b8:	ff 1f       	adc	r31, r31
    32ba:	2d 96       	adiw	r28, 0x0d	; 13
    32bc:	ff af       	std	Y+63, r31	; 0x3f
    32be:	ee af       	std	Y+62, r30	; 0x3e
    32c0:	2d 97       	sbiw	r28, 0x0d	; 13
    32c2:	ef 5a       	subi	r30, 0xAF	; 175
    32c4:	fc 4f       	sbci	r31, 0xFC	; 252
    32c6:	fe 8b       	std	Y+22, r31	; 0x16
    32c8:	ed 8b       	std	Y+21, r30	; 0x15
    32ca:	20 81       	ld	r18, Z
    32cc:	31 81       	ldd	r19, Z+1	; 0x01
    32ce:	42 81       	ldd	r20, Z+2	; 0x02
    32d0:	53 81       	ldd	r21, Z+3	; 0x03
    32d2:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    32d6:	a3 01       	movw	r20, r6
    32d8:	92 01       	movw	r18, r4
    32da:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    32de:	6c ab       	std	Y+52, r22	; 0x34
    32e0:	7d ab       	std	Y+53, r23	; 0x35
    32e2:	8e ab       	std	Y+54, r24	; 0x36
    32e4:	9f ab       	std	Y+55, r25	; 0x37
    32e6:	00 0f       	add	r16, r16
    32e8:	11 1f       	adc	r17, r17
    32ea:	00 0f       	add	r16, r16
    32ec:	11 1f       	adc	r17, r17
    32ee:	f8 01       	movw	r30, r16
    32f0:	ef 5a       	subi	r30, 0xAF	; 175
    32f2:	fc 4f       	sbci	r31, 0xFC	; 252
    32f4:	20 81       	ld	r18, Z
    32f6:	31 81       	ldd	r19, Z+1	; 0x01
    32f8:	42 81       	ldd	r20, Z+2	; 0x02
    32fa:	53 81       	ldd	r21, Z+3	; 0x03
    32fc:	c7 01       	movw	r24, r14
    32fe:	b6 01       	movw	r22, r12
    3300:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3304:	29 85       	ldd	r18, Y+9	; 0x09
    3306:	3a 85       	ldd	r19, Y+10	; 0x0a
    3308:	4b 85       	ldd	r20, Y+11	; 0x0b
    330a:	5c 85       	ldd	r21, Y+12	; 0x0c
    330c:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3310:	9b 01       	movw	r18, r22
    3312:	ac 01       	movw	r20, r24
    3314:	6c a9       	ldd	r22, Y+52	; 0x34
    3316:	7d a9       	ldd	r23, Y+53	; 0x35
    3318:	8e a9       	ldd	r24, Y+54	; 0x36
    331a:	9f a9       	ldd	r25, Y+55	; 0x37
    331c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3320:	9b 01       	movw	r18, r22
    3322:	ac 01       	movw	r20, r24
    3324:	c5 01       	movw	r24, r10
    3326:	b4 01       	movw	r22, r8
    3328:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    332c:	aa a9       	ldd	r26, Y+50	; 0x32
    332e:	bb a9       	ldd	r27, Y+51	; 0x33
    3330:	6d 93       	st	X+, r22
    3332:	7d 93       	st	X+, r23
    3334:	8d 93       	st	X+, r24
    3336:	9c 93       	st	X, r25
    3338:	13 97       	sbiw	r26, 0x03	; 3
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    333a:	e9 81       	ldd	r30, Y+1	; 0x01
    333c:	fa 81       	ldd	r31, Y+2	; 0x02
    333e:	e7 57       	subi	r30, 0x77	; 119
    3340:	fd 4f       	sbci	r31, 0xFD	; 253
    3342:	fa 83       	std	Y+2, r31	; 0x02
    3344:	e9 83       	std	Y+1, r30	; 0x01
    3346:	2d 96       	adiw	r28, 0x0d	; 13
    3348:	ee ad       	ldd	r30, Y+62	; 0x3e
    334a:	ff ad       	ldd	r31, Y+63	; 0x3f
    334c:	2d 97       	sbiw	r28, 0x0d	; 13
    334e:	e7 57       	subi	r30, 0x77	; 119
    3350:	fd 4f       	sbci	r31, 0xFD	; 253
    3352:	20 81       	ld	r18, Z
    3354:	31 81       	ldd	r19, Z+1	; 0x01
    3356:	42 81       	ldd	r20, Z+2	; 0x02
    3358:	53 81       	ldd	r21, Z+3	; 0x03
    335a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    335c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    335e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3360:	98 a1       	ldd	r25, Y+32	; 0x20
    3362:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3366:	4b 01       	movw	r8, r22
    3368:	5c 01       	movw	r10, r24
    336a:	ad 89       	ldd	r26, Y+21	; 0x15
    336c:	be 89       	ldd	r27, Y+22	; 0x16
    336e:	2d 91       	ld	r18, X+
    3370:	3d 91       	ld	r19, X+
    3372:	4d 91       	ld	r20, X+
    3374:	5c 91       	ld	r21, X
    3376:	69 8d       	ldd	r22, Y+25	; 0x19
    3378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    337a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    337c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    337e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3382:	a3 01       	movw	r20, r6
    3384:	92 01       	movw	r18, r4
    3386:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	c5 01       	movw	r24, r10
    3390:	b4 01       	movw	r22, r8
    3392:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3396:	2d 85       	ldd	r18, Y+13	; 0x0d
    3398:	3e 85       	ldd	r19, Y+14	; 0x0e
    339a:	4f 85       	ldd	r20, Y+15	; 0x0f
    339c:	58 89       	ldd	r21, Y+16	; 0x10
    339e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    33a2:	4b 01       	movw	r8, r22
    33a4:	5c 01       	movw	r10, r24
    33a6:	f8 01       	movw	r30, r16
    33a8:	e7 57       	subi	r30, 0x77	; 119
    33aa:	fd 4f       	sbci	r31, 0xFD	; 253
    33ac:	20 81       	ld	r18, Z
    33ae:	31 81       	ldd	r19, Z+1	; 0x01
    33b0:	42 81       	ldd	r20, Z+2	; 0x02
    33b2:	53 81       	ldd	r21, Z+3	; 0x03
    33b4:	c7 01       	movw	r24, r14
    33b6:	b6 01       	movw	r22, r12
    33b8:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    33bc:	9b 01       	movw	r18, r22
    33be:	ac 01       	movw	r20, r24
    33c0:	c5 01       	movw	r24, r10
    33c2:	b4 01       	movw	r22, r8
    33c4:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    33c8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ca:	fa 81       	ldd	r31, Y+2	; 0x02
    33cc:	60 83       	st	Z, r22
    33ce:	71 83       	std	Z+1, r23	; 0x01
    33d0:	82 83       	std	Z+2, r24	; 0x02
    33d2:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    33d4:	f9 89       	ldd	r31, Y+17	; 0x11
    33d6:	0f 2f       	mov	r16, r31
    33d8:	10 e0       	ldi	r17, 0x00	; 0
    33da:	f8 01       	movw	r30, r16
    33dc:	ee 0f       	add	r30, r30
    33de:	ff 1f       	adc	r31, r31
    33e0:	ee 0f       	add	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	e4 54       	subi	r30, 0x44	; 68
    33e6:	fb 4f       	sbci	r31, 0xFB	; 251
    33e8:	c5 90       	lpm	r12, Z+
    33ea:	d5 90       	lpm	r13, Z+
    33ec:	e5 90       	lpm	r14, Z+
    33ee:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    33f0:	f8 01       	movw	r30, r16
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	ee 0f       	add	r30, r30
    33f8:	ff 1f       	adc	r31, r31
    33fa:	e4 55       	subi	r30, 0x54	; 84
    33fc:	fe 4f       	sbci	r31, 0xFE	; 254
    33fe:	25 91       	lpm	r18, Z+
    3400:	35 91       	lpm	r19, Z+
    3402:	45 91       	lpm	r20, Z+
    3404:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    3406:	6e a5       	ldd	r22, Y+46	; 0x2e
    3408:	7f a5       	ldd	r23, Y+47	; 0x2f
    340a:	88 a9       	ldd	r24, Y+48	; 0x30
    340c:	99 a9       	ldd	r25, Y+49	; 0x31
    340e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3412:	9b 01       	movw	r18, r22
    3414:	ac 01       	movw	r20, r24
    3416:	c7 01       	movw	r24, r14
    3418:	b6 01       	movw	r22, r12
    341a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    341e:	29 a5       	ldd	r18, Y+41	; 0x29
    3420:	3a a5       	ldd	r19, Y+42	; 0x2a
    3422:	4b a5       	ldd	r20, Y+43	; 0x2b
    3424:	5c a5       	ldd	r21, Y+44	; 0x2c
    3426:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    342a:	6b 01       	movw	r12, r22
    342c:	7c 01       	movw	r14, r24
    
    
    if(m == 0)
    342e:	31 10       	cpse	r3, r1
    3430:	36 c0       	rjmp	.+108    	; 0x349e <igrf+0x9d8>
    {
      x += one * q[k];
    3432:	02 2d       	mov	r16, r2
    3434:	10 e0       	ldi	r17, 0x00	; 0
    3436:	00 0f       	add	r16, r16
    3438:	11 1f       	adc	r17, r17
    343a:	00 0f       	add	r16, r16
    343c:	11 1f       	adc	r17, r17
    343e:	f8 01       	movw	r30, r16
    3440:	e7 57       	subi	r30, 0x77	; 119
    3442:	fd 4f       	sbci	r31, 0xFD	; 253
    3444:	20 81       	ld	r18, Z
    3446:	31 81       	ldd	r19, Z+1	; 0x01
    3448:	42 81       	ldd	r20, Z+2	; 0x02
    344a:	53 81       	ldd	r21, Z+3	; 0x03
    344c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3450:	9b 01       	movw	r18, r22
    3452:	ac 01       	movw	r20, r24
    3454:	69 a1       	ldd	r22, Y+33	; 0x21
    3456:	7a a1       	ldd	r23, Y+34	; 0x22
    3458:	8b a1       	ldd	r24, Y+35	; 0x23
    345a:	9c a1       	ldd	r25, Y+36	; 0x24
    345c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3460:	69 a3       	std	Y+33, r22	; 0x21
    3462:	7a a3       	std	Y+34, r23	; 0x22
    3464:	8b a3       	std	Y+35, r24	; 0x23
    3466:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    3468:	f8 01       	movw	r30, r16
    346a:	ef 5a       	subi	r30, 0xAF	; 175
    346c:	fc 4f       	sbci	r31, 0xFC	; 252
    346e:	20 81       	ld	r18, Z
    3470:	31 81       	ldd	r19, Z+1	; 0x01
    3472:	42 81       	ldd	r20, Z+2	; 0x02
    3474:	53 81       	ldd	r21, Z+3	; 0x03
    3476:	c7 01       	movw	r24, r14
    3478:	b6 01       	movw	r22, r12
    347a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	6d a1       	ldd	r22, Y+37	; 0x25
    3484:	7e a1       	ldd	r23, Y+38	; 0x26
    3486:	8f a1       	ldd	r24, Y+39	; 0x27
    3488:	98 a5       	ldd	r25, Y+40	; 0x28
    348a:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    348e:	6d a3       	std	Y+37, r22	; 0x25
    3490:	7e a3       	std	Y+38, r23	; 0x26
    3492:	8f a3       	std	Y+39, r24	; 0x27
    3494:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    3496:	29 89       	ldd	r18, Y+17	; 0x11
    3498:	2f 5f       	subi	r18, 0xFF	; 255
    349a:	29 8b       	std	Y+17, r18	; 0x11
    349c:	45 c1       	rjmp	.+650    	; 0x3728 <igrf+0xc62>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    349e:	0f 5f       	subi	r16, 0xFF	; 255
    34a0:	1f 4f       	sbci	r17, 0xFF	; 255
    34a2:	f8 01       	movw	r30, r16
    34a4:	ee 0f       	add	r30, r30
    34a6:	ff 1f       	adc	r31, r31
    34a8:	ee 0f       	add	r30, r30
    34aa:	ff 1f       	adc	r31, r31
    34ac:	e4 54       	subi	r30, 0x44	; 68
    34ae:	fb 4f       	sbci	r31, 0xFB	; 251
    34b0:	85 90       	lpm	r8, Z+
    34b2:	95 90       	lpm	r9, Z+
    34b4:	a5 90       	lpm	r10, Z+
    34b6:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    34b8:	f8 01       	movw	r30, r16
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	e4 55       	subi	r30, 0x54	; 84
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	25 91       	lpm	r18, Z+
    34c8:	35 91       	lpm	r19, Z+
    34ca:	45 91       	lpm	r20, Z+
    34cc:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    34ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    34d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    34d2:	88 a9       	ldd	r24, Y+48	; 0x30
    34d4:	99 a9       	ldd	r25, Y+49	; 0x31
    34d6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    34da:	9b 01       	movw	r18, r22
    34dc:	ac 01       	movw	r20, r24
    34de:	c5 01       	movw	r24, r10
    34e0:	b4 01       	movw	r22, r8
    34e2:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    34e6:	29 a5       	ldd	r18, Y+41	; 0x29
    34e8:	3a a5       	ldd	r19, Y+42	; 0x2a
    34ea:	4b a5       	ldd	r20, Y+43	; 0x2b
    34ec:	5c a5       	ldd	r21, Y+44	; 0x2c
    34ee:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    34f2:	2b 01       	movw	r4, r22
    34f4:	3c 01       	movw	r6, r24
      three = one * cl[m] + two * sl[m];
    34f6:	03 2d       	mov	r16, r3
    34f8:	10 e0       	ldi	r17, 0x00	; 0
    34fa:	c8 01       	movw	r24, r16
    34fc:	88 0f       	add	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	fc 01       	movw	r30, r24
    3506:	e3 5b       	subi	r30, 0xB3	; 179
    3508:	fd 4f       	sbci	r31, 0xFD	; 253
    350a:	20 81       	ld	r18, Z
    350c:	31 81       	ldd	r19, Z+1	; 0x01
    350e:	42 81       	ldd	r20, Z+2	; 0x02
    3510:	53 81       	ldd	r21, Z+3	; 0x03
    3512:	29 83       	std	Y+1, r18	; 0x01
    3514:	3a 83       	std	Y+2, r19	; 0x02
    3516:	4b 83       	std	Y+3, r20	; 0x03
    3518:	5c 83       	std	Y+4, r21	; 0x04
    351a:	9c 01       	movw	r18, r24
    351c:	2f 5e       	subi	r18, 0xEF	; 239
    351e:	3d 4f       	sbci	r19, 0xFD	; 253
    3520:	d9 01       	movw	r26, r18
    3522:	8d 91       	ld	r24, X+
    3524:	9d 91       	ld	r25, X+
    3526:	0d 90       	ld	r0, X+
    3528:	bc 91       	ld	r27, X
    352a:	a0 2d       	mov	r26, r0
    352c:	89 87       	std	Y+9, r24	; 0x09
    352e:	9a 87       	std	Y+10, r25	; 0x0a
    3530:	ab 87       	std	Y+11, r26	; 0x0b
    3532:	bc 87       	std	Y+12, r27	; 0x0c
    3534:	a7 01       	movw	r20, r14
    3536:	96 01       	movw	r18, r12
    3538:	69 81       	ldd	r22, Y+1	; 0x01
    353a:	7a 81       	ldd	r23, Y+2	; 0x02
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	9c 81       	ldd	r25, Y+4	; 0x04
    3540:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3544:	4b 01       	movw	r8, r22
    3546:	5c 01       	movw	r10, r24
    3548:	a3 01       	movw	r20, r6
    354a:	92 01       	movw	r18, r4
    354c:	69 85       	ldd	r22, Y+9	; 0x09
    354e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3550:	8b 85       	ldd	r24, Y+11	; 0x0b
    3552:	9c 85       	ldd	r25, Y+12	; 0x0c
    3554:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3558:	9b 01       	movw	r18, r22
    355a:	ac 01       	movw	r20, r24
    355c:	c5 01       	movw	r24, r10
    355e:	b4 01       	movw	r22, r8
    3560:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3564:	4b 01       	movw	r8, r22
    3566:	5c 01       	movw	r10, r24
      x += three * q[k];
    3568:	82 2d       	mov	r24, r2
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	fc 01       	movw	r30, r24
    356e:	ee 0f       	add	r30, r30
    3570:	ff 1f       	adc	r31, r31
    3572:	ee 0f       	add	r30, r30
    3574:	ff 1f       	adc	r31, r31
    3576:	fe 87       	std	Y+14, r31	; 0x0e
    3578:	ed 87       	std	Y+13, r30	; 0x0d
    357a:	9f 01       	movw	r18, r30
    357c:	27 57       	subi	r18, 0x77	; 119
    357e:	3d 4f       	sbci	r19, 0xFD	; 253
    3580:	d9 01       	movw	r26, r18
    3582:	8d 91       	ld	r24, X+
    3584:	9d 91       	ld	r25, X+
    3586:	0d 90       	ld	r0, X+
    3588:	bc 91       	ld	r27, X
    358a:	a0 2d       	mov	r26, r0
    358c:	8d 8b       	std	Y+21, r24	; 0x15
    358e:	9e 8b       	std	Y+22, r25	; 0x16
    3590:	af 8b       	std	Y+23, r26	; 0x17
    3592:	b8 8f       	std	Y+24, r27	; 0x18
    3594:	a5 01       	movw	r20, r10
    3596:	94 01       	movw	r18, r8
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    35a0:	9b 01       	movw	r18, r22
    35a2:	ac 01       	movw	r20, r24
    35a4:	69 a1       	ldd	r22, Y+33	; 0x21
    35a6:	7a a1       	ldd	r23, Y+34	; 0x22
    35a8:	8b a1       	ldd	r24, Y+35	; 0x23
    35aa:	9c a1       	ldd	r25, Y+36	; 0x24
    35ac:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    35b0:	69 a3       	std	Y+33, r22	; 0x21
    35b2:	7a a3       	std	Y+34, r23	; 0x22
    35b4:	8b a3       	std	Y+35, r24	; 0x23
    35b6:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    35b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    35ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    35bc:	2f 5a       	subi	r18, 0xAF	; 175
    35be:	3c 4f       	sbci	r19, 0xFC	; 252
    35c0:	d9 01       	movw	r26, r18
    35c2:	8d 91       	ld	r24, X+
    35c4:	9d 91       	ld	r25, X+
    35c6:	0d 90       	ld	r0, X+
    35c8:	bc 91       	ld	r27, X
    35ca:	a0 2d       	mov	r26, r0
    35cc:	8d 87       	std	Y+13, r24	; 0x0d
    35ce:	9e 87       	std	Y+14, r25	; 0x0e
    35d0:	af 87       	std	Y+15, r26	; 0x0f
    35d2:	b8 8b       	std	Y+16, r27	; 0x10
    35d4:	a5 01       	movw	r20, r10
    35d6:	94 01       	movw	r18, r8
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    35e0:	9b 01       	movw	r18, r22
    35e2:	ac 01       	movw	r20, r24
    35e4:	6d a1       	ldd	r22, Y+37	; 0x25
    35e6:	7e a1       	ldd	r23, Y+38	; 0x26
    35e8:	8f a1       	ldd	r24, Y+39	; 0x27
    35ea:	98 a5       	ldd	r25, Y+40	; 0x28
    35ec:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    35f0:	6d a3       	std	Y+37, r22	; 0x25
    35f2:	7e a3       	std	Y+38, r23	; 0x26
    35f4:	8f a3       	std	Y+39, r24	; 0x27
    35f6:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	a9 01       	movw	r20, r18
    35fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3606:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    360a:	18 16       	cp	r1, r24
    360c:	0c f0       	brlt	.+2      	; 0x3610 <igrf+0xb4a>
    360e:	57 c0       	rjmp	.+174    	; 0x36be <igrf+0xbf8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    3610:	29 85       	ldd	r18, Y+9	; 0x09
    3612:	3a 85       	ldd	r19, Y+10	; 0x0a
    3614:	4b 85       	ldd	r20, Y+11	; 0x0b
    3616:	5c 85       	ldd	r21, Y+12	; 0x0c
    3618:	c7 01       	movw	r24, r14
    361a:	b6 01       	movw	r22, r12
    361c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3620:	6b 01       	movw	r12, r22
    3622:	7c 01       	movw	r14, r24
    3624:	29 81       	ldd	r18, Y+1	; 0x01
    3626:	3a 81       	ldd	r19, Y+2	; 0x02
    3628:	4b 81       	ldd	r20, Y+3	; 0x03
    362a:	5c 81       	ldd	r21, Y+4	; 0x04
    362c:	c3 01       	movw	r24, r6
    362e:	b2 01       	movw	r22, r4
    3630:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3634:	9b 01       	movw	r18, r22
    3636:	ac 01       	movw	r20, r24
    3638:	c7 01       	movw	r24, r14
    363a:	b6 01       	movw	r22, r12
    363c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3640:	6b 01       	movw	r12, r22
    3642:	7c 01       	movw	r14, r24
    3644:	b8 01       	movw	r22, r16
    3646:	88 27       	eor	r24, r24
    3648:	77 fd       	sbrc	r23, 7
    364a:	80 95       	com	r24
    364c:	98 2f       	mov	r25, r24
    364e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    3652:	9b 01       	movw	r18, r22
    3654:	ac 01       	movw	r20, r24
    3656:	c7 01       	movw	r24, r14
    3658:	b6 01       	movw	r22, r12
    365a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    365e:	9b 01       	movw	r18, r22
    3660:	ac 01       	movw	r20, r24
    3662:	6d 85       	ldd	r22, Y+13	; 0x0d
    3664:	7e 85       	ldd	r23, Y+14	; 0x0e
    3666:	8f 85       	ldd	r24, Y+15	; 0x0f
    3668:	98 89       	ldd	r25, Y+16	; 0x10
    366a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    366e:	6b 01       	movw	r12, r22
    3670:	7c 01       	movw	r14, r24
    3672:	bd a5       	ldd	r27, Y+45	; 0x2d
    3674:	6b 2f       	mov	r22, r27
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	40 e8       	ldi	r20, 0x80	; 128
    3686:	5f e3       	ldi	r21, 0x3F	; 63
    3688:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    368c:	29 8d       	ldd	r18, Y+25	; 0x19
    368e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3690:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3692:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3694:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3698:	9b 01       	movw	r18, r22
    369a:	ac 01       	movw	r20, r24
    369c:	c7 01       	movw	r24, r14
    369e:	b6 01       	movw	r22, r12
    36a0:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    36a4:	9b 01       	movw	r18, r22
    36a6:	ac 01       	movw	r20, r24
    36a8:	69 ad       	ldd	r22, Y+57	; 0x39
    36aa:	7a ad       	ldd	r23, Y+58	; 0x3a
    36ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    36ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    36b0:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    36b4:	69 af       	std	Y+57, r22	; 0x39
    36b6:	7a af       	std	Y+58, r23	; 0x3a
    36b8:	8b af       	std	Y+59, r24	; 0x3b
    36ba:	9c af       	std	Y+60, r25	; 0x3c
    36bc:	32 c0       	rjmp	.+100    	; 0x3722 <igrf+0xc5c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    36be:	29 85       	ldd	r18, Y+9	; 0x09
    36c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    36c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    36c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    36c6:	c7 01       	movw	r24, r14
    36c8:	b6 01       	movw	r22, r12
    36ca:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    36ce:	6b 01       	movw	r12, r22
    36d0:	7c 01       	movw	r14, r24
    36d2:	29 81       	ldd	r18, Y+1	; 0x01
    36d4:	3a 81       	ldd	r19, Y+2	; 0x02
    36d6:	4b 81       	ldd	r20, Y+3	; 0x03
    36d8:	5c 81       	ldd	r21, Y+4	; 0x04
    36da:	c3 01       	movw	r24, r6
    36dc:	b2 01       	movw	r22, r4
    36de:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    36e2:	9b 01       	movw	r18, r22
    36e4:	ac 01       	movw	r20, r24
    36e6:	c7 01       	movw	r24, r14
    36e8:	b6 01       	movw	r22, r12
    36ea:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    36ee:	9b 01       	movw	r18, r22
    36f0:	ac 01       	movw	r20, r24
    36f2:	6d 89       	ldd	r22, Y+21	; 0x15
    36f4:	7e 89       	ldd	r23, Y+22	; 0x16
    36f6:	8f 89       	ldd	r24, Y+23	; 0x17
    36f8:	98 8d       	ldd	r25, Y+24	; 0x18
    36fa:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    36fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3700:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3702:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3704:	58 a1       	ldd	r21, Y+32	; 0x20
    3706:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    370a:	9b 01       	movw	r18, r22
    370c:	ac 01       	movw	r20, r24
    370e:	69 ad       	ldd	r22, Y+57	; 0x39
    3710:	7a ad       	ldd	r23, Y+58	; 0x3a
    3712:	8b ad       	ldd	r24, Y+59	; 0x3b
    3714:	9c ad       	ldd	r25, Y+60	; 0x3c
    3716:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    371a:	69 af       	std	Y+57, r22	; 0x39
    371c:	7a af       	std	Y+58, r23	; 0x3a
    371e:	8b af       	std	Y+59, r24	; 0x3b
    3720:	9c af       	std	Y+60, r25	; 0x3c
        
      l += 2;
    3722:	e9 89       	ldd	r30, Y+17	; 0x11
    3724:	ee 5f       	subi	r30, 0xFE	; 254
    3726:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    3728:	33 94       	inc	r3
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    372a:	23 94       	inc	r2
    372c:	f8 ad       	ldd	r31, Y+56	; 0x38
    372e:	f2 15       	cp	r31, r2
    3730:	08 f0       	brcs	.+2      	; 0x3734 <igrf+0xc6e>
    3732:	0a cc       	rjmp	.-2028   	; 0x2f48 <igrf+0x482>
    3734:	0c c0       	rjmp	.+24     	; 0x374e <igrf+0xc88>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    3736:	1d a2       	std	Y+37, r1	; 0x25
    3738:	1e a2       	std	Y+38, r1	; 0x26
    373a:	1f a2       	std	Y+39, r1	; 0x27
    373c:	18 a6       	std	Y+40, r1	; 0x28
    373e:	19 ae       	std	Y+57, r1	; 0x39
    3740:	1a ae       	std	Y+58, r1	; 0x3a
    3742:	1b ae       	std	Y+59, r1	; 0x3b
    3744:	1c ae       	std	Y+60, r1	; 0x3c
    3746:	19 a2       	std	Y+33, r1	; 0x21
    3748:	1a a2       	std	Y+34, r1	; 0x22
    374a:	1b a2       	std	Y+35, r1	; 0x23
    374c:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    374e:	25 96       	adiw	r28, 0x05	; 5
    3750:	2c ad       	ldd	r18, Y+60	; 0x3c
    3752:	3d ad       	ldd	r19, Y+61	; 0x3d
    3754:	4e ad       	ldd	r20, Y+62	; 0x3e
    3756:	5f ad       	ldd	r21, Y+63	; 0x3f
    3758:	25 97       	sbiw	r28, 0x05	; 5
    375a:	6d a1       	ldd	r22, Y+37	; 0x25
    375c:	7e a1       	ldd	r23, Y+38	; 0x26
    375e:	8f a1       	ldd	r24, Y+39	; 0x27
    3760:	98 a5       	ldd	r25, Y+40	; 0x28
    3762:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3766:	6b 01       	movw	r12, r22
    3768:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    376a:	25 96       	adiw	r28, 0x05	; 5
    376c:	2c ad       	ldd	r18, Y+60	; 0x3c
    376e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3770:	4e ad       	ldd	r20, Y+62	; 0x3e
    3772:	5f ad       	ldd	r21, Y+63	; 0x3f
    3774:	25 97       	sbiw	r28, 0x05	; 5
    3776:	69 a1       	ldd	r22, Y+33	; 0x21
    3778:	7a a1       	ldd	r23, Y+34	; 0x22
    377a:	8b a1       	ldd	r24, Y+35	; 0x23
    377c:	9c a1       	ldd	r25, Y+36	; 0x24
    377e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3782:	4b 01       	movw	r8, r22
    3784:	5c 01       	movw	r10, r24
    3786:	29 96       	adiw	r28, 0x09	; 9
    3788:	2c ad       	ldd	r18, Y+60	; 0x3c
    378a:	3d ad       	ldd	r19, Y+61	; 0x3d
    378c:	4e ad       	ldd	r20, Y+62	; 0x3e
    378e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3790:	29 97       	sbiw	r28, 0x09	; 9
    3792:	6d a1       	ldd	r22, Y+37	; 0x25
    3794:	7e a1       	ldd	r23, Y+38	; 0x26
    3796:	8f a1       	ldd	r24, Y+39	; 0x27
    3798:	98 a5       	ldd	r25, Y+40	; 0x28
    379a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    379e:	9b 01       	movw	r18, r22
    37a0:	ac 01       	movw	r20, r24
    37a2:	c5 01       	movw	r24, r10
    37a4:	b4 01       	movw	r22, r8
    37a6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    37aa:	2b 96       	adiw	r28, 0x0b	; 11
    37ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    37ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    37b0:	2b 97       	sbiw	r28, 0x0b	; 11
    37b2:	6d 93       	st	X+, r22
    37b4:	7d 93       	st	X+, r23
    37b6:	8d 93       	st	X+, r24
    37b8:	9c 93       	st	X, r25
    37ba:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    37bc:	29 ad       	ldd	r18, Y+57	; 0x39
    37be:	3a ad       	ldd	r19, Y+58	; 0x3a
    37c0:	4b ad       	ldd	r20, Y+59	; 0x3b
    37c2:	5c ad       	ldd	r21, Y+60	; 0x3c
    37c4:	14 96       	adiw	r26, 0x04	; 4
    37c6:	2d 93       	st	X+, r18
    37c8:	3d 93       	st	X+, r19
    37ca:	4d 93       	st	X+, r20
    37cc:	5c 93       	st	X, r21
    37ce:	17 97       	sbiw	r26, 0x07	; 7
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    37d0:	29 96       	adiw	r28, 0x09	; 9
    37d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    37d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    37d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    37d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    37da:	29 97       	sbiw	r28, 0x09	; 9
    37dc:	69 a1       	ldd	r22, Y+33	; 0x21
    37de:	7a a1       	ldd	r23, Y+34	; 0x22
    37e0:	8b a1       	ldd	r24, Y+35	; 0x23
    37e2:	9c a1       	ldd	r25, Y+36	; 0x24
    37e4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    37e8:	9b 01       	movw	r18, r22
    37ea:	ac 01       	movw	r20, r24
    37ec:	c7 01       	movw	r24, r14
    37ee:	b6 01       	movw	r22, r12
    37f0:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    37f4:	2b 96       	adiw	r28, 0x0b	; 11
    37f6:	ee ad       	ldd	r30, Y+62	; 0x3e
    37f8:	ff ad       	ldd	r31, Y+63	; 0x3f
    37fa:	2b 97       	sbiw	r28, 0x0b	; 11
    37fc:	60 87       	std	Z+8, r22	; 0x08
    37fe:	71 87       	std	Z+9, r23	; 0x09
    3800:	82 87       	std	Z+10, r24	; 0x0a
    3802:	93 87       	std	Z+11, r25	; 0x0b
     
}
    3804:	c4 5b       	subi	r28, 0xB4	; 180
    3806:	df 4f       	sbci	r29, 0xFF	; 255
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
    381a:	ff 90       	pop	r15
    381c:	ef 90       	pop	r14
    381e:	df 90       	pop	r13
    3820:	cf 90       	pop	r12
    3822:	bf 90       	pop	r11
    3824:	af 90       	pop	r10
    3826:	9f 90       	pop	r9
    3828:	8f 90       	pop	r8
    382a:	7f 90       	pop	r7
    382c:	6f 90       	pop	r6
    382e:	5f 90       	pop	r5
    3830:	4f 90       	pop	r4
    3832:	3f 90       	pop	r3
    3834:	2f 90       	pop	r2
    3836:	08 95       	ret

00003838 <init_UART_MM>:
uint8_t receive_MM(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSR1A & _BV(RXC1)));
  return UDR1; 
}
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	cb e9       	ldi	r28, 0x9B	; 155
    383e:	d0 e0       	ldi	r29, 0x00	; 0
    3840:	18 82       	st	Y, r1
    3842:	aa e9       	ldi	r26, 0x9A	; 154
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	1c 92       	st	X, r1
    3848:	ed e9       	ldi	r30, 0x9D	; 157
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	10 82       	st	Z, r1
    384e:	88 81       	ld	r24, Y
    3850:	82 60       	ori	r24, 0x02	; 2
    3852:	88 83       	st	Y, r24
    3854:	8c 91       	ld	r24, X
    3856:	88 69       	ori	r24, 0x98	; 152
    3858:	8c 93       	st	X, r24
    385a:	80 81       	ld	r24, Z
    385c:	8e 60       	ori	r24, 0x0E	; 14
    385e:	80 83       	st	Z, r24
    3860:	87 e6       	ldi	r24, 0x67	; 103
    3862:	80 93 99 00 	sts	0x0099, r24
    3866:	10 92 98 00 	sts	0x0098, r1
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	08 95       	ret

00003870 <__vector_30>:
    3870:	1f 92       	push	r1
    3872:	0f 92       	push	r0
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	0f 92       	push	r0
    3878:	11 24       	eor	r1, r1
    387a:	0b b6       	in	r0, 0x3b	; 59
    387c:	0f 92       	push	r0
    387e:	2f 93       	push	r18
    3880:	3f 93       	push	r19
    3882:	4f 93       	push	r20
    3884:	5f 93       	push	r21
    3886:	6f 93       	push	r22
    3888:	7f 93       	push	r23
    388a:	8f 93       	push	r24
    388c:	9f 93       	push	r25
    388e:	af 93       	push	r26
    3890:	bf 93       	push	r27
    3892:	ef 93       	push	r30
    3894:	ff 93       	push	r31
    3896:	80 91 1f 04 	lds	r24, 0x041F
    389a:	90 91 9c 00 	lds	r25, 0x009C
    389e:	e8 2f       	mov	r30, r24
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	e4 55       	subi	r30, 0x54	; 84
    38a4:	fb 4f       	sbci	r31, 0xFB	; 251
    38a6:	90 83       	st	Z, r25
    38a8:	8f 5f       	subi	r24, 0xFF	; 255
    38aa:	87 30       	cpi	r24, 0x07	; 7
    38ac:	19 f0       	breq	.+6      	; 0x38b4 <__vector_30+0x44>
    38ae:	80 93 1f 04 	sts	0x041F, r24
    38b2:	a1 c0       	rjmp	.+322    	; 0x39f6 <__vector_30+0x186>
    38b4:	10 92 1f 04 	sts	0x041F, r1
    38b8:	80 91 ac 04 	lds	r24, 0x04AC
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	98 2f       	mov	r25, r24
    38c0:	88 27       	eor	r24, r24
    38c2:	90 93 1e 04 	sts	0x041E, r25
    38c6:	80 93 1d 04 	sts	0x041D, r24
    38ca:	80 91 1d 04 	lds	r24, 0x041D
    38ce:	90 91 1e 04 	lds	r25, 0x041E
    38d2:	88 27       	eor	r24, r24
    38d4:	90 93 1e 04 	sts	0x041E, r25
    38d8:	80 93 1d 04 	sts	0x041D, r24
    38dc:	80 91 1d 04 	lds	r24, 0x041D
    38e0:	90 91 1e 04 	lds	r25, 0x041E
    38e4:	20 91 ad 04 	lds	r18, 0x04AD
    38e8:	82 2b       	or	r24, r18
    38ea:	90 93 1e 04 	sts	0x041E, r25
    38ee:	80 93 1d 04 	sts	0x041D, r24
    38f2:	80 91 ae 04 	lds	r24, 0x04AE
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	98 2f       	mov	r25, r24
    38fa:	88 27       	eor	r24, r24
    38fc:	90 93 1c 04 	sts	0x041C, r25
    3900:	80 93 1b 04 	sts	0x041B, r24
    3904:	80 91 1b 04 	lds	r24, 0x041B
    3908:	90 91 1c 04 	lds	r25, 0x041C
    390c:	88 27       	eor	r24, r24
    390e:	90 93 1c 04 	sts	0x041C, r25
    3912:	80 93 1b 04 	sts	0x041B, r24
    3916:	80 91 1b 04 	lds	r24, 0x041B
    391a:	90 91 1c 04 	lds	r25, 0x041C
    391e:	20 91 af 04 	lds	r18, 0x04AF
    3922:	82 2b       	or	r24, r18
    3924:	90 93 1c 04 	sts	0x041C, r25
    3928:	80 93 1b 04 	sts	0x041B, r24
    392c:	80 91 b0 04 	lds	r24, 0x04B0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	98 2f       	mov	r25, r24
    3934:	88 27       	eor	r24, r24
    3936:	90 93 1a 04 	sts	0x041A, r25
    393a:	80 93 19 04 	sts	0x0419, r24
    393e:	80 91 19 04 	lds	r24, 0x0419
    3942:	90 91 1a 04 	lds	r25, 0x041A
    3946:	88 27       	eor	r24, r24
    3948:	90 93 1a 04 	sts	0x041A, r25
    394c:	80 93 19 04 	sts	0x0419, r24
    3950:	80 91 19 04 	lds	r24, 0x0419
    3954:	90 91 1a 04 	lds	r25, 0x041A
    3958:	20 91 b1 04 	lds	r18, 0x04B1
    395c:	82 2b       	or	r24, r18
    395e:	90 93 1a 04 	sts	0x041A, r25
    3962:	80 93 19 04 	sts	0x0419, r24
    3966:	60 91 1d 04 	lds	r22, 0x041D
    396a:	70 91 1e 04 	lds	r23, 0x041E
    396e:	88 27       	eor	r24, r24
    3970:	77 fd       	sbrc	r23, 7
    3972:	80 95       	com	r24
    3974:	98 2f       	mov	r25, r24
    3976:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e6       	ldi	r19, 0x60	; 96
    397e:	4a e6       	ldi	r20, 0x6A	; 106
    3980:	56 e4       	ldi	r21, 0x46	; 70
    3982:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3986:	60 93 14 05 	sts	0x0514, r22
    398a:	70 93 15 05 	sts	0x0515, r23
    398e:	80 93 16 05 	sts	0x0516, r24
    3992:	90 93 17 05 	sts	0x0517, r25
    3996:	60 91 1b 04 	lds	r22, 0x041B
    399a:	70 91 1c 04 	lds	r23, 0x041C
    399e:	88 27       	eor	r24, r24
    39a0:	77 fd       	sbrc	r23, 7
    39a2:	80 95       	com	r24
    39a4:	98 2f       	mov	r25, r24
    39a6:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e6       	ldi	r19, 0x60	; 96
    39ae:	4a e6       	ldi	r20, 0x6A	; 106
    39b0:	56 e4       	ldi	r21, 0x46	; 70
    39b2:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    39b6:	60 93 18 05 	sts	0x0518, r22
    39ba:	70 93 19 05 	sts	0x0519, r23
    39be:	80 93 1a 05 	sts	0x051A, r24
    39c2:	90 93 1b 05 	sts	0x051B, r25
    39c6:	60 91 19 04 	lds	r22, 0x0419
    39ca:	70 91 1a 04 	lds	r23, 0x041A
    39ce:	88 27       	eor	r24, r24
    39d0:	77 fd       	sbrc	r23, 7
    39d2:	80 95       	com	r24
    39d4:	98 2f       	mov	r25, r24
    39d6:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e6       	ldi	r19, 0x60	; 96
    39de:	4a e6       	ldi	r20, 0x6A	; 106
    39e0:	56 e4       	ldi	r21, 0x46	; 70
    39e2:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    39e6:	60 93 1c 05 	sts	0x051C, r22
    39ea:	70 93 1d 05 	sts	0x051D, r23
    39ee:	80 93 1e 05 	sts	0x051E, r24
    39f2:	90 93 1f 05 	sts	0x051F, r25
    39f6:	ff 91       	pop	r31
    39f8:	ef 91       	pop	r30
    39fa:	bf 91       	pop	r27
    39fc:	af 91       	pop	r26
    39fe:	9f 91       	pop	r25
    3a00:	8f 91       	pop	r24
    3a02:	7f 91       	pop	r23
    3a04:	6f 91       	pop	r22
    3a06:	5f 91       	pop	r21
    3a08:	4f 91       	pop	r20
    3a0a:	3f 91       	pop	r19
    3a0c:	2f 91       	pop	r18
    3a0e:	0f 90       	pop	r0
    3a10:	0b be       	out	0x3b, r0	; 59
    3a12:	0f 90       	pop	r0
    3a14:	0f be       	out	0x3f, r0	; 63
    3a16:	0f 90       	pop	r0
    3a18:	1f 90       	pop	r1
    3a1a:	18 95       	reti

00003a1c <send_MM_cmd>:

void send_MM_cmd(char *data)
{
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
  ///Send the char array till stop
  while((*data) != '\0')
    3a20:	fc 01       	movw	r30, r24
    3a22:	20 81       	ld	r18, Z
    3a24:	22 23       	and	r18, r18
    3a26:	69 f0       	breq	.+26     	; 0x3a42 <send_MM_cmd+0x26>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	11 96       	adiw	r26, 0x01	; 1
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    3a2c:	eb e9       	ldi	r30, 0x9B	; 155
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    ///* Start transmission
    UDR1 = *data;
    3a30:	cc e9       	ldi	r28, 0x9C	; 156
    3a32:	d0 e0       	ldi	r29, 0x00	; 0
{
  ///Send the char array till stop
  while((*data) != '\0')
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    3a34:	80 81       	ld	r24, Z
    3a36:	85 ff       	sbrs	r24, 5
    3a38:	fd cf       	rjmp	.-6      	; 0x3a34 <send_MM_cmd+0x18>
    ///* Start transmission
    UDR1 = *data;
    3a3a:	28 83       	st	Y, r18
}

void send_MM_cmd(char *data)
{
  ///Send the char array till stop
  while((*data) != '\0')
    3a3c:	2d 91       	ld	r18, X+
    3a3e:	21 11       	cpse	r18, r1
    3a40:	f9 cf       	rjmp	.-14     	; 0x3a34 <send_MM_cmd+0x18>
    while ( !(UCSR1A & (_BV(UDRE1))) );
    ///* Start transmission
    UDR1 = *data;
    data++;
  }
}
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	08 95       	ret

00003a48 <poll_MM>:
  ///Temporary variables for magnetometer readings
  
  uint8_t tmp;
  
  ///Send the poll command
 send_MM_cmd("*00P\r");
    3a48:	84 e9       	ldi	r24, 0x94	; 148
    3a4a:	91 e0       	ldi	r25, 0x01	; 1
    3a4c:	e7 cf       	rjmp	.-50     	; 0x3a1c <send_MM_cmd>
    3a4e:	08 95       	ret

00003a50 <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	fc 01       	movw	r30, r24
    3a56:	eb 01       	movw	r28, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3a58:	40 81       	ld	r20, Z
    3a5a:	51 81       	ldd	r21, Z+1	; 0x01
    3a5c:	62 81       	ldd	r22, Z+2	; 0x02
    3a5e:	73 81       	ldd	r23, Z+3	; 0x03
    3a60:	48 83       	st	Y, r20
    3a62:	59 83       	std	Y+1, r21	; 0x01
    3a64:	6a 83       	std	Y+2, r22	; 0x02
    3a66:	7b 83       	std	Y+3, r23	; 0x03
    3a68:	44 81       	ldd	r20, Z+4	; 0x04
    3a6a:	55 81       	ldd	r21, Z+5	; 0x05
    3a6c:	66 81       	ldd	r22, Z+6	; 0x06
    3a6e:	77 81       	ldd	r23, Z+7	; 0x07
    3a70:	4c 83       	std	Y+4, r20	; 0x04
    3a72:	5d 83       	std	Y+5, r21	; 0x05
    3a74:	6e 83       	std	Y+6, r22	; 0x06
    3a76:	7f 83       	std	Y+7, r23	; 0x07
    3a78:	80 85       	ldd	r24, Z+8	; 0x08
    3a7a:	91 85       	ldd	r25, Z+9	; 0x09
    3a7c:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a7e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a80:	88 87       	std	Y+8, r24	; 0x08
    3a82:	99 87       	std	Y+9, r25	; 0x09
    3a84:	aa 87       	std	Y+10, r26	; 0x0a
    3a86:	bb 87       	std	Y+11, r27	; 0x0b
}
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	08 95       	ret

00003a8e <copy_quaternion>:

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3a8e:	dc 01       	movw	r26, r24
    3a90:	e6 2f       	mov	r30, r22
    3a92:	f7 2f       	mov	r31, r23
  uint8_t i;
  for(i = 0; i < 4; i++)
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    q_dest[i] = q_src[i];
    3a96:	4d 91       	ld	r20, X+
    3a98:	5d 91       	ld	r21, X+
    3a9a:	6d 91       	ld	r22, X+
    3a9c:	7d 91       	ld	r23, X+
    3a9e:	41 93       	st	Z+, r20
    3aa0:	51 93       	st	Z+, r21
    3aa2:	61 93       	st	Z+, r22
    3aa4:	71 93       	st	Z+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3aa6:	8f 5f       	subi	r24, 0xFF	; 255
    3aa8:	84 30       	cpi	r24, 0x04	; 4
    3aaa:	a9 f7       	brne	.-22     	; 0x3a96 <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3aac:	08 95       	ret

00003aae <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3aae:	4f 92       	push	r4
    3ab0:	5f 92       	push	r5
    3ab2:	6f 92       	push	r6
    3ab4:	7f 92       	push	r7
    3ab6:	8f 92       	push	r8
    3ab8:	9f 92       	push	r9
    3aba:	af 92       	push	r10
    3abc:	bf 92       	push	r11
    3abe:	cf 92       	push	r12
    3ac0:	df 92       	push	r13
    3ac2:	ef 92       	push	r14
    3ac4:	ff 92       	push	r15
    3ac6:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	84 80       	ldd	r8, Z+4	; 0x04
    3ad2:	95 80       	ldd	r9, Z+5	; 0x05
    3ad4:	a6 80       	ldd	r10, Z+6	; 0x06
    3ad6:	b7 80       	ldd	r11, Z+7	; 0x07
    3ad8:	c0 84       	ldd	r12, Z+8	; 0x08
    3ada:	d1 84       	ldd	r13, Z+9	; 0x09
    3adc:	e2 84       	ldd	r14, Z+10	; 0x0a
    3ade:	f3 84       	ldd	r15, Z+11	; 0x0b
    3ae0:	9b 01       	movw	r18, r22
    3ae2:	ac 01       	movw	r20, r24
    3ae4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3ae8:	2b 01       	movw	r4, r22
    3aea:	3c 01       	movw	r6, r24
    3aec:	a5 01       	movw	r20, r10
    3aee:	94 01       	movw	r18, r8
    3af0:	c5 01       	movw	r24, r10
    3af2:	b4 01       	movw	r22, r8
    3af4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3af8:	9b 01       	movw	r18, r22
    3afa:	ac 01       	movw	r20, r24
    3afc:	c3 01       	movw	r24, r6
    3afe:	b2 01       	movw	r22, r4
    3b00:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3b04:	4b 01       	movw	r8, r22
    3b06:	5c 01       	movw	r10, r24
    3b08:	a7 01       	movw	r20, r14
    3b0a:	96 01       	movw	r18, r12
    3b0c:	c7 01       	movw	r24, r14
    3b0e:	b6 01       	movw	r22, r12
    3b10:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3b14:	9b 01       	movw	r18, r22
    3b16:	ac 01       	movw	r20, r24
    3b18:	c5 01       	movw	r24, r10
    3b1a:	b4 01       	movw	r22, r8
    3b1c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3b20:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
}
    3b24:	ff 90       	pop	r15
    3b26:	ef 90       	pop	r14
    3b28:	df 90       	pop	r13
    3b2a:	cf 90       	pop	r12
    3b2c:	bf 90       	pop	r11
    3b2e:	af 90       	pop	r10
    3b30:	9f 90       	pop	r9
    3b32:	8f 90       	pop	r8
    3b34:	7f 90       	pop	r7
    3b36:	6f 90       	pop	r6
    3b38:	5f 90       	pop	r5
    3b3a:	4f 90       	pop	r4
    3b3c:	08 95       	ret

00003b3e <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    3b3e:	4f 92       	push	r4
    3b40:	5f 92       	push	r5
    3b42:	6f 92       	push	r6
    3b44:	7f 92       	push	r7
    3b46:	8f 92       	push	r8
    3b48:	9f 92       	push	r9
    3b4a:	af 92       	push	r10
    3b4c:	bf 92       	push	r11
    3b4e:	cf 92       	push	r12
    3b50:	df 92       	push	r13
    3b52:	ef 92       	push	r14
    3b54:	ff 92       	push	r15
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	00 d0       	rcall	.+0      	; 0x3b5c <quaternion_norm+0x1e>
    3b5c:	00 d0       	rcall	.+0      	; 0x3b5e <quaternion_norm+0x20>
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
    3b62:	fc 01       	movw	r30, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3b64:	60 81       	ld	r22, Z
    3b66:	71 81       	ldd	r23, Z+1	; 0x01
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
    3b6a:	93 81       	ldd	r25, Z+3	; 0x03
    3b6c:	84 80       	ldd	r8, Z+4	; 0x04
    3b6e:	95 80       	ldd	r9, Z+5	; 0x05
    3b70:	a6 80       	ldd	r10, Z+6	; 0x06
    3b72:	b7 80       	ldd	r11, Z+7	; 0x07
    3b74:	c0 84       	ldd	r12, Z+8	; 0x08
    3b76:	d1 84       	ldd	r13, Z+9	; 0x09
    3b78:	e2 84       	ldd	r14, Z+10	; 0x0a
    3b7a:	f3 84       	ldd	r15, Z+11	; 0x0b
    3b7c:	44 84       	ldd	r4, Z+12	; 0x0c
    3b7e:	55 84       	ldd	r5, Z+13	; 0x0d
    3b80:	66 84       	ldd	r6, Z+14	; 0x0e
    3b82:	77 84       	ldd	r7, Z+15	; 0x0f
    3b84:	9b 01       	movw	r18, r22
    3b86:	ac 01       	movw	r20, r24
    3b88:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3b8c:	69 83       	std	Y+1, r22	; 0x01
    3b8e:	7a 83       	std	Y+2, r23	; 0x02
    3b90:	8b 83       	std	Y+3, r24	; 0x03
    3b92:	9c 83       	std	Y+4, r25	; 0x04
    3b94:	a5 01       	movw	r20, r10
    3b96:	94 01       	movw	r18, r8
    3b98:	c5 01       	movw	r24, r10
    3b9a:	b4 01       	movw	r22, r8
    3b9c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3ba0:	9b 01       	movw	r18, r22
    3ba2:	ac 01       	movw	r20, r24
    3ba4:	69 81       	ldd	r22, Y+1	; 0x01
    3ba6:	7a 81       	ldd	r23, Y+2	; 0x02
    3ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    3baa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bac:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3bb0:	4b 01       	movw	r8, r22
    3bb2:	5c 01       	movw	r10, r24
    3bb4:	a7 01       	movw	r20, r14
    3bb6:	96 01       	movw	r18, r12
    3bb8:	c7 01       	movw	r24, r14
    3bba:	b6 01       	movw	r22, r12
    3bbc:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3bc0:	9b 01       	movw	r18, r22
    3bc2:	ac 01       	movw	r20, r24
    3bc4:	c5 01       	movw	r24, r10
    3bc6:	b4 01       	movw	r22, r8
    3bc8:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3bcc:	6b 01       	movw	r12, r22
    3bce:	7c 01       	movw	r14, r24
    3bd0:	a3 01       	movw	r20, r6
    3bd2:	92 01       	movw	r18, r4
    3bd4:	c3 01       	movw	r24, r6
    3bd6:	b2 01       	movw	r22, r4
    3bd8:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3bdc:	9b 01       	movw	r18, r22
    3bde:	ac 01       	movw	r20, r24
    3be0:	c7 01       	movw	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3be8:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
}
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	df 90       	pop	r13
    3bfe:	cf 90       	pop	r12
    3c00:	bf 90       	pop	r11
    3c02:	af 90       	pop	r10
    3c04:	9f 90       	pop	r9
    3c06:	8f 90       	pop	r8
    3c08:	7f 90       	pop	r7
    3c0a:	6f 90       	pop	r6
    3c0c:	5f 90       	pop	r5
    3c0e:	4f 90       	pop	r4
    3c10:	08 95       	ret

00003c12 <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    3c12:	cf 92       	push	r12
    3c14:	df 92       	push	r13
    3c16:	ef 92       	push	r14
    3c18:	ff 92       	push	r15
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	ec 01       	movw	r28, r24
    3c24:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3c26:	fb 01       	movw	r30, r22
    3c28:	20 81       	ld	r18, Z
    3c2a:	31 81       	ldd	r19, Z+1	; 0x01
    3c2c:	42 81       	ldd	r20, Z+2	; 0x02
    3c2e:	53 81       	ldd	r21, Z+3	; 0x03
    3c30:	68 81       	ld	r22, Y
    3c32:	79 81       	ldd	r23, Y+1	; 0x01
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3c3c:	6b 01       	movw	r12, r22
    3c3e:	7c 01       	movw	r14, r24
    3c40:	f8 01       	movw	r30, r16
    3c42:	24 81       	ldd	r18, Z+4	; 0x04
    3c44:	35 81       	ldd	r19, Z+5	; 0x05
    3c46:	46 81       	ldd	r20, Z+6	; 0x06
    3c48:	57 81       	ldd	r21, Z+7	; 0x07
    3c4a:	6c 81       	ldd	r22, Y+4	; 0x04
    3c4c:	7d 81       	ldd	r23, Y+5	; 0x05
    3c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c50:	9f 81       	ldd	r25, Y+7	; 0x07
    3c52:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3c56:	9b 01       	movw	r18, r22
    3c58:	ac 01       	movw	r20, r24
    3c5a:	c7 01       	movw	r24, r14
    3c5c:	b6 01       	movw	r22, r12
    3c5e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3c62:	6b 01       	movw	r12, r22
    3c64:	7c 01       	movw	r14, r24
    3c66:	f8 01       	movw	r30, r16
    3c68:	20 85       	ldd	r18, Z+8	; 0x08
    3c6a:	31 85       	ldd	r19, Z+9	; 0x09
    3c6c:	42 85       	ldd	r20, Z+10	; 0x0a
    3c6e:	53 85       	ldd	r21, Z+11	; 0x0b
    3c70:	68 85       	ldd	r22, Y+8	; 0x08
    3c72:	79 85       	ldd	r23, Y+9	; 0x09
    3c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c76:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c78:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3c7c:	9b 01       	movw	r18, r22
    3c7e:	ac 01       	movw	r20, r24
    3c80:	c7 01       	movw	r24, r14
    3c82:	b6 01       	movw	r22, r12
    3c84:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
}
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	df 90       	pop	r13
    3c96:	cf 90       	pop	r12
    3c98:	08 95       	ret

00003c9a <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3c9a:	df 92       	push	r13
    3c9c:	ef 92       	push	r14
    3c9e:	ff 92       	push	r15
    3ca0:	0f 93       	push	r16
    3ca2:	1f 93       	push	r17
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	7c 01       	movw	r14, r24
    3caa:	06 2f       	mov	r16, r22
    3cac:	17 2f       	mov	r17, r23
    3cae:	c4 2f       	mov	r28, r20
    3cb0:	d5 2f       	mov	r29, r21
  uint8_t i;
  for(i = 0; i < 3; i++)
    3cb2:	d1 2c       	mov	r13, r1
    v_res[i] = v_a[i] + v_b[i];
    3cb4:	f7 01       	movw	r30, r14
    3cb6:	61 91       	ld	r22, Z+
    3cb8:	71 91       	ld	r23, Z+
    3cba:	81 91       	ld	r24, Z+
    3cbc:	91 91       	ld	r25, Z+
    3cbe:	7f 01       	movw	r14, r30
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	21 91       	ld	r18, Z+
    3cc4:	31 91       	ld	r19, Z+
    3cc6:	41 91       	ld	r20, Z+
    3cc8:	51 91       	ld	r21, Z+
    3cca:	8f 01       	movw	r16, r30
    3ccc:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3cd0:	69 93       	st	Y+, r22
    3cd2:	79 93       	st	Y+, r23
    3cd4:	89 93       	st	Y+, r24
    3cd6:	99 93       	st	Y+, r25
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3cd8:	d3 94       	inc	r13
    3cda:	f3 e0       	ldi	r31, 0x03	; 3
    3cdc:	df 12       	cpse	r13, r31
    3cde:	ea cf       	rjmp	.-44     	; 0x3cb4 <add_vectors+0x1a>
    v_res[i] = v_a[i] + v_b[i];
}
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	08 95       	ret

00003cf0 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3cf0:	4f 92       	push	r4
    3cf2:	5f 92       	push	r5
    3cf4:	6f 92       	push	r6
    3cf6:	7f 92       	push	r7
    3cf8:	8f 92       	push	r8
    3cfa:	9f 92       	push	r9
    3cfc:	af 92       	push	r10
    3cfe:	bf 92       	push	r11
    3d00:	cf 92       	push	r12
    3d02:	df 92       	push	r13
    3d04:	ef 92       	push	r14
    3d06:	ff 92       	push	r15
    3d08:	0f 93       	push	r16
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	4b 01       	movw	r8, r22
    3d12:	5a 01       	movw	r10, r20
    3d14:	c1 2c       	mov	r12, r1
    3d16:	d1 2c       	mov	r13, r1
    3d18:	48 2e       	mov	r4, r24
    3d1a:	59 2e       	mov	r5, r25
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3d1c:	61 2c       	mov	r6, r1
    3d1e:	75 01       	movw	r14, r10
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3d20:	f5 01       	movw	r30, r10
    3d22:	10 82       	st	Z, r1
    3d24:	11 82       	std	Z+1, r1	; 0x01
    3d26:	12 82       	std	Z+2, r1	; 0x02
    3d28:	13 82       	std	Z+3, r1	; 0x03
    3d2a:	04 2d       	mov	r16, r4
    3d2c:	15 2d       	mov	r17, r5
    3d2e:	e4 01       	movw	r28, r8
    3d30:	cc 0d       	add	r28, r12
    3d32:	dd 1d       	adc	r29, r13
    for(j = 0; j < 3; j++)
    3d34:	76 2c       	mov	r7, r6
      v_res[i] += v[j] * m[j][i];
    3d36:	f8 01       	movw	r30, r16
    3d38:	61 91       	ld	r22, Z+
    3d3a:	71 91       	ld	r23, Z+
    3d3c:	81 91       	ld	r24, Z+
    3d3e:	91 91       	ld	r25, Z+
    3d40:	8f 01       	movw	r16, r30
    3d42:	28 81       	ld	r18, Y
    3d44:	39 81       	ldd	r19, Y+1	; 0x01
    3d46:	4a 81       	ldd	r20, Y+2	; 0x02
    3d48:	5b 81       	ldd	r21, Y+3	; 0x03
    3d4a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3d4e:	9b 01       	movw	r18, r22
    3d50:	ac 01       	movw	r20, r24
    3d52:	f7 01       	movw	r30, r14
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	82 81       	ldd	r24, Z+2	; 0x02
    3d5a:	93 81       	ldd	r25, Z+3	; 0x03
    3d5c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    3d60:	f7 01       	movw	r30, r14
    3d62:	60 83       	st	Z, r22
    3d64:	71 83       	std	Z+1, r23	; 0x01
    3d66:	82 83       	std	Z+2, r24	; 0x02
    3d68:	93 83       	std	Z+3, r25	; 0x03
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3d6a:	73 94       	inc	r7
    3d6c:	2c 96       	adiw	r28, 0x0c	; 12
    3d6e:	f3 e0       	ldi	r31, 0x03	; 3
    3d70:	7f 12       	cpse	r7, r31
    3d72:	e1 cf       	rjmp	.-62     	; 0x3d36 <vector_into_matrix+0x46>
    3d74:	84 e0       	ldi	r24, 0x04	; 4
    3d76:	a8 0e       	add	r10, r24
    3d78:	b1 1c       	adc	r11, r1
    3d7a:	e4 e0       	ldi	r30, 0x04	; 4
    3d7c:	ce 0e       	add	r12, r30
    3d7e:	d1 1c       	adc	r13, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3d80:	fc e0       	ldi	r31, 0x0C	; 12
    3d82:	cf 16       	cp	r12, r31
    3d84:	d1 04       	cpc	r13, r1
    3d86:	59 f6       	brne	.-106    	; 0x3d1e <vector_into_matrix+0x2e>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	ef 90       	pop	r14
    3d94:	df 90       	pop	r13
    3d96:	cf 90       	pop	r12
    3d98:	bf 90       	pop	r11
    3d9a:	af 90       	pop	r10
    3d9c:	9f 90       	pop	r9
    3d9e:	8f 90       	pop	r8
    3da0:	7f 90       	pop	r7
    3da2:	6f 90       	pop	r6
    3da4:	5f 90       	pop	r5
    3da6:	4f 90       	pop	r4
    3da8:	08 95       	ret

00003daa <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3daa:	af 92       	push	r10
    3dac:	bf 92       	push	r11
    3dae:	cf 92       	push	r12
    3db0:	df 92       	push	r13
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	ec 01       	movw	r28, r24
    3dc0:	8b 01       	movw	r16, r22
    3dc2:	5a 01       	movw	r10, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3dc4:	fb 01       	movw	r30, r22
    3dc6:	20 85       	ldd	r18, Z+8	; 0x08
    3dc8:	31 85       	ldd	r19, Z+9	; 0x09
    3dca:	42 85       	ldd	r20, Z+10	; 0x0a
    3dcc:	53 85       	ldd	r21, Z+11	; 0x0b
    3dce:	6c 81       	ldd	r22, Y+4	; 0x04
    3dd0:	7d 81       	ldd	r23, Y+5	; 0x05
    3dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    3dd6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3dda:	6b 01       	movw	r12, r22
    3ddc:	7c 01       	movw	r14, r24
    3dde:	f8 01       	movw	r30, r16
    3de0:	24 81       	ldd	r18, Z+4	; 0x04
    3de2:	35 81       	ldd	r19, Z+5	; 0x05
    3de4:	46 81       	ldd	r20, Z+6	; 0x06
    3de6:	57 81       	ldd	r21, Z+7	; 0x07
    3de8:	68 85       	ldd	r22, Y+8	; 0x08
    3dea:	79 85       	ldd	r23, Y+9	; 0x09
    3dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dee:	9b 85       	ldd	r25, Y+11	; 0x0b
    3df0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3df4:	9b 01       	movw	r18, r22
    3df6:	ac 01       	movw	r20, r24
    3df8:	c7 01       	movw	r24, r14
    3dfa:	b6 01       	movw	r22, r12
    3dfc:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3e00:	f5 01       	movw	r30, r10
    3e02:	60 83       	st	Z, r22
    3e04:	71 83       	std	Z+1, r23	; 0x01
    3e06:	82 83       	std	Z+2, r24	; 0x02
    3e08:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	20 81       	ld	r18, Z
    3e0e:	31 81       	ldd	r19, Z+1	; 0x01
    3e10:	42 81       	ldd	r20, Z+2	; 0x02
    3e12:	53 81       	ldd	r21, Z+3	; 0x03
    3e14:	68 85       	ldd	r22, Y+8	; 0x08
    3e16:	79 85       	ldd	r23, Y+9	; 0x09
    3e18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e1c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3e20:	6b 01       	movw	r12, r22
    3e22:	7c 01       	movw	r14, r24
    3e24:	f8 01       	movw	r30, r16
    3e26:	20 85       	ldd	r18, Z+8	; 0x08
    3e28:	31 85       	ldd	r19, Z+9	; 0x09
    3e2a:	42 85       	ldd	r20, Z+10	; 0x0a
    3e2c:	53 85       	ldd	r21, Z+11	; 0x0b
    3e2e:	68 81       	ld	r22, Y
    3e30:	79 81       	ldd	r23, Y+1	; 0x01
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	9b 81       	ldd	r25, Y+3	; 0x03
    3e36:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3e3a:	9b 01       	movw	r18, r22
    3e3c:	ac 01       	movw	r20, r24
    3e3e:	c7 01       	movw	r24, r14
    3e40:	b6 01       	movw	r22, r12
    3e42:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3e46:	f5 01       	movw	r30, r10
    3e48:	64 83       	std	Z+4, r22	; 0x04
    3e4a:	75 83       	std	Z+5, r23	; 0x05
    3e4c:	86 83       	std	Z+6, r24	; 0x06
    3e4e:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    3e50:	f8 01       	movw	r30, r16
    3e52:	24 81       	ldd	r18, Z+4	; 0x04
    3e54:	35 81       	ldd	r19, Z+5	; 0x05
    3e56:	46 81       	ldd	r20, Z+6	; 0x06
    3e58:	57 81       	ldd	r21, Z+7	; 0x07
    3e5a:	68 81       	ld	r22, Y
    3e5c:	79 81       	ldd	r23, Y+1	; 0x01
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	9b 81       	ldd	r25, Y+3	; 0x03
    3e62:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3e66:	6b 01       	movw	r12, r22
    3e68:	7c 01       	movw	r14, r24
    3e6a:	f8 01       	movw	r30, r16
    3e6c:	20 81       	ld	r18, Z
    3e6e:	31 81       	ldd	r19, Z+1	; 0x01
    3e70:	42 81       	ldd	r20, Z+2	; 0x02
    3e72:	53 81       	ldd	r21, Z+3	; 0x03
    3e74:	6c 81       	ldd	r22, Y+4	; 0x04
    3e76:	7d 81       	ldd	r23, Y+5	; 0x05
    3e78:	8e 81       	ldd	r24, Y+6	; 0x06
    3e7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3e7c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3e80:	9b 01       	movw	r18, r22
    3e82:	ac 01       	movw	r20, r24
    3e84:	c7 01       	movw	r24, r14
    3e86:	b6 01       	movw	r22, r12
    3e88:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    3e8c:	f5 01       	movw	r30, r10
    3e8e:	60 87       	std	Z+8, r22	; 0x08
    3e90:	71 87       	std	Z+9, r23	; 0x09
    3e92:	82 87       	std	Z+10, r24	; 0x0a
    3e94:	93 87       	std	Z+11, r25	; 0x0b
}
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	0f 91       	pop	r16
    3e9e:	ff 90       	pop	r15
    3ea0:	ef 90       	pop	r14
    3ea2:	df 90       	pop	r13
    3ea4:	cf 90       	pop	r12
    3ea6:	bf 90       	pop	r11
    3ea8:	af 90       	pop	r10
    3eaa:	08 95       	ret

00003eac <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    3eac:	cf 92       	push	r12
    3eae:	df 92       	push	r13
    3eb0:	ef 92       	push	r14
    3eb2:	ff 92       	push	r15
    3eb4:	cf 93       	push	r28
    3eb6:	df 93       	push	r29
    3eb8:	ec 01       	movw	r28, r24
    3eba:	6a 01       	movw	r12, r20
    3ebc:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    3ebe:	9a 01       	movw	r18, r20
    3ec0:	ab 01       	movw	r20, r22
    3ec2:	68 81       	ld	r22, Y
    3ec4:	79 81       	ldd	r23, Y+1	; 0x01
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eca:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3ece:	68 83       	st	Y, r22
    3ed0:	79 83       	std	Y+1, r23	; 0x01
    3ed2:	8a 83       	std	Y+2, r24	; 0x02
    3ed4:	9b 83       	std	Y+3, r25	; 0x03
    3ed6:	a7 01       	movw	r20, r14
    3ed8:	96 01       	movw	r18, r12
    3eda:	6c 81       	ldd	r22, Y+4	; 0x04
    3edc:	7d 81       	ldd	r23, Y+5	; 0x05
    3ede:	8e 81       	ldd	r24, Y+6	; 0x06
    3ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ee2:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3ee6:	6c 83       	std	Y+4, r22	; 0x04
    3ee8:	7d 83       	std	Y+5, r23	; 0x05
    3eea:	8e 83       	std	Y+6, r24	; 0x06
    3eec:	9f 83       	std	Y+7, r25	; 0x07
    3eee:	a7 01       	movw	r20, r14
    3ef0:	96 01       	movw	r18, r12
    3ef2:	68 85       	ldd	r22, Y+8	; 0x08
    3ef4:	79 85       	ldd	r23, Y+9	; 0x09
    3ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3efa:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3efe:	68 87       	std	Y+8, r22	; 0x08
    3f00:	79 87       	std	Y+9, r23	; 0x09
    3f02:	8a 87       	std	Y+10, r24	; 0x0a
    3f04:	9b 87       	std	Y+11, r25	; 0x0b
}
    3f06:	df 91       	pop	r29
    3f08:	cf 91       	pop	r28
    3f0a:	ff 90       	pop	r15
    3f0c:	ef 90       	pop	r14
    3f0e:	df 90       	pop	r13
    3f10:	cf 90       	pop	r12
    3f12:	08 95       	ret

00003f14 <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    3f14:	cf 92       	push	r12
    3f16:	df 92       	push	r13
    3f18:	ef 92       	push	r14
    3f1a:	ff 92       	push	r15
    3f1c:	1f 93       	push	r17
    3f1e:	cf 93       	push	r28
    3f20:	df 93       	push	r29
    3f22:	6a 01       	movw	r12, r20
    3f24:	7b 01       	movw	r14, r22
    3f26:	ec 01       	movw	r28, r24
  uint8_t i;
  for(i = 0; i < 4; i++)
    3f28:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] * s;
    3f2a:	a7 01       	movw	r20, r14
    3f2c:	96 01       	movw	r18, r12
    3f2e:	68 81       	ld	r22, Y
    3f30:	79 81       	ldd	r23, Y+1	; 0x01
    3f32:	8a 81       	ldd	r24, Y+2	; 0x02
    3f34:	9b 81       	ldd	r25, Y+3	; 0x03
    3f36:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    3f3a:	69 93       	st	Y+, r22
    3f3c:	79 93       	st	Y+, r23
    3f3e:	89 93       	st	Y+, r24
    3f40:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3f42:	1f 5f       	subi	r17, 0xFF	; 255
    3f44:	14 30       	cpi	r17, 0x04	; 4
    3f46:	89 f7       	brne	.-30     	; 0x3f2a <scalar_into_quaternion+0x16>
    q[i] = q[i] * s;
}
    3f48:	df 91       	pop	r29
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	ff 90       	pop	r15
    3f50:	ef 90       	pop	r14
    3f52:	df 90       	pop	r13
    3f54:	cf 90       	pop	r12
    3f56:	08 95       	ret

00003f58 <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    3f58:	cf 92       	push	r12
    3f5a:	df 92       	push	r13
    3f5c:	ef 92       	push	r14
    3f5e:	ff 92       	push	r15
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
    3f64:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    3f66:	a3 dd       	rcall	.-1210   	; 0x3aae <vector_norm>
    3f68:	6b 01       	movw	r12, r22
    3f6a:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    3f6c:	9b 01       	movw	r18, r22
    3f6e:	ac 01       	movw	r20, r24
    3f70:	68 81       	ld	r22, Y
    3f72:	79 81       	ldd	r23, Y+1	; 0x01
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	9b 81       	ldd	r25, Y+3	; 0x03
    3f78:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3f7c:	68 83       	st	Y, r22
    3f7e:	79 83       	std	Y+1, r23	; 0x01
    3f80:	8a 83       	std	Y+2, r24	; 0x02
    3f82:	9b 83       	std	Y+3, r25	; 0x03
    3f84:	a7 01       	movw	r20, r14
    3f86:	96 01       	movw	r18, r12
    3f88:	6c 81       	ldd	r22, Y+4	; 0x04
    3f8a:	7d 81       	ldd	r23, Y+5	; 0x05
    3f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3f90:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3f94:	6c 83       	std	Y+4, r22	; 0x04
    3f96:	7d 83       	std	Y+5, r23	; 0x05
    3f98:	8e 83       	std	Y+6, r24	; 0x06
    3f9a:	9f 83       	std	Y+7, r25	; 0x07
    3f9c:	a7 01       	movw	r20, r14
    3f9e:	96 01       	movw	r18, r12
    3fa0:	68 85       	ldd	r22, Y+8	; 0x08
    3fa2:	79 85       	ldd	r23, Y+9	; 0x09
    3fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fa8:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3fac:	68 87       	std	Y+8, r22	; 0x08
    3fae:	79 87       	std	Y+9, r23	; 0x09
    3fb0:	8a 87       	std	Y+10, r24	; 0x0a
    3fb2:	9b 87       	std	Y+11, r25	; 0x0b
}
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	ff 90       	pop	r15
    3fba:	ef 90       	pop	r14
    3fbc:	df 90       	pop	r13
    3fbe:	cf 90       	pop	r12
    3fc0:	08 95       	ret

00003fc2 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    3fc2:	cf 92       	push	r12
    3fc4:	df 92       	push	r13
    3fc6:	ef 92       	push	r14
    3fc8:	ff 92       	push	r15
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	08 2f       	mov	r16, r24
    3fd4:	19 2f       	mov	r17, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    3fd6:	b3 dd       	rcall	.-1178   	; 0x3b3e <quaternion_norm>
    3fd8:	6b 01       	movw	r12, r22
    3fda:	7c 01       	movw	r14, r24
    3fdc:	c0 2f       	mov	r28, r16
    3fde:	d1 2f       	mov	r29, r17
  
  for(i = 0; i < 4; i++)
    3fe0:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] / norm;
    3fe2:	a7 01       	movw	r20, r14
    3fe4:	96 01       	movw	r18, r12
    3fe6:	68 81       	ld	r22, Y
    3fe8:	79 81       	ldd	r23, Y+1	; 0x01
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	9b 81       	ldd	r25, Y+3	; 0x03
    3fee:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    3ff2:	69 93       	st	Y+, r22
    3ff4:	79 93       	st	Y+, r23
    3ff6:	89 93       	st	Y+, r24
    3ff8:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    3ffa:	1f 5f       	subi	r17, 0xFF	; 255
    3ffc:	14 30       	cpi	r17, 0x04	; 4
    3ffe:	89 f7       	brne	.-30     	; 0x3fe2 <convert_unit_quaternion+0x20>
    q[i] = q[i] / norm;
}
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	ff 90       	pop	r15
    400a:	ef 90       	pop	r14
    400c:	df 90       	pop	r13
    400e:	cf 90       	pop	r12
    4010:	08 95       	ret

00004012 <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    4012:	57 9a       	sbi	0x0a, 7	; 10
    4014:	08 95       	ret

00004016 <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS();// make this poll_ss()
    4016:	0c 94 65 2b 	jmp	0x56ca	; 0x56ca <poll_SS>
    401a:	08 95       	ret

0000401c <read_MM>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM(); //for uart 0
    401c:	15 cd       	rjmp	.-1494   	; 0x3a48 <poll_MM>
    401e:	08 95       	ret

00004020 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    4020:	84 b3       	in	r24, 0x14	; 20
    4022:	88 63       	ori	r24, 0x38	; 56
    4024:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    4026:	82 b1       	in	r24, 0x02	; 2
    4028:	88 63       	ori	r24, 0x38	; 56
    402a:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    402c:	ab e8       	ldi	r26, 0x8B	; 139
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	1c 92       	st	X, r1
  TCCR3B = 0;
    4032:	ea e8       	ldi	r30, 0x8A	; 138
    4034:	f0 e0       	ldi	r31, 0x00	; 0
    4036:	10 82       	st	Z, r1
  TCCR3C = 0;
    4038:	10 92 8c 00 	sts	0x008C, r1
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    403c:	8c 91       	ld	r24, X
    403e:	8a 6a       	ori	r24, 0xAA	; 170
    4040:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    4042:	80 81       	ld	r24, Z
    4044:	81 61       	ori	r24, 0x11	; 17
    4046:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	9f ef       	ldi	r25, 0xFF	; 255
    404c:	90 93 81 00 	sts	0x0081, r25
    4050:	80 93 80 00 	sts	0x0080, r24
  OCR3A = 0x0000;
    4054:	10 92 87 00 	sts	0x0087, r1
    4058:	10 92 86 00 	sts	0x0086, r1
  OCR3B = 0x0000;
    405c:	10 92 85 00 	sts	0x0085, r1
    4060:	10 92 84 00 	sts	0x0084, r1
  OCR3C = 0x0000;
    4064:	10 92 83 00 	sts	0x0083, r1
    4068:	10 92 82 00 	sts	0x0082, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    406c:	85 b3       	in	r24, 0x15	; 21
    406e:	87 7c       	andi	r24, 0xC7	; 199
    4070:	85 bb       	out	0x15, r24	; 21
    4072:	08 95       	ret

00004074 <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4074:	85 b3       	in	r24, 0x15	; 21
    4076:	87 7c       	andi	r24, 0xC7	; 199
    4078:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    407a:	80 91 2d 05 	lds	r24, 0x052D
    407e:	88 23       	and	r24, r24
    4080:	11 f0       	breq	.+4      	; 0x4086 <set_PWM+0x12>
   PORTC |= _BV(PC5);
    4082:	ad 9a       	sbi	0x15, 5	; 21
    4084:	01 c0       	rjmp	.+2      	; 0x4088 <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    4086:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    4088:	80 91 2e 05 	lds	r24, 0x052E
    408c:	88 23       	and	r24, r24
    408e:	11 f0       	breq	.+4      	; 0x4094 <set_PWM+0x20>
   PORTC |= _BV(PC4);
    4090:	ac 9a       	sbi	0x15, 4	; 21
    4092:	01 c0       	rjmp	.+2      	; 0x4096 <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    4094:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    4096:	80 91 2f 05 	lds	r24, 0x052F
    409a:	88 23       	and	r24, r24
    409c:	11 f0       	breq	.+4      	; 0x40a2 <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    409e:	ab 9a       	sbi	0x15, 3	; 21
    40a0:	01 c0       	rjmp	.+2      	; 0x40a4 <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    40a2:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    40a4:	80 91 27 05 	lds	r24, 0x0527
    40a8:	90 91 28 05 	lds	r25, 0x0528
    40ac:	90 93 87 00 	sts	0x0087, r25
    40b0:	80 93 86 00 	sts	0x0086, r24
  OCR3B = Current_state.pwm.y;
    40b4:	80 91 29 05 	lds	r24, 0x0529
    40b8:	90 91 2a 05 	lds	r25, 0x052A
    40bc:	90 93 85 00 	sts	0x0085, r25
    40c0:	80 93 84 00 	sts	0x0084, r24
  OCR3C = Current_state.pwm.z;
    40c4:	80 91 2b 05 	lds	r24, 0x052B
    40c8:	90 91 2c 05 	lds	r25, 0x052C
    40cc:	90 93 83 00 	sts	0x0083, r25
    40d0:	80 93 82 00 	sts	0x0082, r24
    40d4:	08 95       	ret

000040d6 <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    40d6:	10 92 28 05 	sts	0x0528, r1
    40da:	10 92 27 05 	sts	0x0527, r1
  Current_state.pwm.y = 0;
    40de:	10 92 2a 05 	sts	0x052A, r1
    40e2:	10 92 29 05 	sts	0x0529, r1
  Current_state.pwm.z = 0;
    40e6:	10 92 2c 05 	sts	0x052C, r1
    40ea:	10 92 2b 05 	sts	0x052B, r1
  Current_state.pwm.x_dir = 0;
    40ee:	10 92 2d 05 	sts	0x052D, r1
  Current_state.pwm.y_dir = 0;
    40f2:	10 92 2e 05 	sts	0x052E, r1
  Current_state.pwm.z_dir = 0;
    40f6:	10 92 2f 05 	sts	0x052F, r1
  set_PWM();
    40fa:	bc cf       	rjmp	.-136    	; 0x4074 <set_PWM>
    40fc:	08 95       	ret

000040fe <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    40fe:	ef 92       	push	r14
    4100:	ff 92       	push	r15
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    410a:	10 92 ef 04 	sts	0x04EF, r1
    410e:	10 92 ee 04 	sts	0x04EE, r1
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    4112:	60 91 bf 04 	lds	r22, 0x04BF
    4116:	70 91 c0 04 	lds	r23, 0x04C0
    411a:	80 91 c1 04 	lds	r24, 0x04C1
    411e:	90 91 c2 04 	lds	r25, 0x04C2
    4122:	0f 2e       	mov	r0, r31
    4124:	fc e2       	ldi	r31, 0x2C	; 44
    4126:	ef 2e       	mov	r14, r31
    4128:	f4 e0       	ldi	r31, 0x04	; 4
    412a:	ff 2e       	mov	r15, r31
    412c:	f0 2d       	mov	r31, r0
    412e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	48 ec       	ldi	r20, 0xC8	; 200
    4138:	52 e4       	ldi	r21, 0x42	; 66
    413a:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    413e:	f7 01       	movw	r30, r14
    4140:	60 83       	st	Z, r22
    4142:	71 83       	std	Z+1, r23	; 0x01
    4144:	82 83       	std	Z+2, r24	; 0x02
    4146:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    4148:	60 91 c3 04 	lds	r22, 0x04C3
    414c:	70 91 c4 04 	lds	r23, 0x04C4
    4150:	80 91 c5 04 	lds	r24, 0x04C5
    4154:	90 91 c6 04 	lds	r25, 0x04C6
    4158:	00 e3       	ldi	r16, 0x30	; 48
    415a:	14 e0       	ldi	r17, 0x04	; 4
    415c:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	48 ec       	ldi	r20, 0xC8	; 200
    4166:	52 e4       	ldi	r21, 0x42	; 66
    4168:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    416c:	f8 01       	movw	r30, r16
    416e:	60 83       	st	Z, r22
    4170:	71 83       	std	Z+1, r23	; 0x01
    4172:	82 83       	std	Z+2, r24	; 0x02
    4174:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    4176:	60 91 c7 04 	lds	r22, 0x04C7
    417a:	70 91 c8 04 	lds	r23, 0x04C8
    417e:	80 91 c9 04 	lds	r24, 0x04C9
    4182:	90 91 ca 04 	lds	r25, 0x04CA
    4186:	c4 e3       	ldi	r28, 0x34	; 52
    4188:	d4 e0       	ldi	r29, 0x04	; 4
    418a:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	48 ec       	ldi	r20, 0xC8	; 200
    4194:	52 e4       	ldi	r21, 0x42	; 66
    4196:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    419a:	68 83       	st	Y, r22
    419c:	79 83       	std	Y+1, r23	; 0x01
    419e:	8a 83       	std	Y+2, r24	; 0x02
    41a0:	9b 83       	std	Y+3, r25	; 0x03
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    41a2:	60 91 cb 04 	lds	r22, 0x04CB
    41a6:	70 91 cc 04 	lds	r23, 0x04CC
    41aa:	80 91 cd 04 	lds	r24, 0x04CD
    41ae:	90 91 ce 04 	lds	r25, 0x04CE
    41b2:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	4a e7       	ldi	r20, 0x7A	; 122
    41bc:	54 e4       	ldi	r21, 0x44	; 68
    41be:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    41c2:	60 93 20 04 	sts	0x0420, r22
    41c6:	70 93 21 04 	sts	0x0421, r23
    41ca:	80 93 22 04 	sts	0x0422, r24
    41ce:	90 93 23 04 	sts	0x0423, r25
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    41d2:	60 91 cf 04 	lds	r22, 0x04CF
    41d6:	70 91 d0 04 	lds	r23, 0x04D0
    41da:	80 91 d1 04 	lds	r24, 0x04D1
    41de:	90 91 d2 04 	lds	r25, 0x04D2
    41e2:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	4a e7       	ldi	r20, 0x7A	; 122
    41ec:	54 e4       	ldi	r21, 0x44	; 68
    41ee:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    41f2:	60 93 24 04 	sts	0x0424, r22
    41f6:	70 93 25 04 	sts	0x0425, r23
    41fa:	80 93 26 04 	sts	0x0426, r24
    41fe:	90 93 27 04 	sts	0x0427, r25
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    4202:	60 91 d3 04 	lds	r22, 0x04D3
    4206:	70 91 d4 04 	lds	r23, 0x04D4
    420a:	80 91 d5 04 	lds	r24, 0x04D5
    420e:	90 91 d6 04 	lds	r25, 0x04D6
    4212:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	4a e7       	ldi	r20, 0x7A	; 122
    421c:	54 e4       	ldi	r21, 0x44	; 68
    421e:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4222:	60 93 28 04 	sts	0x0428, r22
    4226:	70 93 29 04 	sts	0x0429, r23
    422a:	80 93 2a 04 	sts	0x042A, r24
    422e:	90 93 2b 04 	sts	0x042B, r25
   
  get_seconds_since_equinox();//check
    4232:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    4236:	f7 01       	movw	r30, r14
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	a2 81       	ldd	r26, Z+2	; 0x02
    423e:	b3 81       	ldd	r27, Z+3	; 0x03
    4240:	80 93 48 04 	sts	0x0448, r24
    4244:	90 93 49 04 	sts	0x0449, r25
    4248:	a0 93 4a 04 	sts	0x044A, r26
    424c:	b0 93 4b 04 	sts	0x044B, r27
  r_ecef_ash[1] = v_r_ecef[1];
    4250:	f8 01       	movw	r30, r16
    4252:	80 81       	ld	r24, Z
    4254:	91 81       	ldd	r25, Z+1	; 0x01
    4256:	a2 81       	ldd	r26, Z+2	; 0x02
    4258:	b3 81       	ldd	r27, Z+3	; 0x03
    425a:	80 93 4c 04 	sts	0x044C, r24
    425e:	90 93 4d 04 	sts	0x044D, r25
    4262:	a0 93 4e 04 	sts	0x044E, r26
    4266:	b0 93 4f 04 	sts	0x044F, r27
  r_ecef_ash[2] = v_r_ecef[2];
    426a:	88 81       	ld	r24, Y
    426c:	99 81       	ldd	r25, Y+1	; 0x01
    426e:	aa 81       	ldd	r26, Y+2	; 0x02
    4270:	bb 81       	ldd	r27, Y+3	; 0x03
    4272:	80 93 50 04 	sts	0x0450, r24
    4276:	90 93 51 04 	sts	0x0451, r25
    427a:	a0 93 52 04 	sts	0x0452, r26
    427e:	b0 93 53 04 	sts	0x0453, r27
  ecef2eci(v_r_ecef, v_r);
    4282:	64 e5       	ldi	r22, 0x54	; 84
    4284:	74 e0       	ldi	r23, 0x04	; 4
    4286:	c7 01       	movw	r24, r14
    4288:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    428c:	6c e3       	ldi	r22, 0x3C	; 60
    428e:	74 e0       	ldi	r23, 0x04	; 4
    4290:	80 e2       	ldi	r24, 0x20	; 32
    4292:	94 e0       	ldi	r25, 0x04	; 4
    4294:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    4298:	60 91 d7 04 	lds	r22, 0x04D7
    429c:	70 91 d8 04 	lds	r23, 0x04D8
    42a0:	80 91 d9 04 	lds	r24, 0x04D9
    42a4:	90 91 da 04 	lds	r25, 0x04DA
    42a8:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    42ac:	20 e8       	ldi	r18, 0x80	; 128
    42ae:	36 e9       	ldi	r19, 0x96	; 150
    42b0:	48 e1       	ldi	r20, 0x18	; 24
    42b2:	5b e4       	ldi	r21, 0x4B	; 75
    42b4:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    42b8:	25 e3       	ldi	r18, 0x35	; 53
    42ba:	3a ef       	ldi	r19, 0xFA	; 250
    42bc:	4e e8       	ldi	r20, 0x8E	; 142
    42be:	5c e3       	ldi	r21, 0x3C	; 60
    42c0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    42c4:	60 93 b3 04 	sts	0x04B3, r22
    42c8:	70 93 b4 04 	sts	0x04B4, r23
    42cc:	80 93 b5 04 	sts	0x04B5, r24
    42d0:	90 93 b6 04 	sts	0x04B6, r25
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    42d4:	60 91 db 04 	lds	r22, 0x04DB
    42d8:	70 91 dc 04 	lds	r23, 0x04DC
    42dc:	80 91 dd 04 	lds	r24, 0x04DD
    42e0:	90 91 de 04 	lds	r25, 0x04DE
    42e4:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__floatsisf>
    42e8:	20 e8       	ldi	r18, 0x80	; 128
    42ea:	36 e9       	ldi	r19, 0x96	; 150
    42ec:	48 e1       	ldi	r20, 0x18	; 24
    42ee:	5b e4       	ldi	r21, 0x4B	; 75
    42f0:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    42f4:	25 e3       	ldi	r18, 0x35	; 53
    42f6:	3a ef       	ldi	r19, 0xFA	; 250
    42f8:	4e e8       	ldi	r20, 0x8E	; 142
    42fa:	5c e3       	ldi	r21, 0x3C	; 60
    42fc:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4300:	60 93 b7 04 	sts	0x04B7, r22
    4304:	70 93 b8 04 	sts	0x04B8, r23
    4308:	80 93 b9 04 	sts	0x04B9, r24
    430c:	90 93 ba 04 	sts	0x04BA, r25
  
  GPS_done = 0;
    4310:	10 92 27 01 	sts	0x0127, r1
}
    4314:	df 91       	pop	r29
    4316:	cf 91       	pop	r28
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	ff 90       	pop	r15
    431e:	ef 90       	pop	r14
    4320:	08 95       	ret

00004322 <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    4322:	4f 92       	push	r4
    4324:	5f 92       	push	r5
    4326:	6f 92       	push	r6
    4328:	7f 92       	push	r7
    432a:	8f 92       	push	r8
    432c:	9f 92       	push	r9
    432e:	af 92       	push	r10
    4330:	bf 92       	push	r11
    4332:	cf 92       	push	r12
    4334:	df 92       	push	r13
    4336:	ef 92       	push	r14
    4338:	ff 92       	push	r15
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	64 97       	sbiw	r28, 0x14	; 20
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	8c 01       	movw	r16, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    4354:	88 e4       	ldi	r24, 0x48	; 72
    4356:	94 e0       	ldi	r25, 0x04	; 4
    4358:	aa db       	rcall	.-2220   	; 0x3aae <vector_norm>
    435a:	2b 01       	movw	r4, r22
    435c:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    435e:	9b 01       	movw	r18, r22
    4360:	ac 01       	movw	r20, r24
    4362:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4366:	9b 01       	movw	r18, r22
    4368:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    436a:	61 eb       	ldi	r22, 0xB1	; 177
    436c:	7a e1       	ldi	r23, 0x1A	; 26
    436e:	86 e7       	ldi	r24, 0x76	; 118
    4370:	91 e5       	ldi	r25, 0x51	; 81
    4372:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4376:	6d 87       	std	Y+13, r22	; 0x0d
    4378:	7e 87       	std	Y+14, r23	; 0x0e
    437a:	8f 87       	std	Y+15, r24	; 0x0f
    437c:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e4       	ldi	r20, 0x40	; 64
    4384:	50 e4       	ldi	r21, 0x40	; 64
    4386:	c3 01       	movw	r24, r6
    4388:	b2 01       	movw	r22, r4
    438a:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <pow>
    438e:	6b 01       	movw	r12, r22
    4390:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e8       	ldi	r20, 0x80	; 128
    4398:	50 e4       	ldi	r21, 0x40	; 64
    439a:	c3 01       	movw	r24, r6
    439c:	b2 01       	movw	r22, r4
    439e:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <pow>
    43a2:	2b 01       	movw	r4, r22
    43a4:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    43a6:	80 90 50 04 	lds	r8, 0x0450
    43aa:	90 90 51 04 	lds	r9, 0x0451
    43ae:	a0 90 52 04 	lds	r10, 0x0452
    43b2:	b0 90 53 04 	lds	r11, 0x0453
    43b6:	a5 01       	movw	r20, r10
    43b8:	94 01       	movw	r18, r8
    43ba:	c5 01       	movw	r24, r10
    43bc:	b4 01       	movw	r22, r8
    43be:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    43c2:	28 e9       	ldi	r18, 0x98	; 152
    43c4:	38 e0       	ldi	r19, 0x08	; 8
    43c6:	45 e0       	ldi	r20, 0x05	; 5
    43c8:	5c e3       	ldi	r21, 0x3C	; 60
    43ca:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    43ce:	2a ec       	ldi	r18, 0xCA	; 202
    43d0:	3e ef       	ldi	r19, 0xFE	; 254
    43d2:	43 e1       	ldi	r20, 0x13	; 19
    43d4:	56 e5       	ldi	r21, 0x56	; 86
    43d6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    43da:	a3 01       	movw	r20, r6
    43dc:	92 01       	movw	r18, r4
    43de:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    43e2:	69 8b       	std	Y+17, r22	; 0x11
    43e4:	7a 8b       	std	Y+18, r23	; 0x12
    43e6:	8b 8b       	std	Y+19, r24	; 0x13
    43e8:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	40 e8       	ldi	r20, 0x80	; 128
    43f0:	5f e3       	ldi	r21, 0x3F	; 63
    43f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    43f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    43f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f8:	98 89       	ldd	r25, Y+16	; 0x10
    43fa:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    43fe:	29 89       	ldd	r18, Y+17	; 0x11
    4400:	3a 89       	ldd	r19, Y+18	; 0x12
    4402:	4b 89       	ldd	r20, Y+19	; 0x13
    4404:	5c 89       	ldd	r21, Y+20	; 0x14
    4406:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    440a:	2b 01       	movw	r4, r22
    440c:	3c 01       	movw	r6, r24
    440e:	21 ef       	ldi	r18, 0xF1	; 241
    4410:	39 e4       	ldi	r19, 0x49	; 73
    4412:	45 eb       	ldi	r20, 0xB5	; 181
    4414:	57 ed       	ldi	r21, 0xD7	; 215
    4416:	60 91 48 04 	lds	r22, 0x0448
    441a:	70 91 49 04 	lds	r23, 0x0449
    441e:	80 91 4a 04 	lds	r24, 0x044A
    4422:	90 91 4b 04 	lds	r25, 0x044B
    4426:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    442a:	a3 01       	movw	r20, r6
    442c:	92 01       	movw	r18, r4
    442e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4432:	a7 01       	movw	r20, r14
    4434:	96 01       	movw	r18, r12
    4436:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    443a:	69 83       	std	Y+1, r22	; 0x01
    443c:	7a 83       	std	Y+2, r23	; 0x02
    443e:	8b 83       	std	Y+3, r24	; 0x03
    4440:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    4442:	21 ef       	ldi	r18, 0xF1	; 241
    4444:	39 e4       	ldi	r19, 0x49	; 73
    4446:	45 eb       	ldi	r20, 0xB5	; 181
    4448:	57 ed       	ldi	r21, 0xD7	; 215
    444a:	60 91 4c 04 	lds	r22, 0x044C
    444e:	70 91 4d 04 	lds	r23, 0x044D
    4452:	80 91 4e 04 	lds	r24, 0x044E
    4456:	90 91 4f 04 	lds	r25, 0x044F
    445a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    445e:	9b 01       	movw	r18, r22
    4460:	ac 01       	movw	r20, r24
    4462:	c3 01       	movw	r24, r6
    4464:	b2 01       	movw	r22, r4
    4466:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    446a:	a7 01       	movw	r20, r14
    446c:	96 01       	movw	r18, r12
    446e:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4472:	6d 83       	std	Y+5, r22	; 0x05
    4474:	7e 83       	std	Y+6, r23	; 0x06
    4476:	8f 83       	std	Y+7, r24	; 0x07
    4478:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    447a:	21 ef       	ldi	r18, 0xF1	; 241
    447c:	39 e4       	ldi	r19, 0x49	; 73
    447e:	45 eb       	ldi	r20, 0xB5	; 181
    4480:	57 ed       	ldi	r21, 0xD7	; 215
    4482:	c5 01       	movw	r24, r10
    4484:	b4 01       	movw	r22, r8
    4486:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    448a:	2b 01       	movw	r4, r22
    448c:	3c 01       	movw	r6, r24
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e4       	ldi	r20, 0x40	; 64
    4494:	50 e4       	ldi	r21, 0x40	; 64
    4496:	6d 85       	ldd	r22, Y+13	; 0x0d
    4498:	7e 85       	ldd	r23, Y+14	; 0x0e
    449a:	8f 85       	ldd	r24, Y+15	; 0x0f
    449c:	98 89       	ldd	r25, Y+16	; 0x10
    449e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e8       	ldi	r20, 0x80	; 128
    44a8:	5f e3       	ldi	r21, 0x3F	; 63
    44aa:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    44ae:	29 89       	ldd	r18, Y+17	; 0x11
    44b0:	3a 89       	ldd	r19, Y+18	; 0x12
    44b2:	4b 89       	ldd	r20, Y+19	; 0x13
    44b4:	5c 89       	ldd	r21, Y+20	; 0x14
    44b6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    44ba:	9b 01       	movw	r18, r22
    44bc:	ac 01       	movw	r20, r24
    44be:	c3 01       	movw	r24, r6
    44c0:	b2 01       	movw	r22, r4
    44c2:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    44c6:	a7 01       	movw	r20, r14
    44c8:	96 01       	movw	r18, r12
    44ca:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    44ce:	69 87       	std	Y+9, r22	; 0x09
    44d0:	7a 87       	std	Y+10, r23	; 0x0a
    44d2:	8b 87       	std	Y+11, r24	; 0x0b
    44d4:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    44d6:	b8 01       	movw	r22, r16
    44d8:	ce 01       	movw	r24, r28
    44da:	01 96       	adiw	r24, 0x01	; 1
    44dc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    44e0:	64 96       	adiw	r28, 0x14	; 20
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	f8 94       	cli
    44e6:	de bf       	out	0x3e, r29	; 62
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	cd bf       	out	0x3d, r28	; 61
    44ec:	df 91       	pop	r29
    44ee:	cf 91       	pop	r28
    44f0:	1f 91       	pop	r17
    44f2:	0f 91       	pop	r16
    44f4:	ff 90       	pop	r15
    44f6:	ef 90       	pop	r14
    44f8:	df 90       	pop	r13
    44fa:	cf 90       	pop	r12
    44fc:	bf 90       	pop	r11
    44fe:	af 90       	pop	r10
    4500:	9f 90       	pop	r9
    4502:	8f 90       	pop	r8
    4504:	7f 90       	pop	r7
    4506:	6f 90       	pop	r6
    4508:	5f 90       	pop	r5
    450a:	4f 90       	pop	r4
    450c:	08 95       	ret

0000450e <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    450e:	4f 92       	push	r4
    4510:	5f 92       	push	r5
    4512:	7f 92       	push	r7
    4514:	8f 92       	push	r8
    4516:	9f 92       	push	r9
    4518:	af 92       	push	r10
    451a:	bf 92       	push	r11
    451c:	cf 92       	push	r12
    451e:	df 92       	push	r13
    4520:	ef 92       	push	r14
    4522:	ff 92       	push	r15
    4524:	0f 93       	push	r16
    4526:	1f 93       	push	r17
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
    4530:	68 97       	sbiw	r28, 0x18	; 24
    4532:	0f b6       	in	r0, 0x3f	; 63
    4534:	f8 94       	cli
    4536:	de bf       	out	0x3e, r29	; 62
    4538:	0f be       	out	0x3f, r0	; 63
    453a:	cd bf       	out	0x3d, r28	; 61
    453c:	0f 2e       	mov	r0, r31
    453e:	fa e0       	ldi	r31, 0x0A	; 10
    4540:	7f 2e       	mov	r7, r31
    4542:	f0 2d       	mov	r31, r0
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    4544:	5e 01       	movw	r10, r28
    4546:	8d e0       	ldi	r24, 0x0D	; 13
    4548:	a8 0e       	add	r10, r24
    454a:	b1 1c       	adc	r11, r1
    454c:	0f 2e       	mov	r0, r31
    454e:	f4 e5       	ldi	r31, 0x54	; 84
    4550:	4f 2e       	mov	r4, r31
    4552:	f4 e0       	ldi	r31, 0x04	; 4
    4554:	5f 2e       	mov	r5, r31
    4556:	f0 2d       	mov	r31, r0
    4558:	0f 2e       	mov	r0, r31
    455a:	f8 e4       	ldi	r31, 0x48	; 72
    455c:	cf 2e       	mov	r12, r31
    455e:	f4 e0       	ldi	r31, 0x04	; 4
    4560:	df 2e       	mov	r13, r31
    4562:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    4564:	ce 01       	movw	r24, r28
    4566:	01 96       	adiw	r24, 0x01	; 1
    4568:	dc de       	rcall	.-584    	; 0x4322 <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    456a:	b5 01       	movw	r22, r10
    456c:	8c e3       	ldi	r24, 0x3C	; 60
    456e:	94 e0       	ldi	r25, 0x04	; 4
    4570:	6f da       	rcall	.-2850   	; 0x3a50 <copy_vector>
    4572:	fe 01       	movw	r30, r28
    4574:	31 96       	adiw	r30, 0x01	; 1
    4576:	7f 01       	movw	r14, r30
    4578:	45 01       	movw	r8, r10
    457a:	0c e3       	ldi	r16, 0x3C	; 60
    457c:	14 e0       	ldi	r17, 0x04	; 4
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    457e:	f7 01       	movw	r30, r14
    4580:	61 91       	ld	r22, Z+
    4582:	71 91       	ld	r23, Z+
    4584:	81 91       	ld	r24, Z+
    4586:	91 91       	ld	r25, Z+
    4588:	7f 01       	movw	r14, r30
    458a:	2d ec       	ldi	r18, 0xCD	; 205
    458c:	3c ec       	ldi	r19, 0xCC	; 204
    458e:	4c e4       	ldi	r20, 0x4C	; 76
    4590:	5e e3       	ldi	r21, 0x3E	; 62
    4592:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4596:	9b 01       	movw	r18, r22
    4598:	ac 01       	movw	r20, r24
    459a:	f8 01       	movw	r30, r16
    459c:	60 81       	ld	r22, Z
    459e:	71 81       	ldd	r23, Z+1	; 0x01
    45a0:	82 81       	ldd	r24, Z+2	; 0x02
    45a2:	93 81       	ldd	r25, Z+3	; 0x03
    45a4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    45a8:	f8 01       	movw	r30, r16
    45aa:	61 93       	st	Z+, r22
    45ac:	71 93       	st	Z+, r23
    45ae:	81 93       	st	Z+, r24
    45b0:	91 93       	st	Z+, r25
    45b2:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    45b4:	e8 14       	cp	r14, r8
    45b6:	f9 04       	cpc	r15, r9
    45b8:	11 f7       	brne	.-60     	; 0x457e <sgp_orbit_propagator+0x70>
    45ba:	45 01       	movw	r8, r10
    45bc:	72 01       	movw	r14, r4
    45be:	0c e3       	ldi	r16, 0x3C	; 60
    45c0:	14 e0       	ldi	r17, 0x04	; 4
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    45c2:	f8 01       	movw	r30, r16
    45c4:	61 91       	ld	r22, Z+
    45c6:	71 91       	ld	r23, Z+
    45c8:	81 91       	ld	r24, Z+
    45ca:	91 91       	ld	r25, Z+
    45cc:	8f 01       	movw	r16, r30
    45ce:	f4 01       	movw	r30, r8
    45d0:	21 91       	ld	r18, Z+
    45d2:	31 91       	ld	r19, Z+
    45d4:	41 91       	ld	r20, Z+
    45d6:	51 91       	ld	r21, Z+
    45d8:	4f 01       	movw	r8, r30
    45da:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	40 e0       	ldi	r20, 0x00	; 0
    45e4:	5f e3       	ldi	r21, 0x3F	; 63
    45e6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    45ea:	2d ec       	ldi	r18, 0xCD	; 205
    45ec:	3c ec       	ldi	r19, 0xCC	; 204
    45ee:	4c e4       	ldi	r20, 0x4C	; 76
    45f0:	5e e3       	ldi	r21, 0x3E	; 62
    45f2:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    45f6:	9b 01       	movw	r18, r22
    45f8:	ac 01       	movw	r20, r24
    45fa:	f7 01       	movw	r30, r14
    45fc:	60 81       	ld	r22, Z
    45fe:	71 81       	ldd	r23, Z+1	; 0x01
    4600:	82 81       	ldd	r24, Z+2	; 0x02
    4602:	93 81       	ldd	r25, Z+3	; 0x03
    4604:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4608:	f7 01       	movw	r30, r14
    460a:	61 93       	st	Z+, r22
    460c:	71 93       	st	Z+, r23
    460e:	81 93       	st	Z+, r24
    4610:	91 93       	st	Z+, r25
    4612:	7f 01       	movw	r14, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    4614:	0c 15       	cp	r16, r12
    4616:	1d 05       	cpc	r17, r13
    4618:	a1 f6       	brne	.-88     	; 0x45c2 <sgp_orbit_propagator+0xb4>
    461a:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    461c:	09 f0       	breq	.+2      	; 0x4620 <sgp_orbit_propagator+0x112>
    461e:	a2 cf       	rjmp	.-188    	; 0x4564 <sgp_orbit_propagator+0x56>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    4620:	68 96       	adiw	r28, 0x18	; 24
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	ff 90       	pop	r15
    4636:	ef 90       	pop	r14
    4638:	df 90       	pop	r13
    463a:	cf 90       	pop	r12
    463c:	bf 90       	pop	r11
    463e:	af 90       	pop	r10
    4640:	9f 90       	pop	r9
    4642:	8f 90       	pop	r8
    4644:	7f 90       	pop	r7
    4646:	5f 90       	pop	r5
    4648:	4f 90       	pop	r4
    464a:	08 95       	ret

0000464c <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    464c:	4f 92       	push	r4
    464e:	5f 92       	push	r5
    4650:	6f 92       	push	r6
    4652:	7f 92       	push	r7
    4654:	8f 92       	push	r8
    4656:	9f 92       	push	r9
    4658:	af 92       	push	r10
    465a:	bf 92       	push	r11
    465c:	cf 92       	push	r12
    465e:	df 92       	push	r13
    4660:	ef 92       	push	r14
    4662:	ff 92       	push	r15
    4664:	0f 93       	push	r16
    4666:	1f 93       	push	r17
    4668:	cf 93       	push	r28
    466a:	df 93       	push	r29
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
    4670:	2c 97       	sbiw	r28, 0x0c	; 12
    4672:	0f b6       	in	r0, 0x3f	; 63
    4674:	f8 94       	cli
    4676:	de bf       	out	0x3e, r29	; 62
    4678:	0f be       	out	0x3f, r0	; 63
    467a:	cd bf       	out	0x3d, r28	; 61
    467c:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    467e:	20 91 a4 04 	lds	r18, 0x04A4
    4682:	30 91 a5 04 	lds	r19, 0x04A5
    4686:	40 91 a6 04 	lds	r20, 0x04A6
    468a:	50 91 a7 04 	lds	r21, 0x04A7
    468e:	60 91 a8 04 	lds	r22, 0x04A8
    4692:	70 91 a9 04 	lds	r23, 0x04A9
    4696:	80 91 aa 04 	lds	r24, 0x04AA
    469a:	90 91 ab 04 	lds	r25, 0x04AB
    469e:	0e 94 8f 33 	call	0x671e	; 0x671e <__floatundisf>
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 ec       	ldi	r19, 0xC0	; 192
    46a6:	48 ea       	ldi	r20, 0xA8	; 168
    46a8:	57 e4       	ldi	r21, 0x47	; 71
    46aa:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    46ae:	2b ed       	ldi	r18, 0xDB	; 219
    46b0:	3f e0       	ldi	r19, 0x0F	; 15
    46b2:	49 ec       	ldi	r20, 0xC9	; 201
    46b4:	50 e4       	ldi	r21, 0x40	; 64
    46b6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    46ba:	21 ed       	ldi	r18, 0xD1	; 209
    46bc:	30 ea       	ldi	r19, 0xA0	; 160
    46be:	46 eb       	ldi	r20, 0xB6	; 182
    46c0:	53 e4       	ldi	r21, 0x43	; 67
    46c2:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    46c6:	4b 01       	movw	r8, r22
    46c8:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    46ca:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    46ce:	20 e9       	ldi	r18, 0x90	; 144
    46d0:	3e e2       	ldi	r19, 0x2E	; 46
    46d2:	4c ec       	ldi	r20, 0xCC	; 204
    46d4:	5e e3       	ldi	r21, 0x3E	; 62
    46d6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    46da:	0e 94 39 32 	call	0x6472	; 0x6472 <asin>
    46de:	6b 01       	movw	r12, r22
    46e0:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    46e2:	c5 01       	movw	r24, r10
    46e4:	b4 01       	movw	r22, r8
    46e6:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    46ea:	2b 01       	movw	r4, r22
    46ec:	3c 01       	movw	r6, r24
    46ee:	c7 01       	movw	r24, r14
    46f0:	b6 01       	movw	r22, r12
    46f2:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    46f6:	4b 01       	movw	r8, r22
    46f8:	5c 01       	movw	r10, r24
    46fa:	9b 01       	movw	r18, r22
    46fc:	ac 01       	movw	r20, r24
    46fe:	c3 01       	movw	r24, r6
    4700:	b2 01       	movw	r22, r4
    4702:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4706:	0e 94 c6 31 	call	0x638c	; 0x638c <acos>
    470a:	2b 01       	movw	r4, r22
    470c:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	a9 01       	movw	r20, r18
    4714:	c7 01       	movw	r24, r14
    4716:	b6 01       	movw	r22, r12
    4718:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    471c:	88 23       	and	r24, r24
    471e:	54 f4       	brge	.+20     	; 0x4734 <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    4720:	a3 01       	movw	r20, r6
    4722:	92 01       	movw	r18, r4
    4724:	6b ed       	ldi	r22, 0xDB	; 219
    4726:	7f e0       	ldi	r23, 0x0F	; 15
    4728:	89 ec       	ldi	r24, 0xC9	; 201
    472a:	90 e4       	ldi	r25, 0x40	; 64
    472c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    4730:	2b 01       	movw	r4, r22
    4732:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    4734:	c3 01       	movw	r24, r6
    4736:	b2 01       	movw	r22, r4
    4738:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    473c:	9b 01       	movw	r18, r22
    473e:	ac 01       	movw	r20, r24
    4740:	c5 01       	movw	r24, r10
    4742:	b4 01       	movw	r22, r8
    4744:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4748:	69 83       	std	Y+1, r22	; 0x01
    474a:	7a 83       	std	Y+2, r23	; 0x02
    474c:	8b 83       	std	Y+3, r24	; 0x03
    474e:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    4750:	c3 01       	movw	r24, r6
    4752:	b2 01       	movw	r22, r4
    4754:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    4758:	9b 01       	movw	r18, r22
    475a:	ac 01       	movw	r20, r24
    475c:	c5 01       	movw	r24, r10
    475e:	b4 01       	movw	r22, r8
    4760:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4764:	6d 83       	std	Y+5, r22	; 0x05
    4766:	7e 83       	std	Y+6, r23	; 0x06
    4768:	8f 83       	std	Y+7, r24	; 0x07
    476a:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    476c:	c7 01       	movw	r24, r14
    476e:	b6 01       	movw	r22, r12
    4770:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <sin>
    4774:	69 87       	std	Y+9, r22	; 0x09
    4776:	7a 87       	std	Y+10, r23	; 0x0a
    4778:	8b 87       	std	Y+11, r24	; 0x0b
    477a:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    477c:	2d ec       	ldi	r18, 0xCD	; 205
    477e:	3c ec       	ldi	r19, 0xCC	; 204
    4780:	4c ec       	ldi	r20, 0xCC	; 204
    4782:	5d e3       	ldi	r21, 0x3D	; 61
    4784:	60 91 38 04 	lds	r22, 0x0438
    4788:	70 91 39 04 	lds	r23, 0x0439
    478c:	80 91 3a 04 	lds	r24, 0x043A
    4790:	90 91 3b 04 	lds	r25, 0x043B
    4794:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4798:	60 93 38 04 	sts	0x0438, r22
    479c:	70 93 39 04 	sts	0x0439, r23
    47a0:	80 93 3a 04 	sts	0x043A, r24
    47a4:	90 93 3b 04 	sts	0x043B, r25
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    47a8:	98 01       	movw	r18, r16
    47aa:	ae 01       	movw	r20, r28
    47ac:	4f 5f       	subi	r20, 0xFF	; 255
    47ae:	5f 4f       	sbci	r21, 0xFF	; 255
    47b0:	6c e3       	ldi	r22, 0x3C	; 60
    47b2:	74 e0       	ldi	r23, 0x04	; 4
    47b4:	84 e5       	ldi	r24, 0x54	; 84
    47b6:	94 e0       	ldi	r25, 0x04	; 4
    47b8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    47bc:	2c 96       	adiw	r28, 0x0c	; 12
    47be:	0f b6       	in	r0, 0x3f	; 63
    47c0:	f8 94       	cli
    47c2:	de bf       	out	0x3e, r29	; 62
    47c4:	0f be       	out	0x3f, r0	; 63
    47c6:	cd bf       	out	0x3d, r28	; 61
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	1f 91       	pop	r17
    47ce:	0f 91       	pop	r16
    47d0:	ff 90       	pop	r15
    47d2:	ef 90       	pop	r14
    47d4:	df 90       	pop	r13
    47d6:	cf 90       	pop	r12
    47d8:	bf 90       	pop	r11
    47da:	af 90       	pop	r10
    47dc:	9f 90       	pop	r9
    47de:	8f 90       	pop	r8
    47e0:	7f 90       	pop	r7
    47e2:	6f 90       	pop	r6
    47e4:	5f 90       	pop	r5
    47e6:	4f 90       	pop	r4
    47e8:	08 95       	ret

000047ea <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    47ea:	af 92       	push	r10
    47ec:	bf 92       	push	r11
    47ee:	cf 92       	push	r12
    47f0:	df 92       	push	r13
    47f2:	ef 92       	push	r14
    47f4:	ff 92       	push	r15
    47f6:	0f 93       	push	r16
    47f8:	1f 93       	push	r17
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	e0 97       	sbiw	r28, 0x30	; 48
    4804:	0f b6       	in	r0, 0x3f	; 63
    4806:	f8 94       	cli
    4808:	de bf       	out	0x3e, r29	; 62
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	cd bf       	out	0x3d, r28	; 61
    480e:	5c 01       	movw	r10, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    4810:	20 91 9c 04 	lds	r18, 0x049C
    4814:	30 91 9d 04 	lds	r19, 0x049D
    4818:	40 91 9e 04 	lds	r20, 0x049E
    481c:	50 91 9f 04 	lds	r21, 0x049F
    4820:	60 91 a0 04 	lds	r22, 0x04A0
    4824:	70 91 a1 04 	lds	r23, 0x04A1
    4828:	80 91 a2 04 	lds	r24, 0x04A2
    482c:	90 91 a3 04 	lds	r25, 0x04A3
    4830:	0e 94 8f 33 	call	0x671e	; 0x671e <__floatundisf>
    4834:	20 ec       	ldi	r18, 0xC0	; 192
    4836:	39 e9       	ldi	r19, 0x99	; 153
    4838:	40 ef       	ldi	r20, 0xF0	; 240
    483a:	5b e4       	ldi	r21, 0x4B	; 75
    483c:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	4c ef       	ldi	r20, 0xFC	; 252
    4846:	54 e4       	ldi	r21, 0x44	; 68
    4848:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    484c:	6b 01       	movw	r12, r22
    484e:	7c 01       	movw	r14, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    4850:	be 01       	movw	r22, r28
    4852:	6f 5f       	subi	r22, 0xFF	; 255
    4854:	7f 4f       	sbci	r23, 0xFF	; 255
    4856:	84 e5       	ldi	r24, 0x54	; 84
    4858:	94 e0       	ldi	r25, 0x04	; 4
    485a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    485e:	be 01       	movw	r22, r28
    4860:	63 5f       	subi	r22, 0xF3	; 243
    4862:	7f 4f       	sbci	r23, 0xFF	; 255
    4864:	ce 01       	movw	r24, r28
    4866:	01 96       	adiw	r24, 0x01	; 1
    4868:	0e 94 32 10 	call	0x2064	; 0x2064 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    486c:	63 eb       	ldi	r22, 0xB3	; 179
    486e:	74 e0       	ldi	r23, 0x04	; 4
    4870:	ce 01       	movw	r24, r28
    4872:	0d 96       	adiw	r24, 0x0d	; 13
    4874:	ed d8       	rcall	.-3622   	; 0x3a50 <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    4876:	8e 01       	movw	r16, r28
    4878:	07 5e       	subi	r16, 0xE7	; 231
    487a:	1f 4f       	sbci	r17, 0xFF	; 255
    487c:	28 e0       	ldi	r18, 0x08	; 8
    487e:	b7 01       	movw	r22, r14
    4880:	a6 01       	movw	r20, r12
    4882:	ce 01       	movw	r24, r28
    4884:	0d 96       	adiw	r24, 0x0d	; 13
    4886:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    488a:	ae 01       	movw	r20, r28
    488c:	4f 5f       	subi	r20, 0xFF	; 255
    488e:	5f 4f       	sbci	r21, 0xFF	; 255
    4890:	be 01       	movw	r22, r28
    4892:	63 5f       	subi	r22, 0xF3	; 243
    4894:	7f 4f       	sbci	r23, 0xFF	; 255
    4896:	c8 01       	movw	r24, r16
    4898:	0e 94 b6 11 	call	0x236c	; 0x236c <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    489c:	be 01       	movw	r22, r28
    489e:	6b 5d       	subi	r22, 0xDB	; 219
    48a0:	7f 4f       	sbci	r23, 0xFF	; 255
    48a2:	ce 01       	movw	r24, r28
    48a4:	01 96       	adiw	r24, 0x01	; 1
    48a6:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    48aa:	95 01       	movw	r18, r10
    48ac:	ae 01       	movw	r20, r28
    48ae:	4b 5d       	subi	r20, 0xDB	; 219
    48b0:	5f 4f       	sbci	r21, 0xFF	; 255
    48b2:	6c e3       	ldi	r22, 0x3C	; 60
    48b4:	74 e0       	ldi	r23, 0x04	; 4
    48b6:	84 e5       	ldi	r24, 0x54	; 84
    48b8:	94 e0       	ldi	r25, 0x04	; 4
    48ba:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    48be:	e0 96       	adiw	r28, 0x30	; 48
    48c0:	0f b6       	in	r0, 0x3f	; 63
    48c2:	f8 94       	cli
    48c4:	de bf       	out	0x3e, r29	; 62
    48c6:	0f be       	out	0x3f, r0	; 63
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	1f 91       	pop	r17
    48d0:	0f 91       	pop	r16
    48d2:	ff 90       	pop	r15
    48d4:	ef 90       	pop	r14
    48d6:	df 90       	pop	r13
    48d8:	cf 90       	pop	r12
    48da:	bf 90       	pop	r11
    48dc:	af 90       	pop	r10
    48de:	08 95       	ret

000048e0 <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    48e0:	ff 92       	push	r15
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	cc ef       	ldi	r28, 0xFC	; 252
    48ec:	d4 e0       	ldi	r29, 0x04	; 4
    48ee:	04 e1       	ldi	r16, 0x14	; 20
    48f0:	15 e0       	ldi	r17, 0x05	; 5
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    48f2:	f1 2c       	mov	r15, r1
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    48f4:	69 91       	ld	r22, Y+
    48f6:	79 91       	ld	r23, Y+
    48f8:	89 91       	ld	r24, Y+
    48fa:	99 91       	ld	r25, Y+
    48fc:	27 e2       	ldi	r18, 0x27	; 39
    48fe:	31 e3       	ldi	r19, 0x31	; 49
    4900:	48 ec       	ldi	r20, 0xC8	; 200
    4902:	5e e3       	ldi	r21, 0x3E	; 62
    4904:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    4908:	88 23       	and	r24, r24
    490a:	0c f4       	brge	.+2      	; 0x490e <light_cal+0x2e>
		  num_dark_sensors++;
    490c:	f3 94       	inc	r15
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    490e:	c0 17       	cp	r28, r16
    4910:	d1 07       	cpc	r29, r17
    4912:	81 f7       	brne	.-32     	; 0x48f4 <light_cal+0x14>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	96 e0       	ldi	r25, 0x06	; 6
    4918:	f9 12       	cpse	r15, r25
    491a:	01 c0       	rjmp	.+2      	; 0x491e <light_cal+0x3e>
    491c:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	1f 91       	pop	r17
    4924:	0f 91       	pop	r16
    4926:	ff 90       	pop	r15
    4928:	08 95       	ret

0000492a <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    492a:	2f 92       	push	r2
    492c:	3f 92       	push	r3
    492e:	4f 92       	push	r4
    4930:	5f 92       	push	r5
    4932:	6f 92       	push	r6
    4934:	7f 92       	push	r7
    4936:	8f 92       	push	r8
    4938:	9f 92       	push	r9
    493a:	af 92       	push	r10
    493c:	bf 92       	push	r11
    493e:	cf 92       	push	r12
    4940:	df 92       	push	r13
    4942:	ef 92       	push	r14
    4944:	ff 92       	push	r15
    4946:	0f 93       	push	r16
    4948:	1f 93       	push	r17
    494a:	cf 93       	push	r28
    494c:	df 93       	push	r29
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
    4952:	cb 57       	subi	r28, 0x7B	; 123
    4954:	d1 09       	sbc	r29, r1
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	e1 96       	adiw	r28, 0x31	; 49
    4962:	9f af       	std	Y+63, r25	; 0x3f
    4964:	8e af       	std	Y+62, r24	; 0x3e
    4966:	e1 97       	sbiw	r28, 0x31	; 49
    4968:	1b 01       	movw	r2, r22
    496a:	e3 96       	adiw	r28, 0x33	; 51
    496c:	5f af       	std	Y+63, r21	; 0x3f
    496e:	4e af       	std	Y+62, r20	; 0x3e
    4970:	e3 97       	sbiw	r28, 0x33	; 51
    4972:	79 01       	movw	r14, r18
    4974:	0c ef       	ldi	r16, 0xFC	; 252
    4976:	14 e0       	ldi	r17, 0x04	; 4
    4978:	0f 2e       	mov	r0, r31
    497a:	f4 e1       	ldi	r31, 0x14	; 20
    497c:	cf 2e       	mov	r12, r31
    497e:	f5 e0       	ldi	r31, 0x05	; 5
    4980:	df 2e       	mov	r13, r31
    4982:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    4984:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4986:	f8 01       	movw	r30, r16
    4988:	61 91       	ld	r22, Z+
    498a:	71 91       	ld	r23, Z+
    498c:	81 91       	ld	r24, Z+
    498e:	91 91       	ld	r25, Z+
    4990:	8f 01       	movw	r16, r30
    4992:	27 e2       	ldi	r18, 0x27	; 39
    4994:	31 e3       	ldi	r19, 0x31	; 49
    4996:	48 ec       	ldi	r20, 0xC8	; 200
    4998:	5e e3       	ldi	r21, 0x3E	; 62
    499a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    499e:	88 23       	and	r24, r24
    49a0:	0c f4       	brge	.+2      	; 0x49a4 <quest+0x7a>
      num_dark_sensors++;
    49a2:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    49a4:	0c 15       	cp	r16, r12
    49a6:	1d 05       	cpc	r17, r13
    49a8:	71 f7       	brne	.-36     	; 0x4986 <quest+0x5c>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    49aa:	f1 e0       	ldi	r31, 0x01	; 1
    49ac:	e4 96       	adiw	r28, 0x34	; 52
    49ae:	ff af       	std	Y+63, r31	; 0x3f
    49b0:	e4 97       	sbiw	r28, 0x34	; 52
    49b2:	26 e0       	ldi	r18, 0x06	; 6
    49b4:	b2 12       	cpse	r11, r18
    49b6:	03 c0       	rjmp	.+6      	; 0x49be <quest+0x94>
    49b8:	e4 96       	adiw	r28, 0x34	; 52
    49ba:	1f ae       	std	Y+63, r1	; 0x3f
    49bc:	e4 97       	sbiw	r28, 0x34	; 52
    light = 0;
  
  if(light)
    49be:	e4 96       	adiw	r28, 0x34	; 52
    49c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    49c2:	e4 97       	sbiw	r28, 0x34	; 52
    49c4:	88 23       	and	r24, r24
    49c6:	09 f4       	brne	.+2      	; 0x49ca <quest+0xa0>
    49c8:	0e c3       	rjmp	.+1564   	; 0x4fe6 <quest+0x6bc>
  {
    if(!*p_w_ctrl)
    49ca:	f7 01       	movw	r30, r14
    49cc:	80 81       	ld	r24, Z
    49ce:	81 11       	cpse	r24, r1
    49d0:	0f c0       	rjmp	.+30     	; 0x49f0 <quest+0xc6>
    {
      time_since_light += FRAME_TIME;
    49d2:	80 91 60 04 	lds	r24, 0x0460
    49d6:	90 91 61 04 	lds	r25, 0x0461
    49da:	02 96       	adiw	r24, 0x02	; 2
    49dc:	90 93 61 04 	sts	0x0461, r25
    49e0:	80 93 60 04 	sts	0x0460, r24
      if(time_since_light == 300)
    49e4:	8c 32       	cpi	r24, 0x2C	; 44
    49e6:	91 40       	sbci	r25, 0x01	; 1
    49e8:	19 f4       	brne	.+6      	; 0x49f0 <quest+0xc6>
        *p_w_ctrl = 1;
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	f7 01       	movw	r30, r14
    49ee:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    49f0:	80 91 12 01 	lds	r24, 0x0112
    49f4:	81 11       	cpse	r24, r1
    49f6:	10 c3       	rjmp	.+1568   	; 0x5018 <quest+0x6ee>
    {
      *p_w_ctrl = 0;
    49f8:	f7 01       	movw	r30, r14
    49fa:	10 82       	st	Z, r1
      time_since_light = 0;
    49fc:	10 92 61 04 	sts	0x0461, r1
    4a00:	10 92 60 04 	sts	0x0460, r1
    4a04:	09 c3       	rjmp	.+1554   	; 0x5018 <quest+0x6ee>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4a06:	89 86       	std	Y+9, r8	; 0x09
    4a08:	9a 86       	std	Y+10, r9	; 0x0a
    4a0a:	ab 86       	std	Y+11, r10	; 0x0b
    4a0c:	bc 86       	std	Y+12, r11	; 0x0c
    4a0e:	08 c0       	rjmp	.+16     	; 0x4a20 <quest+0xf6>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4a10:	f7 fa       	bst	r15, 7
    4a12:	f0 94       	com	r15
    4a14:	f7 f8       	bld	r15, 7
    4a16:	f0 94       	com	r15
    4a18:	c9 86       	std	Y+9, r12	; 0x09
    4a1a:	da 86       	std	Y+10, r13	; 0x0a
    4a1c:	eb 86       	std	Y+11, r14	; 0x0b
    4a1e:	fc 86       	std	Y+12, r15	; 0x0c
    4a20:	8e 01       	movw	r16, r28
    4a22:	0f 5f       	subi	r16, 0xFF	; 255
    4a24:	1f 4f       	sbci	r17, 0xFF	; 255
    4a26:	ce 01       	movw	r24, r28
    4a28:	0d 96       	adiw	r24, 0x0d	; 13
    4a2a:	af 96       	adiw	r28, 0x2f	; 47
    4a2c:	9f af       	std	Y+63, r25	; 0x3f
    4a2e:	8e af       	std	Y+62, r24	; 0x3e
    4a30:	af 97       	sbiw	r28, 0x2f	; 47

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    4a32:	f8 01       	movw	r30, r16
    4a34:	c0 80       	ld	r12, Z
    4a36:	d1 80       	ldd	r13, Z+1	; 0x01
    4a38:	e2 80       	ldd	r14, Z+2	; 0x02
    4a3a:	f3 80       	ldd	r15, Z+3	; 0x03
    4a3c:	46 01       	movw	r8, r12
    4a3e:	57 01       	movw	r10, r14
    4a40:	e8 94       	clt
    4a42:	b7 f8       	bld	r11, 7
    4a44:	26 e6       	ldi	r18, 0x66	; 102
    4a46:	36 e6       	ldi	r19, 0x66	; 102
    4a48:	46 e8       	ldi	r20, 0x86	; 134
    4a4a:	5f e3       	ldi	r21, 0x3F	; 63
    4a4c:	c5 01       	movw	r24, r10
    4a4e:	b4 01       	movw	r22, r8
    4a50:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    4a54:	21 ec       	ldi	r18, 0xC1	; 193
    4a56:	3a ec       	ldi	r19, 0xCA	; 202
    4a58:	41 ec       	ldi	r20, 0xC1	; 193
    4a5a:	5f e3       	ldi	r21, 0x3F	; 63
    4a5c:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    4a60:	0e 94 c6 31 	call	0x638c	; 0x638c <acos>
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	44 e3       	ldi	r20, 0x34	; 52
    4a6a:	53 e4       	ldi	r21, 0x43	; 67
    4a6c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4a70:	20 ed       	ldi	r18, 0xD0	; 208
    4a72:	3f e0       	ldi	r19, 0x0F	; 15
    4a74:	49 e4       	ldi	r20, 0x49	; 73
    4a76:	50 e4       	ldi	r21, 0x40	; 64
    4a78:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    4a7c:	26 e6       	ldi	r18, 0x66	; 102
    4a7e:	36 e6       	ldi	r19, 0x66	; 102
    4a80:	4e e1       	ldi	r20, 0x1E	; 30
    4a82:	51 e4       	ldi	r21, 0x41	; 65
    4a84:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4a88:	23 e3       	ldi	r18, 0x33	; 51
    4a8a:	33 e3       	ldi	r19, 0x33	; 51
    4a8c:	43 ed       	ldi	r20, 0xD3	; 211
    4a8e:	5f e3       	ldi	r21, 0x3F	; 63
    4a90:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4a94:	20 ed       	ldi	r18, 0xD0	; 208
    4a96:	3f e0       	ldi	r19, 0x0F	; 15
    4a98:	49 e4       	ldi	r20, 0x49	; 73
    4a9a:	50 e4       	ldi	r21, 0x40	; 64
    4a9c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	44 e3       	ldi	r20, 0x34	; 52
    4aa6:	53 e4       	ldi	r21, 0x43	; 67
    4aa8:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4aac:	2b 01       	movw	r4, r22
    4aae:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	a9 01       	movw	r20, r18
    4ab6:	c7 01       	movw	r24, r14
    4ab8:	b6 01       	movw	r22, r12
    4aba:	0e 94 b2 32 	call	0x6564	; 0x6564 <__cmpsf2>
    4abe:	88 23       	and	r24, r24
    4ac0:	c1 f0       	breq	.+48     	; 0x4af2 <quest+0x1c8>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    4ac2:	c3 01       	movw	r24, r6
    4ac4:	b2 01       	movw	r22, r4
    4ac6:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    4aca:	2b 01       	movw	r4, r22
    4acc:	3c 01       	movw	r6, r24
    4ace:	a7 01       	movw	r20, r14
    4ad0:	96 01       	movw	r18, r12
    4ad2:	c5 01       	movw	r24, r10
    4ad4:	b4 01       	movw	r22, r8
    4ad6:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4ada:	9b 01       	movw	r18, r22
    4adc:	ac 01       	movw	r20, r24
    4ade:	c3 01       	movw	r24, r6
    4ae0:	b2 01       	movw	r22, r4
    4ae2:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4ae6:	f8 01       	movw	r30, r16
    4ae8:	60 83       	st	Z, r22
    4aea:	71 83       	std	Z+1, r23	; 0x01
    4aec:	82 83       	std	Z+2, r24	; 0x02
    4aee:	93 83       	std	Z+3, r25	; 0x03
    4af0:	09 c0       	rjmp	.+18     	; 0x4b04 <quest+0x1da>
		else
		v_sun_m[i] = cos(angle);
    4af2:	c3 01       	movw	r24, r6
    4af4:	b2 01       	movw	r22, r4
    4af6:	0e 94 b6 32 	call	0x656c	; 0x656c <cos>
    4afa:	f8 01       	movw	r30, r16
    4afc:	60 83       	st	Z, r22
    4afe:	71 83       	std	Z+1, r23	; 0x01
    4b00:	82 83       	std	Z+2, r24	; 0x02
    4b02:	93 83       	std	Z+3, r25	; 0x03
    4b04:	0c 5f       	subi	r16, 0xFC	; 252
    4b06:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    4b08:	af 96       	adiw	r28, 0x2f	; 47
    4b0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4b0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b0e:	af 97       	sbiw	r28, 0x2f	; 47
    4b10:	08 17       	cp	r16, r24
    4b12:	19 07       	cpc	r17, r25
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <quest+0x1ee>
    4b16:	8d cf       	rjmp	.-230    	; 0x4a32 <quest+0x108>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    4b18:	ce 01       	movw	r24, r28
    4b1a:	01 96       	adiw	r24, 0x01	; 1
    4b1c:	1d da       	rcall	.-3014   	; 0x3f58 <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    4b1e:	80 91 14 05 	lds	r24, 0x0514
    4b22:	90 91 15 05 	lds	r25, 0x0515
    4b26:	a0 91 16 05 	lds	r26, 0x0516
    4b2a:	b0 91 17 05 	lds	r27, 0x0517
    4b2e:	8d 8b       	std	Y+21, r24	; 0x15
    4b30:	9e 8b       	std	Y+22, r25	; 0x16
    4b32:	af 8b       	std	Y+23, r26	; 0x17
    4b34:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    4b36:	80 91 18 05 	lds	r24, 0x0518
    4b3a:	90 91 19 05 	lds	r25, 0x0519
    4b3e:	a0 91 1a 05 	lds	r26, 0x051A
    4b42:	b0 91 1b 05 	lds	r27, 0x051B
    4b46:	b0 58       	subi	r27, 0x80	; 128
    4b48:	89 8b       	std	Y+17, r24	; 0x11
    4b4a:	9a 8b       	std	Y+18, r25	; 0x12
    4b4c:	ab 8b       	std	Y+19, r26	; 0x13
    4b4e:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    4b50:	80 91 1c 05 	lds	r24, 0x051C
    4b54:	90 91 1d 05 	lds	r25, 0x051D
    4b58:	a0 91 1e 05 	lds	r26, 0x051E
    4b5c:	b0 91 1f 05 	lds	r27, 0x051F
    4b60:	8d 87       	std	Y+13, r24	; 0x0d
    4b62:	9e 87       	std	Y+14, r25	; 0x0e
    4b64:	af 87       	std	Y+15, r26	; 0x0f
    4b66:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    4b68:	ae 01       	movw	r20, r28
    4b6a:	47 5e       	subi	r20, 0xE7	; 231
    4b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b6e:	be 01       	movw	r22, r28
    4b70:	6f 5f       	subi	r22, 0xFF	; 255
    4b72:	7f 4f       	sbci	r23, 0xFF	; 255
    4b74:	ce 01       	movw	r24, r28
    4b76:	0d 96       	adiw	r24, 0x0d	; 13
    4b78:	18 d9       	rcall	.-3536   	; 0x3daa <vector_cross_product>
    convert_unit_vector(v_cross_m);
    4b7a:	ce 01       	movw	r24, r28
    4b7c:	49 96       	adiw	r24, 0x19	; 25
    4b7e:	ec d9       	rcall	.-3112   	; 0x3f58 <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    4b80:	ae 01       	movw	r20, r28
    4b82:	4b 5d       	subi	r20, 0xDB	; 219
    4b84:	5f 4f       	sbci	r21, 0xFF	; 255
    4b86:	b1 01       	movw	r22, r2
    4b88:	e1 96       	adiw	r28, 0x31	; 49
    4b8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4b8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b8e:	e1 97       	sbiw	r28, 0x31	; 49
    4b90:	0c d9       	rcall	.-3560   	; 0x3daa <vector_cross_product>
    convert_unit_vector(v_cross_c);
    4b92:	ce 01       	movw	r24, r28
    4b94:	85 96       	adiw	r24, 0x25	; 37
    4b96:	e0 d9       	rcall	.-3136   	; 0x3f58 <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    4b98:	be 01       	movw	r22, r28
    4b9a:	6b 5d       	subi	r22, 0xDB	; 219
    4b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	49 96       	adiw	r24, 0x19	; 25
    4ba2:	37 d8       	rcall	.-3986   	; 0x3c12 <vector_dot_product>
    4ba4:	6b 01       	movw	r12, r22
    4ba6:	7c 01       	movw	r14, r24
    4ba8:	e1 96       	adiw	r28, 0x31	; 49
    4baa:	6e ad       	ldd	r22, Y+62	; 0x3e
    4bac:	7f ad       	ldd	r23, Y+63	; 0x3f
    4bae:	e1 97       	sbiw	r28, 0x31	; 49
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	0d 96       	adiw	r24, 0x0d	; 13
    4bb4:	2e d8       	rcall	.-4004   	; 0x3c12 <vector_dot_product>
    4bb6:	4b 01       	movw	r8, r22
    4bb8:	5c 01       	movw	r10, r24
    4bba:	b1 01       	movw	r22, r2
    4bbc:	ce 01       	movw	r24, r28
    4bbe:	01 96       	adiw	r24, 0x01	; 1
    4bc0:	28 d8       	rcall	.-4016   	; 0x3c12 <vector_dot_product>
    4bc2:	2b 01       	movw	r4, r22
    4bc4:	3c 01       	movw	r6, r24
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	40 e8       	ldi	r20, 0x80	; 128
    4bcc:	5f e3       	ldi	r21, 0x3F	; 63
    4bce:	c7 01       	movw	r24, r14
    4bd0:	b6 01       	movw	r22, r12
    4bd2:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4bd6:	6b 01       	movw	r12, r22
    4bd8:	7c 01       	movw	r14, r24
    4bda:	26 e6       	ldi	r18, 0x66	; 102
    4bdc:	36 e6       	ldi	r19, 0x66	; 102
    4bde:	46 e6       	ldi	r20, 0x66	; 102
    4be0:	5f e3       	ldi	r21, 0x3F	; 63
    4be2:	c5 01       	movw	r24, r10
    4be4:	b4 01       	movw	r22, r8
    4be6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4bea:	4b 01       	movw	r8, r22
    4bec:	5c 01       	movw	r10, r24
    4bee:	20 ed       	ldi	r18, 0xD0	; 208
    4bf0:	3c ec       	ldi	r19, 0xCC	; 204
    4bf2:	4c ec       	ldi	r20, 0xCC	; 204
    4bf4:	5d e3       	ldi	r21, 0x3D	; 61
    4bf6:	c3 01       	movw	r24, r6
    4bf8:	b2 01       	movw	r22, r4
    4bfa:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4bfe:	9b 01       	movw	r18, r22
    4c00:	ac 01       	movw	r20, r24
    4c02:	c5 01       	movw	r24, r10
    4c04:	b4 01       	movw	r22, r8
    4c06:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4c0a:	9b 01       	movw	r18, r22
    4c0c:	ac 01       	movw	r20, r24
    4c0e:	c7 01       	movw	r24, r14
    4c10:	b6 01       	movw	r22, r12
    4c12:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4c16:	4b 01       	movw	r8, r22
    4c18:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4c1a:	ae 01       	movw	r20, r28
    4c1c:	47 5b       	subi	r20, 0xB7	; 183
    4c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c20:	e1 96       	adiw	r28, 0x31	; 49
    4c22:	6e ad       	ldd	r22, Y+62	; 0x3e
    4c24:	7f ad       	ldd	r23, Y+63	; 0x3f
    4c26:	e1 97       	sbiw	r28, 0x31	; 49
    4c28:	ce 01       	movw	r24, r28
    4c2a:	0d 96       	adiw	r24, 0x0d	; 13
    4c2c:	be d8       	rcall	.-3716   	; 0x3daa <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4c2e:	ae 01       	movw	r20, r28
    4c30:	4b 5a       	subi	r20, 0xAB	; 171
    4c32:	5f 4f       	sbci	r21, 0xFF	; 255
    4c34:	b1 01       	movw	r22, r2
    4c36:	ce 01       	movw	r24, r28
    4c38:	01 96       	adiw	r24, 0x01	; 1
    4c3a:	b7 d8       	rcall	.-3730   	; 0x3daa <vector_cross_product>
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	e7 5b       	subi	r30, 0xB7	; 183
    4c40:	ff 4f       	sbci	r31, 0xFF	; 255
    4c42:	7f 01       	movw	r14, r30
    4c44:	8e 01       	movw	r16, r28
    4c46:	0b 5a       	subi	r16, 0xAB	; 171
    4c48:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4a:	6f 01       	movw	r12, r30
    4c4c:	fc e0       	ldi	r31, 0x0C	; 12
    4c4e:	cf 0e       	add	r12, r31
    4c50:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4c52:	f7 01       	movw	r30, r14
    4c54:	61 91       	ld	r22, Z+
    4c56:	71 91       	ld	r23, Z+
    4c58:	81 91       	ld	r24, Z+
    4c5a:	91 91       	ld	r25, Z+
    4c5c:	7f 01       	movw	r14, r30
    4c5e:	26 e6       	ldi	r18, 0x66	; 102
    4c60:	36 e6       	ldi	r19, 0x66	; 102
    4c62:	46 e6       	ldi	r20, 0x66	; 102
    4c64:	5f e3       	ldi	r21, 0x3F	; 63
    4c66:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4c6a:	2b 01       	movw	r4, r22
    4c6c:	3c 01       	movw	r6, r24
    4c6e:	20 ed       	ldi	r18, 0xD0	; 208
    4c70:	3c ec       	ldi	r19, 0xCC	; 204
    4c72:	4c ec       	ldi	r20, 0xCC	; 204
    4c74:	5d e3       	ldi	r21, 0x3D	; 61
    4c76:	f8 01       	movw	r30, r16
    4c78:	60 81       	ld	r22, Z
    4c7a:	71 81       	ldd	r23, Z+1	; 0x01
    4c7c:	82 81       	ldd	r24, Z+2	; 0x02
    4c7e:	93 81       	ldd	r25, Z+3	; 0x03
    4c80:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4c84:	9b 01       	movw	r18, r22
    4c86:	ac 01       	movw	r20, r24
    4c88:	c3 01       	movw	r24, r6
    4c8a:	b2 01       	movw	r22, r4
    4c8c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4c90:	f8 01       	movw	r30, r16
    4c92:	61 93       	st	Z+, r22
    4c94:	71 93       	st	Z+, r23
    4c96:	81 93       	st	Z+, r24
    4c98:	91 93       	st	Z+, r25
    4c9a:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4c9c:	ec 14       	cp	r14, r12
    4c9e:	fd 04       	cpc	r15, r13
    4ca0:	c1 f6       	brne	.-80     	; 0x4c52 <quest+0x328>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4ca2:	ae 01       	movw	r20, r28
    4ca4:	4f 5c       	subi	r20, 0xCF	; 207
    4ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca8:	be 01       	movw	r22, r28
    4caa:	6b 5d       	subi	r22, 0xDB	; 219
    4cac:	7f 4f       	sbci	r23, 0xFF	; 255
    4cae:	ce 01       	movw	r24, r28
    4cb0:	49 96       	adiw	r24, 0x19	; 25
    4cb2:	7b d8       	rcall	.-3850   	; 0x3daa <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4cb4:	be 01       	movw	r22, r28
    4cb6:	6b 5a       	subi	r22, 0xAB	; 171
    4cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cba:	ce 01       	movw	r24, r28
    4cbc:	c1 96       	adiw	r24, 0x31	; 49
    4cbe:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vector_dot_product>
    4cc2:	a5 01       	movw	r20, r10
    4cc4:	94 01       	movw	r18, r8
    4cc6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4cca:	6b 01       	movw	r12, r22
    4ccc:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4cce:	ae 01       	movw	r20, r28
    4cd0:	43 5c       	subi	r20, 0xC3	; 195
    4cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    4cd4:	be 01       	movw	r22, r28
    4cd6:	6b 5d       	subi	r22, 0xDB	; 219
    4cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cda:	ce 01       	movw	r24, r28
    4cdc:	49 96       	adiw	r24, 0x19	; 25
    4cde:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4ce2:	be 01       	movw	r22, r28
    4ce4:	6b 5a       	subi	r22, 0xAB	; 171
    4ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce8:	ce 01       	movw	r24, r28
    4cea:	cd 96       	adiw	r24, 0x3d	; 61
    4cec:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vector_dot_product>
    4cf0:	2b 01       	movw	r4, r22
    4cf2:	3c 01       	movw	r6, r24
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4cf4:	a7 01       	movw	r20, r14
    4cf6:	96 01       	movw	r18, r12
    4cf8:	c7 01       	movw	r24, r14
    4cfa:	b6 01       	movw	r22, r12
    4cfc:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4d00:	4b 01       	movw	r8, r22
    4d02:	5c 01       	movw	r10, r24
    4d04:	a3 01       	movw	r20, r6
    4d06:	92 01       	movw	r18, r4
    4d08:	c3 01       	movw	r24, r6
    4d0a:	b2 01       	movw	r22, r4
    4d0c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4d10:	9b 01       	movw	r18, r22
    4d12:	ac 01       	movw	r20, r24
    4d14:	c5 01       	movw	r24, r10
    4d16:	b4 01       	movw	r22, r8
    4d18:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4d1c:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    4d20:	4b 01       	movw	r8, r22
    4d22:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	a9 01       	movw	r20, r18
    4d2a:	c7 01       	movw	r24, r14
    4d2c:	b6 01       	movw	r22, r12
    4d2e:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    4d32:	18 16       	cp	r1, r24
    4d34:	0c f0       	brlt	.+2      	; 0x4d38 <quest+0x40e>
    4d36:	96 c0       	rjmp	.+300    	; 0x4e64 <quest+0x53a>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4d38:	a7 01       	movw	r20, r14
    4d3a:	96 01       	movw	r18, r12
    4d3c:	c5 01       	movw	r24, r10
    4d3e:	b4 01       	movw	r22, r8
    4d40:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4d44:	6b 01       	movw	r12, r22
    4d46:	7c 01       	movw	r14, r24
    4d48:	a5 01       	movw	r20, r10
    4d4a:	94 01       	movw	r18, r8
    4d4c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4d50:	4b 01       	movw	r8, r22
    4d52:	5c 01       	movw	r10, r24
    4d54:	be 01       	movw	r22, r28
    4d56:	6b 5d       	subi	r22, 0xDB	; 219
    4d58:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	49 96       	adiw	r24, 0x19	; 25
    4d5e:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vector_dot_product>
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	40 e8       	ldi	r20, 0x80	; 128
    4d68:	5f e3       	ldi	r21, 0x3F	; 63
    4d6a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4d6e:	9b 01       	movw	r18, r22
    4d70:	ac 01       	movw	r20, r24
    4d72:	c5 01       	movw	r24, r10
    4d74:	b4 01       	movw	r22, r8
    4d76:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4d7a:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4d86:	9b 01       	movw	r18, r22
    4d88:	ac 01       	movw	r20, r24
    4d8a:	60 e0       	ldi	r22, 0x00	; 0
    4d8c:	70 e0       	ldi	r23, 0x00	; 0
    4d8e:	80 e8       	ldi	r24, 0x80	; 128
    4d90:	9f e3       	ldi	r25, 0x3F	; 63
    4d92:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4d96:	ec 96       	adiw	r28, 0x3c	; 60
    4d98:	6c af       	std	Y+60, r22	; 0x3c
    4d9a:	7d af       	std	Y+61, r23	; 0x3d
    4d9c:	8e af       	std	Y+62, r24	; 0x3e
    4d9e:	9f af       	std	Y+63, r25	; 0x3f
    4da0:	ec 97       	sbiw	r28, 0x3c	; 60
    4da2:	8e 01       	movw	r16, r28
    4da4:	0f 5c       	subi	r16, 0xCF	; 207
    4da6:	1f 4f       	sbci	r17, 0xFF	; 255
    4da8:	1e 01       	movw	r2, r28
    4daa:	fd e3       	ldi	r31, 0x3D	; 61
    4dac:	2f 0e       	add	r2, r31
    4dae:	31 1c       	adc	r3, r1
    4db0:	ce 01       	movw	r24, r28
    4db2:	8f 59       	subi	r24, 0x9F	; 159
    4db4:	9f 4f       	sbci	r25, 0xFF	; 255
    4db6:	e1 96       	adiw	r28, 0x31	; 49
    4db8:	9f af       	std	Y+63, r25	; 0x3f
    4dba:	8e af       	std	Y+62, r24	; 0x3e
    4dbc:	e1 97       	sbiw	r28, 0x31	; 49
    4dbe:	af 96       	adiw	r28, 0x2f	; 47
    4dc0:	3f ae       	std	Y+63, r3	; 0x3f
    4dc2:	2e ae       	std	Y+62, r2	; 0x3e
    4dc4:	af 97       	sbiw	r28, 0x2f	; 47
    4dc6:	e8 96       	adiw	r28, 0x38	; 56
    4dc8:	4c ae       	std	Y+60, r4	; 0x3c
    4dca:	5d ae       	std	Y+61, r5	; 0x3d
    4dcc:	6e ae       	std	Y+62, r6	; 0x3e
    4dce:	7f ae       	std	Y+63, r7	; 0x3f
    4dd0:	e8 97       	sbiw	r28, 0x38	; 56
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4dd2:	f8 01       	movw	r30, r16
    4dd4:	21 91       	ld	r18, Z+
    4dd6:	31 91       	ld	r19, Z+
    4dd8:	41 91       	ld	r20, Z+
    4dda:	51 91       	ld	r21, Z+
    4ddc:	8f 01       	movw	r16, r30
    4dde:	f1 01       	movw	r30, r2
    4de0:	41 90       	ld	r4, Z+
    4de2:	51 90       	ld	r5, Z+
    4de4:	61 90       	ld	r6, Z+
    4de6:	71 90       	ld	r7, Z+
    4de8:	1f 01       	movw	r2, r30
    4dea:	c7 01       	movw	r24, r14
    4dec:	b6 01       	movw	r22, r12
    4dee:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4df2:	4b 01       	movw	r8, r22
    4df4:	5c 01       	movw	r10, r24
    4df6:	e8 96       	adiw	r28, 0x38	; 56
    4df8:	2c ad       	ldd	r18, Y+60	; 0x3c
    4dfa:	3d ad       	ldd	r19, Y+61	; 0x3d
    4dfc:	4e ad       	ldd	r20, Y+62	; 0x3e
    4dfe:	5f ad       	ldd	r21, Y+63	; 0x3f
    4e00:	e8 97       	sbiw	r28, 0x38	; 56
    4e02:	c3 01       	movw	r24, r6
    4e04:	b2 01       	movw	r22, r4
    4e06:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4e0a:	9b 01       	movw	r18, r22
    4e0c:	ac 01       	movw	r20, r24
    4e0e:	c5 01       	movw	r24, r10
    4e10:	b4 01       	movw	r22, r8
    4e12:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4e16:	e1 96       	adiw	r28, 0x31	; 49
    4e18:	ee ad       	ldd	r30, Y+62	; 0x3e
    4e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    4e1c:	e1 97       	sbiw	r28, 0x31	; 49
    4e1e:	61 93       	st	Z+, r22
    4e20:	71 93       	st	Z+, r23
    4e22:	81 93       	st	Z+, r24
    4e24:	91 93       	st	Z+, r25
    4e26:	e1 96       	adiw	r28, 0x31	; 49
    4e28:	ff af       	std	Y+63, r31	; 0x3f
    4e2a:	ee af       	std	Y+62, r30	; 0x3e
    4e2c:	e1 97       	sbiw	r28, 0x31	; 49
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4e2e:	af 96       	adiw	r28, 0x2f	; 47
    4e30:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e32:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e34:	af 97       	sbiw	r28, 0x2f	; 47
    4e36:	08 17       	cp	r16, r24
    4e38:	19 07       	cpc	r17, r25
    4e3a:	59 f6       	brne	.-106    	; 0x4dd2 <quest+0x4a8>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4e3c:	be 01       	movw	r22, r28
    4e3e:	6b 5d       	subi	r22, 0xDB	; 219
    4e40:	7f 4f       	sbci	r23, 0xFF	; 255
    4e42:	ce 01       	movw	r24, r28
    4e44:	49 96       	adiw	r24, 0x19	; 25
    4e46:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vector_dot_product>
    4e4a:	20 e0       	ldi	r18, 0x00	; 0
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	40 e8       	ldi	r20, 0x80	; 128
    4e50:	5f e3       	ldi	r21, 0x3F	; 63
    4e52:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4e56:	9b 01       	movw	r18, r22
    4e58:	ac 01       	movw	r20, r24
    4e5a:	c7 01       	movw	r24, r14
    4e5c:	b6 01       	movw	r22, r12
    4e5e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4e62:	91 c0       	rjmp	.+290    	; 0x4f86 <quest+0x65c>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4e64:	a7 01       	movw	r20, r14
    4e66:	96 01       	movw	r18, r12
    4e68:	c5 01       	movw	r24, r10
    4e6a:	b4 01       	movw	r22, r8
    4e6c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    4e70:	e8 96       	adiw	r28, 0x38	; 56
    4e72:	6c af       	std	Y+60, r22	; 0x3c
    4e74:	7d af       	std	Y+61, r23	; 0x3d
    4e76:	8e af       	std	Y+62, r24	; 0x3e
    4e78:	9f af       	std	Y+63, r25	; 0x3f
    4e7a:	e8 97       	sbiw	r28, 0x38	; 56
    4e7c:	a5 01       	movw	r20, r10
    4e7e:	94 01       	movw	r18, r8
    4e80:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4e84:	6b 01       	movw	r12, r22
    4e86:	7c 01       	movw	r14, r24
    4e88:	be 01       	movw	r22, r28
    4e8a:	6b 5d       	subi	r22, 0xDB	; 219
    4e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8e:	ce 01       	movw	r24, r28
    4e90:	49 96       	adiw	r24, 0x19	; 25
    4e92:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vector_dot_product>
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	40 e8       	ldi	r20, 0x80	; 128
    4e9c:	5f e3       	ldi	r21, 0x3F	; 63
    4e9e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4ea2:	9b 01       	movw	r18, r22
    4ea4:	ac 01       	movw	r20, r24
    4ea6:	c7 01       	movw	r24, r14
    4ea8:	b6 01       	movw	r22, r12
    4eaa:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4eae:	0e 94 90 35 	call	0x6b20	; 0x6b20 <sqrt>
    4eb2:	9b 01       	movw	r18, r22
    4eb4:	ac 01       	movw	r20, r24
    4eb6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4eba:	9b 01       	movw	r18, r22
    4ebc:	ac 01       	movw	r20, r24
    4ebe:	60 e0       	ldi	r22, 0x00	; 0
    4ec0:	70 e0       	ldi	r23, 0x00	; 0
    4ec2:	80 e8       	ldi	r24, 0x80	; 128
    4ec4:	9f e3       	ldi	r25, 0x3F	; 63
    4ec6:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    4eca:	ec 96       	adiw	r28, 0x3c	; 60
    4ecc:	6c af       	std	Y+60, r22	; 0x3c
    4ece:	7d af       	std	Y+61, r23	; 0x3d
    4ed0:	8e af       	std	Y+62, r24	; 0x3e
    4ed2:	9f af       	std	Y+63, r25	; 0x3f
    4ed4:	ec 97       	sbiw	r28, 0x3c	; 60
    4ed6:	8e 01       	movw	r16, r28
    4ed8:	0f 5c       	subi	r16, 0xCF	; 207
    4eda:	1f 4f       	sbci	r17, 0xFF	; 255
    4edc:	1e 01       	movw	r2, r28
    4ede:	9d e3       	ldi	r25, 0x3D	; 61
    4ee0:	29 0e       	add	r2, r25
    4ee2:	31 1c       	adc	r3, r1
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	ef 59       	subi	r30, 0x9F	; 159
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	e1 96       	adiw	r28, 0x31	; 49
    4eec:	ff af       	std	Y+63, r31	; 0x3f
    4eee:	ee af       	std	Y+62, r30	; 0x3e
    4ef0:	e1 97       	sbiw	r28, 0x31	; 49
    4ef2:	af 96       	adiw	r28, 0x2f	; 47
    4ef4:	3f ae       	std	Y+63, r3	; 0x3f
    4ef6:	2e ae       	std	Y+62, r2	; 0x3e
    4ef8:	af 97       	sbiw	r28, 0x2f	; 47
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    4efa:	f8 01       	movw	r30, r16
    4efc:	61 91       	ld	r22, Z+
    4efe:	71 91       	ld	r23, Z+
    4f00:	81 91       	ld	r24, Z+
    4f02:	91 91       	ld	r25, Z+
    4f04:	8f 01       	movw	r16, r30
    4f06:	f1 01       	movw	r30, r2
    4f08:	81 90       	ld	r8, Z+
    4f0a:	91 90       	ld	r9, Z+
    4f0c:	a1 90       	ld	r10, Z+
    4f0e:	b1 90       	ld	r11, Z+
    4f10:	1f 01       	movw	r2, r30
    4f12:	a3 01       	movw	r20, r6
    4f14:	92 01       	movw	r18, r4
    4f16:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4f1a:	6b 01       	movw	r12, r22
    4f1c:	7c 01       	movw	r14, r24
    4f1e:	a5 01       	movw	r20, r10
    4f20:	94 01       	movw	r18, r8
    4f22:	e8 96       	adiw	r28, 0x38	; 56
    4f24:	6c ad       	ldd	r22, Y+60	; 0x3c
    4f26:	7d ad       	ldd	r23, Y+61	; 0x3d
    4f28:	8e ad       	ldd	r24, Y+62	; 0x3e
    4f2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f2c:	e8 97       	sbiw	r28, 0x38	; 56
    4f2e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    4f32:	9b 01       	movw	r18, r22
    4f34:	ac 01       	movw	r20, r24
    4f36:	c7 01       	movw	r24, r14
    4f38:	b6 01       	movw	r22, r12
    4f3a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4f3e:	e1 96       	adiw	r28, 0x31	; 49
    4f40:	ee ad       	ldd	r30, Y+62	; 0x3e
    4f42:	ff ad       	ldd	r31, Y+63	; 0x3f
    4f44:	e1 97       	sbiw	r28, 0x31	; 49
    4f46:	61 93       	st	Z+, r22
    4f48:	71 93       	st	Z+, r23
    4f4a:	81 93       	st	Z+, r24
    4f4c:	91 93       	st	Z+, r25
    4f4e:	e1 96       	adiw	r28, 0x31	; 49
    4f50:	ff af       	std	Y+63, r31	; 0x3f
    4f52:	ee af       	std	Y+62, r30	; 0x3e
    4f54:	e1 97       	sbiw	r28, 0x31	; 49
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4f56:	af 96       	adiw	r28, 0x2f	; 47
    4f58:	8e ad       	ldd	r24, Y+62	; 0x3e
    4f5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f5c:	af 97       	sbiw	r28, 0x2f	; 47
    4f5e:	08 17       	cp	r16, r24
    4f60:	19 07       	cpc	r17, r25
    4f62:	59 f6       	brne	.-106    	; 0x4efa <quest+0x5d0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4f64:	be 01       	movw	r22, r28
    4f66:	6b 5d       	subi	r22, 0xDB	; 219
    4f68:	7f 4f       	sbci	r23, 0xFF	; 255
    4f6a:	ce 01       	movw	r24, r28
    4f6c:	49 96       	adiw	r24, 0x19	; 25
    4f6e:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vector_dot_product>
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	40 e8       	ldi	r20, 0x80	; 128
    4f78:	5f e3       	ldi	r21, 0x3F	; 63
    4f7a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    4f7e:	a3 01       	movw	r20, r6
    4f80:	92 01       	movw	r18, r4
    4f82:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    4f86:	a5 96       	adiw	r28, 0x25	; 37
    4f88:	0c ad       	ldd	r16, Y+60	; 0x3c
    4f8a:	1d ad       	ldd	r17, Y+61	; 0x3d
    4f8c:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f8e:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f90:	a5 97       	sbiw	r28, 0x25	; 37
    4f92:	e3 96       	adiw	r28, 0x33	; 51
    4f94:	ee ad       	ldd	r30, Y+62	; 0x3e
    4f96:	ff ad       	ldd	r31, Y+63	; 0x3f
    4f98:	e3 97       	sbiw	r28, 0x33	; 51
    4f9a:	00 83       	st	Z, r16
    4f9c:	11 83       	std	Z+1, r17	; 0x01
    4f9e:	22 83       	std	Z+2, r18	; 0x02
    4fa0:	33 83       	std	Z+3, r19	; 0x03
    4fa2:	a9 96       	adiw	r28, 0x29	; 41
    4fa4:	0c ad       	ldd	r16, Y+60	; 0x3c
    4fa6:	1d ad       	ldd	r17, Y+61	; 0x3d
    4fa8:	2e ad       	ldd	r18, Y+62	; 0x3e
    4faa:	3f ad       	ldd	r19, Y+63	; 0x3f
    4fac:	a9 97       	sbiw	r28, 0x29	; 41
    4fae:	04 83       	std	Z+4, r16	; 0x04
    4fb0:	15 83       	std	Z+5, r17	; 0x05
    4fb2:	26 83       	std	Z+6, r18	; 0x06
    4fb4:	37 83       	std	Z+7, r19	; 0x07
    4fb6:	ad 96       	adiw	r28, 0x2d	; 45
    4fb8:	0c ad       	ldd	r16, Y+60	; 0x3c
    4fba:	1d ad       	ldd	r17, Y+61	; 0x3d
    4fbc:	2e ad       	ldd	r18, Y+62	; 0x3e
    4fbe:	3f ad       	ldd	r19, Y+63	; 0x3f
    4fc0:	ad 97       	sbiw	r28, 0x2d	; 45
    4fc2:	00 87       	std	Z+8, r16	; 0x08
    4fc4:	11 87       	std	Z+9, r17	; 0x09
    4fc6:	22 87       	std	Z+10, r18	; 0x0a
    4fc8:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    4fca:	64 87       	std	Z+12, r22	; 0x0c
    4fcc:	75 87       	std	Z+13, r23	; 0x0d
    4fce:	86 87       	std	Z+14, r24	; 0x0e
    4fd0:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    4fd2:	ec 96       	adiw	r28, 0x3c	; 60
    4fd4:	4c ad       	ldd	r20, Y+60	; 0x3c
    4fd6:	5d ad       	ldd	r21, Y+61	; 0x3d
    4fd8:	6e ad       	ldd	r22, Y+62	; 0x3e
    4fda:	7f ad       	ldd	r23, Y+63	; 0x3f
    4fdc:	ec 97       	sbiw	r28, 0x3c	; 60
    4fde:	cf 01       	movw	r24, r30
    4fe0:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <scalar_into_quaternion>
    4fe4:	7d c0       	rjmp	.+250    	; 0x50e0 <quest+0x7b6>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    4fe6:	e3 96       	adiw	r28, 0x33	; 51
    4fe8:	ee ad       	ldd	r30, Y+62	; 0x3e
    4fea:	ff ad       	ldd	r31, Y+63	; 0x3f
    4fec:	e3 97       	sbiw	r28, 0x33	; 51
    4fee:	10 82       	st	Z, r1
    4ff0:	11 82       	std	Z+1, r1	; 0x01
    4ff2:	12 82       	std	Z+2, r1	; 0x02
    4ff4:	13 82       	std	Z+3, r1	; 0x03
    4ff6:	14 82       	std	Z+4, r1	; 0x04
    4ff8:	15 82       	std	Z+5, r1	; 0x05
    4ffa:	16 82       	std	Z+6, r1	; 0x06
    4ffc:	17 82       	std	Z+7, r1	; 0x07
    4ffe:	10 86       	std	Z+8, r1	; 0x08
    5000:	11 86       	std	Z+9, r1	; 0x09
    5002:	12 86       	std	Z+10, r1	; 0x0a
    5004:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	a0 e8       	ldi	r26, 0x80	; 128
    500c:	bf e3       	ldi	r27, 0x3F	; 63
    500e:	84 87       	std	Z+12, r24	; 0x0c
    5010:	95 87       	std	Z+13, r25	; 0x0d
    5012:	a6 87       	std	Z+14, r26	; 0x0e
    5014:	b7 87       	std	Z+15, r27	; 0x0f
    5016:	64 c0       	rjmp	.+200    	; 0x50e0 <quest+0x7b6>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5018:	c0 90 fc 04 	lds	r12, 0x04FC
    501c:	d0 90 fd 04 	lds	r13, 0x04FD
    5020:	e0 90 fe 04 	lds	r14, 0x04FE
    5024:	f0 90 ff 04 	lds	r15, 0x04FF
    5028:	80 90 00 05 	lds	r8, 0x0500
    502c:	90 90 01 05 	lds	r9, 0x0501
    5030:	a0 90 02 05 	lds	r10, 0x0502
    5034:	b0 90 03 05 	lds	r11, 0x0503
    5038:	a5 01       	movw	r20, r10
    503a:	94 01       	movw	r18, r8
    503c:	c7 01       	movw	r24, r14
    503e:	b6 01       	movw	r22, r12
    5040:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    5044:	18 16       	cp	r1, r24
    5046:	4c f0       	brlt	.+18     	; 0x505a <quest+0x730>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5048:	b7 fa       	bst	r11, 7
    504a:	b0 94       	com	r11
    504c:	b7 f8       	bld	r11, 7
    504e:	b0 94       	com	r11
    5050:	89 82       	std	Y+1, r8	; 0x01
    5052:	9a 82       	std	Y+2, r9	; 0x02
    5054:	ab 82       	std	Y+3, r10	; 0x03
    5056:	bc 82       	std	Y+4, r11	; 0x04
    5058:	04 c0       	rjmp	.+8      	; 0x5062 <quest+0x738>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    505a:	c9 82       	std	Y+1, r12	; 0x01
    505c:	da 82       	std	Y+2, r13	; 0x02
    505e:	eb 82       	std	Y+3, r14	; 0x03
    5060:	fc 82       	std	Y+4, r15	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    5062:	c0 90 04 05 	lds	r12, 0x0504
    5066:	d0 90 05 05 	lds	r13, 0x0505
    506a:	e0 90 06 05 	lds	r14, 0x0506
    506e:	f0 90 07 05 	lds	r15, 0x0507
    5072:	80 90 08 05 	lds	r8, 0x0508
    5076:	90 90 09 05 	lds	r9, 0x0509
    507a:	a0 90 0a 05 	lds	r10, 0x050A
    507e:	b0 90 0b 05 	lds	r11, 0x050B
    5082:	a5 01       	movw	r20, r10
    5084:	94 01       	movw	r18, r8
    5086:	c7 01       	movw	r24, r14
    5088:	b6 01       	movw	r22, r12
    508a:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    508e:	18 16       	cp	r1, r24
    5090:	4c f0       	brlt	.+18     	; 0x50a4 <quest+0x77a>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    5092:	b7 fa       	bst	r11, 7
    5094:	b0 94       	com	r11
    5096:	b7 f8       	bld	r11, 7
    5098:	b0 94       	com	r11
    509a:	8d 82       	std	Y+5, r8	; 0x05
    509c:	9e 82       	std	Y+6, r9	; 0x06
    509e:	af 82       	std	Y+7, r10	; 0x07
    50a0:	b8 86       	std	Y+8, r11	; 0x08
    50a2:	04 c0       	rjmp	.+8      	; 0x50ac <quest+0x782>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    50a4:	cd 82       	std	Y+5, r12	; 0x05
    50a6:	de 82       	std	Y+6, r13	; 0x06
    50a8:	ef 82       	std	Y+7, r14	; 0x07
    50aa:	f8 86       	std	Y+8, r15	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    50ac:	80 90 0c 05 	lds	r8, 0x050C
    50b0:	90 90 0d 05 	lds	r9, 0x050D
    50b4:	a0 90 0e 05 	lds	r10, 0x050E
    50b8:	b0 90 0f 05 	lds	r11, 0x050F
    50bc:	c0 90 10 05 	lds	r12, 0x0510
    50c0:	d0 90 11 05 	lds	r13, 0x0511
    50c4:	e0 90 12 05 	lds	r14, 0x0512
    50c8:	f0 90 13 05 	lds	r15, 0x0513
    50cc:	a7 01       	movw	r20, r14
    50ce:	96 01       	movw	r18, r12
    50d0:	c5 01       	movw	r24, r10
    50d2:	b4 01       	movw	r22, r8
    50d4:	0e 94 cc 34 	call	0x6998	; 0x6998 <__gesf2>
    50d8:	18 16       	cp	r1, r24
    50da:	0c f4       	brge	.+2      	; 0x50de <quest+0x7b4>
    50dc:	94 cc       	rjmp	.-1752   	; 0x4a06 <quest+0xdc>
    50de:	98 cc       	rjmp	.-1744   	; 0x4a10 <quest+0xe6>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    50e0:	e4 96       	adiw	r28, 0x34	; 52
    50e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    50e4:	e4 97       	sbiw	r28, 0x34	; 52
    50e6:	f0 93 12 01 	sts	0x0112, r31
 
  return light;
   
}
    50ea:	8f 2f       	mov	r24, r31
    50ec:	c5 58       	subi	r28, 0x85	; 133
    50ee:	df 4f       	sbci	r29, 0xFF	; 255
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	de bf       	out	0x3e, r29	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	cd bf       	out	0x3d, r28	; 61
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	1f 91       	pop	r17
    5100:	0f 91       	pop	r16
    5102:	ff 90       	pop	r15
    5104:	ef 90       	pop	r14
    5106:	df 90       	pop	r13
    5108:	cf 90       	pop	r12
    510a:	bf 90       	pop	r11
    510c:	af 90       	pop	r10
    510e:	9f 90       	pop	r9
    5110:	8f 90       	pop	r8
    5112:	7f 90       	pop	r7
    5114:	6f 90       	pop	r6
    5116:	5f 90       	pop	r5
    5118:	4f 90       	pop	r4
    511a:	3f 90       	pop	r3
    511c:	2f 90       	pop	r2
    511e:	08 95       	ret

00005120 <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    5120:	2f 92       	push	r2
    5122:	3f 92       	push	r3
    5124:	4f 92       	push	r4
    5126:	5f 92       	push	r5
    5128:	6f 92       	push	r6
    512a:	7f 92       	push	r7
    512c:	8f 92       	push	r8
    512e:	9f 92       	push	r9
    5130:	af 92       	push	r10
    5132:	bf 92       	push	r11
    5134:	cf 92       	push	r12
    5136:	df 92       	push	r13
    5138:	ef 92       	push	r14
    513a:	ff 92       	push	r15
    513c:	0f 93       	push	r16
    513e:	1f 93       	push	r17
    5140:	cf 93       	push	r28
    5142:	df 93       	push	r29
    5144:	cd b7       	in	r28, 0x3d	; 61
    5146:	de b7       	in	r29, 0x3e	; 62
    5148:	c6 5c       	subi	r28, 0xC6	; 198
    514a:	d1 09       	sbc	r29, r1
    514c:	0f b6       	in	r0, 0x3f	; 63
    514e:	f8 94       	cli
    5150:	de bf       	out	0x3e, r29	; 62
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	cd bf       	out	0x3d, r28	; 61
    5156:	cd 53       	subi	r28, 0x3D	; 61
    5158:	df 4f       	sbci	r29, 0xFF	; 255
    515a:	88 83       	st	Y, r24
    515c:	c3 5c       	subi	r28, 0xC3	; 195
    515e:	d0 40       	sbci	r29, 0x00	; 0
    5160:	cc 53       	subi	r28, 0x3C	; 60
    5162:	df 4f       	sbci	r29, 0xFF	; 255
    5164:	98 83       	st	Y, r25
    5166:	c4 5c       	subi	r28, 0xC4	; 196
    5168:	d0 40       	sbci	r29, 0x00	; 0
    516a:	cb 53       	subi	r28, 0x3B	; 59
    516c:	df 4f       	sbci	r29, 0xFF	; 255
    516e:	68 83       	st	Y, r22
    5170:	c5 5c       	subi	r28, 0xC5	; 197
    5172:	d0 40       	sbci	r29, 0x00	; 0
    5174:	ca 53       	subi	r28, 0x3A	; 58
    5176:	df 4f       	sbci	r29, 0xFF	; 255
    5178:	78 83       	st	Y, r23
    517a:	c6 5c       	subi	r28, 0xC6	; 198
    517c:	d0 40       	sbci	r29, 0x00	; 0
    517e:	e8 2e       	mov	r14, r24
    5180:	f9 2e       	mov	r15, r25
    5182:	0e e6       	ldi	r16, 0x6E	; 110
    5184:	14 e0       	ldi	r17, 0x04	; 4
    5186:	9e 01       	movw	r18, r28
    5188:	2f 5e       	subi	r18, 0xEF	; 239
    518a:	3f 4f       	sbci	r19, 0xFF	; 255
    518c:	19 01       	movw	r2, r18
    518e:	ce 01       	movw	r24, r28
    5190:	01 96       	adiw	r24, 0x01	; 1
    5192:	6c 01       	movw	r12, r24
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    5194:	d7 01       	movw	r26, r14
    5196:	8d 90       	ld	r8, X+
    5198:	9d 90       	ld	r9, X+
    519a:	ad 90       	ld	r10, X+
    519c:	bd 90       	ld	r11, X+
    519e:	7d 01       	movw	r14, r26
    51a0:	f8 01       	movw	r30, r16
    51a2:	41 90       	ld	r4, Z+
    51a4:	51 90       	ld	r5, Z+
    51a6:	61 90       	ld	r6, Z+
    51a8:	71 90       	ld	r7, Z+
    51aa:	8f 01       	movw	r16, r30
    51ac:	a3 01       	movw	r20, r6
    51ae:	92 01       	movw	r18, r4
    51b0:	c5 01       	movw	r24, r10
    51b2:	b4 01       	movw	r22, r8
    51b4:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__subsf3>
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	5f e3       	ldi	r21, 0x3F	; 63
    51c0:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    51c4:	d6 01       	movw	r26, r12
    51c6:	6d 93       	st	X+, r22
    51c8:	7d 93       	st	X+, r23
    51ca:	8d 93       	st	X+, r24
    51cc:	9d 93       	st	X+, r25
    51ce:	6d 01       	movw	r12, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    51d0:	a3 01       	movw	r20, r6
    51d2:	92 01       	movw	r18, r4
    51d4:	c5 01       	movw	r24, r10
    51d6:	b4 01       	movw	r22, r8
    51d8:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    51dc:	20 e0       	ldi	r18, 0x00	; 0
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	40 e0       	ldi	r20, 0x00	; 0
    51e2:	5f e3       	ldi	r21, 0x3F	; 63
    51e4:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    51e8:	f1 01       	movw	r30, r2
    51ea:	61 93       	st	Z+, r22
    51ec:	71 93       	st	Z+, r23
    51ee:	81 93       	st	Z+, r24
    51f0:	91 93       	st	Z+, r25
    51f2:	1f 01       	movw	r2, r30
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    51f4:	f4 e0       	ldi	r31, 0x04	; 4
    51f6:	0e 37       	cpi	r16, 0x7E	; 126
    51f8:	1f 07       	cpc	r17, r31
    51fa:	61 f6       	brne	.-104    	; 0x5194 <omega_estimation+0x74>
    51fc:	9e 01       	movw	r18, r28
    51fe:	23 5d       	subi	r18, 0xD3	; 211
    5200:	3f 4f       	sbci	r19, 0xFF	; 255
    5202:	8e 01       	movw	r16, r28
    5204:	0f 5d       	subi	r16, 0xDF	; 223
    5206:	1f 4f       	sbci	r17, 0xFF	; 255
    5208:	ae 01       	movw	r20, r28
    520a:	43 5f       	subi	r20, 0xF3	; 243
    520c:	5f 4f       	sbci	r21, 0xFF	; 255
    520e:	c8 01       	movw	r24, r16
    5210:	de 01       	movw	r26, r28
    5212:	51 96       	adiw	r26, 0x11	; 17
    5214:	fe 01       	movw	r30, r28
    5216:	31 96       	adiw	r30, 0x01	; 1
    5218:	bd 01       	movw	r22, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    521a:	c1 90       	ld	r12, Z+
    521c:	d1 90       	ld	r13, Z+
    521e:	e1 90       	ld	r14, Z+
    5220:	f1 90       	ld	r15, Z+
    5222:	d9 01       	movw	r26, r18
    5224:	cd 92       	st	X+, r12
    5226:	dd 92       	st	X+, r13
    5228:	ed 92       	st	X+, r14
    522a:	fd 92       	st	X+, r15
    522c:	9d 01       	movw	r18, r26
    e[i] = q[i];
    522e:	db 01       	movw	r26, r22
    5230:	cd 90       	ld	r12, X+
    5232:	dd 90       	ld	r13, X+
    5234:	ed 90       	ld	r14, X+
    5236:	fd 90       	ld	r15, X+
    5238:	bd 01       	movw	r22, r26
    523a:	dc 01       	movw	r26, r24
    523c:	cd 92       	st	X+, r12
    523e:	dd 92       	st	X+, r13
    5240:	ed 92       	st	X+, r14
    5242:	fd 92       	st	X+, r15
    5244:	cd 01       	movw	r24, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    5246:	e4 17       	cp	r30, r20
    5248:	f5 07       	cpc	r31, r21
    524a:	39 f7       	brne	.-50     	; 0x521a <omega_estimation+0xfa>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    524c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    524e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5250:	af 8d       	ldd	r26, Y+31	; 0x1f
    5252:	b8 a1       	ldd	r27, Y+32	; 0x20
    5254:	c7 54       	subi	r28, 0x47	; 71
    5256:	df 4f       	sbci	r29, 0xFF	; 255
    5258:	88 83       	st	Y, r24
    525a:	99 83       	std	Y+1, r25	; 0x01
    525c:	aa 83       	std	Y+2, r26	; 0x02
    525e:	bb 83       	std	Y+3, r27	; 0x03
    5260:	c9 5b       	subi	r28, 0xB9	; 185
    5262:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5264:	ad 96       	adiw	r28, 0x2d	; 45
    5266:	1c ae       	std	Y+60, r1	; 0x3c
    5268:	1d ae       	std	Y+61, r1	; 0x3d
    526a:	1e ae       	std	Y+62, r1	; 0x3e
    526c:	1f ae       	std	Y+63, r1	; 0x3f
    526e:	ad 97       	sbiw	r28, 0x2d	; 45
    5270:	c9 a4       	ldd	r12, Y+41	; 0x29
    5272:	da a4       	ldd	r13, Y+42	; 0x2a
    5274:	eb a4       	ldd	r14, Y+43	; 0x2b
    5276:	fc a4       	ldd	r15, Y+44	; 0x2c
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	40 e0       	ldi	r20, 0x00	; 0
    527e:	50 ec       	ldi	r21, 0xC0	; 192
    5280:	c7 01       	movw	r24, r14
    5282:	b6 01       	movw	r22, r12
    5284:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    5288:	e1 96       	adiw	r28, 0x31	; 49
    528a:	6c af       	std	Y+60, r22	; 0x3c
    528c:	7d af       	std	Y+61, r23	; 0x3d
    528e:	8e af       	std	Y+62, r24	; 0x3e
    5290:	9f af       	std	Y+63, r25	; 0x3f
    5292:	e1 97       	sbiw	r28, 0x31	; 49
    5294:	8d a0       	ldd	r8, Y+37	; 0x25
    5296:	9e a0       	ldd	r9, Y+38	; 0x26
    5298:	af a0       	ldd	r10, Y+39	; 0x27
    529a:	b8 a4       	ldd	r11, Y+40	; 0x28
    529c:	a5 01       	movw	r20, r10
    529e:	94 01       	movw	r18, r8
    52a0:	c5 01       	movw	r24, r10
    52a2:	b4 01       	movw	r22, r8
    52a4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    52a8:	e5 96       	adiw	r28, 0x35	; 53
    52aa:	6c af       	std	Y+60, r22	; 0x3c
    52ac:	7d af       	std	Y+61, r23	; 0x3d
    52ae:	8e af       	std	Y+62, r24	; 0x3e
    52b0:	9f af       	std	Y+63, r25	; 0x3f
    52b2:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    52b4:	a7 01       	movw	r20, r14
    52b6:	96 01       	movw	r18, r12
    52b8:	c7 01       	movw	r24, r14
    52ba:	b6 01       	movw	r22, r12
    52bc:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    52c0:	e9 96       	adiw	r28, 0x39	; 57
    52c2:	6c af       	std	Y+60, r22	; 0x3c
    52c4:	7d af       	std	Y+61, r23	; 0x3d
    52c6:	8e af       	std	Y+62, r24	; 0x3e
    52c8:	9f af       	std	Y+63, r25	; 0x3f
    52ca:	e9 97       	sbiw	r28, 0x39	; 57
    52cc:	ed 96       	adiw	r28, 0x3d	; 61
    52ce:	1c ae       	std	Y+60, r1	; 0x3c
    52d0:	1d ae       	std	Y+61, r1	; 0x3d
    52d2:	1e ae       	std	Y+62, r1	; 0x3e
    52d4:	1f ae       	std	Y+63, r1	; 0x3f
    52d6:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    52d8:	c9 a0       	ldd	r12, Y+33	; 0x21
    52da:	da a0       	ldd	r13, Y+34	; 0x22
    52dc:	eb a0       	ldd	r14, Y+35	; 0x23
    52de:	fc a0       	ldd	r15, Y+36	; 0x24
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	40 e0       	ldi	r20, 0x00	; 0
    52e6:	50 ec       	ldi	r21, 0xC0	; 192
    52e8:	c7 01       	movw	r24, r14
    52ea:	b6 01       	movw	r22, r12
    52ec:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    52f0:	c3 58       	subi	r28, 0x83	; 131
    52f2:	df 4f       	sbci	r29, 0xFF	; 255
    52f4:	68 83       	st	Y, r22
    52f6:	79 83       	std	Y+1, r23	; 0x01
    52f8:	8a 83       	std	Y+2, r24	; 0x02
    52fa:	9b 83       	std	Y+3, r25	; 0x03
    52fc:	cd 57       	subi	r28, 0x7D	; 125
    52fe:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	40 e0       	ldi	r20, 0x00	; 0
    5306:	50 ec       	ldi	r21, 0xC0	; 192
    5308:	c5 01       	movw	r24, r10
    530a:	b4 01       	movw	r22, r8
    530c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5310:	cf 57       	subi	r28, 0x7F	; 127
    5312:	df 4f       	sbci	r29, 0xFF	; 255
    5314:	68 83       	st	Y, r22
    5316:	79 83       	std	Y+1, r23	; 0x01
    5318:	8a 83       	std	Y+2, r24	; 0x02
    531a:	9b 83       	std	Y+3, r25	; 0x03
    531c:	c1 58       	subi	r28, 0x81	; 129
    531e:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5320:	a7 01       	movw	r20, r14
    5322:	96 01       	movw	r18, r12
    5324:	c7 01       	movw	r24, r14
    5326:	b6 01       	movw	r22, r12
    5328:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    532c:	cb 57       	subi	r28, 0x7B	; 123
    532e:	df 4f       	sbci	r29, 0xFF	; 255
    5330:	68 83       	st	Y, r22
    5332:	79 83       	std	Y+1, r23	; 0x01
    5334:	8a 83       	std	Y+2, r24	; 0x02
    5336:	9b 83       	std	Y+3, r25	; 0x03
    5338:	c5 58       	subi	r28, 0x85	; 133
    533a:	d0 40       	sbci	r29, 0x00	; 0
    533c:	c7 57       	subi	r28, 0x77	; 119
    533e:	df 4f       	sbci	r29, 0xFF	; 255
    5340:	18 82       	st	Y, r1
    5342:	19 82       	std	Y+1, r1	; 0x01
    5344:	1a 82       	std	Y+2, r1	; 0x02
    5346:	1b 82       	std	Y+3, r1	; 0x03
    5348:	c9 58       	subi	r28, 0x89	; 137
    534a:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    534c:	c7 54       	subi	r28, 0x47	; 71
    534e:	df 4f       	sbci	r29, 0xFF	; 255
    5350:	28 81       	ld	r18, Y
    5352:	39 81       	ldd	r19, Y+1	; 0x01
    5354:	4a 81       	ldd	r20, Y+2	; 0x02
    5356:	5b 81       	ldd	r21, Y+3	; 0x03
    5358:	c9 5b       	subi	r28, 0xB9	; 185
    535a:	d0 40       	sbci	r29, 0x00	; 0
    535c:	ca 01       	movw	r24, r20
    535e:	b9 01       	movw	r22, r18
    5360:	0e 94 d5 31 	call	0x63aa	; 0x63aa <__addsf3>
    5364:	c3 57       	subi	r28, 0x73	; 115
    5366:	df 4f       	sbci	r29, 0xFF	; 255
    5368:	68 83       	st	Y, r22
    536a:	79 83       	std	Y+1, r23	; 0x01
    536c:	8a 83       	std	Y+2, r24	; 0x02
    536e:	9b 83       	std	Y+3, r25	; 0x03
    5370:	cd 58       	subi	r28, 0x8D	; 141
    5372:	d0 40       	sbci	r29, 0x00	; 0
    5374:	cf 56       	subi	r28, 0x6F	; 111
    5376:	df 4f       	sbci	r29, 0xFF	; 255
    5378:	18 82       	st	Y, r1
    537a:	19 82       	std	Y+1, r1	; 0x01
    537c:	1a 82       	std	Y+2, r1	; 0x02
    537e:	1b 82       	std	Y+3, r1	; 0x03
    5380:	c1 59       	subi	r28, 0x91	; 145
    5382:	d0 40       	sbci	r29, 0x00	; 0
    5384:	cb 56       	subi	r28, 0x6B	; 107
    5386:	df 4f       	sbci	r29, 0xFF	; 255
    5388:	18 82       	st	Y, r1
    538a:	19 82       	std	Y+1, r1	; 0x01
    538c:	1a 82       	std	Y+2, r1	; 0x02
    538e:	1b 82       	std	Y+3, r1	; 0x03
    5390:	c5 59       	subi	r28, 0x95	; 149
    5392:	d0 40       	sbci	r29, 0x00	; 0
    5394:	c7 56       	subi	r28, 0x67	; 103
    5396:	df 4f       	sbci	r29, 0xFF	; 255
    5398:	18 82       	st	Y, r1
    539a:	19 82       	std	Y+1, r1	; 0x01
    539c:	1a 82       	std	Y+2, r1	; 0x02
    539e:	1b 82       	std	Y+3, r1	; 0x03
    53a0:	c9 59       	subi	r28, 0x99	; 153
    53a2:	d0 40       	sbci	r29, 0x00	; 0
    53a4:	c3 56       	subi	r28, 0x63	; 99
    53a6:	df 4f       	sbci	r29, 0xFF	; 255
    53a8:	68 83       	st	Y, r22
    53aa:	79 83       	std	Y+1, r23	; 0x01
    53ac:	8a 83       	std	Y+2, r24	; 0x02
    53ae:	9b 83       	std	Y+3, r25	; 0x03
    53b0:	cd 59       	subi	r28, 0x9D	; 157
    53b2:	d0 40       	sbci	r29, 0x00	; 0
    53b4:	cf 55       	subi	r28, 0x5F	; 95
    53b6:	df 4f       	sbci	r29, 0xFF	; 255
    53b8:	18 82       	st	Y, r1
    53ba:	19 82       	std	Y+1, r1	; 0x01
    53bc:	1a 82       	std	Y+2, r1	; 0x02
    53be:	1b 82       	std	Y+3, r1	; 0x03
    53c0:	c1 5a       	subi	r28, 0xA1	; 161
    53c2:	d0 40       	sbci	r29, 0x00	; 0
    53c4:	cb 55       	subi	r28, 0x5B	; 91
    53c6:	df 4f       	sbci	r29, 0xFF	; 255
    53c8:	18 82       	st	Y, r1
    53ca:	19 82       	std	Y+1, r1	; 0x01
    53cc:	1a 82       	std	Y+2, r1	; 0x02
    53ce:	1b 82       	std	Y+3, r1	; 0x03
    53d0:	c5 5a       	subi	r28, 0xA5	; 165
    53d2:	d0 40       	sbci	r29, 0x00	; 0
    53d4:	c7 55       	subi	r28, 0x57	; 87
    53d6:	df 4f       	sbci	r29, 0xFF	; 255
    53d8:	18 82       	st	Y, r1
    53da:	19 82       	std	Y+1, r1	; 0x01
    53dc:	1a 82       	std	Y+2, r1	; 0x02
    53de:	1b 82       	std	Y+3, r1	; 0x03
    53e0:	c9 5a       	subi	r28, 0xA9	; 169
    53e2:	d0 40       	sbci	r29, 0x00	; 0
    53e4:	c3 55       	subi	r28, 0x53	; 83
    53e6:	df 4f       	sbci	r29, 0xFF	; 255
    53e8:	68 83       	st	Y, r22
    53ea:	79 83       	std	Y+1, r23	; 0x01
    53ec:	8a 83       	std	Y+2, r24	; 0x02
    53ee:	9b 83       	std	Y+3, r25	; 0x03
    53f0:	cd 5a       	subi	r28, 0xAD	; 173
    53f2:	d0 40       	sbci	r29, 0x00	; 0
    53f4:	de 01       	movw	r26, r28
    53f6:	ab 5b       	subi	r26, 0xBB	; 187
    53f8:	bf 4f       	sbci	r27, 0xFF	; 255
    53fa:	c3 54       	subi	r28, 0x43	; 67
    53fc:	df 4f       	sbci	r29, 0xFF	; 255
    53fe:	b9 83       	std	Y+1, r27	; 0x01
    5400:	a8 83       	st	Y, r26
    5402:	cd 5b       	subi	r28, 0xBD	; 189
    5404:	d0 40       	sbci	r29, 0x00	; 0
    5406:	c1 54       	subi	r28, 0x41	; 65
    5408:	df 4f       	sbci	r29, 0xFF	; 255
    540a:	19 83       	std	Y+1, r17	; 0x01
    540c:	08 83       	st	Y, r16
    540e:	cf 5b       	subi	r28, 0xBF	; 191
    5410:	d0 40       	sbci	r29, 0x00	; 0
    5412:	c9 54       	subi	r28, 0x49	; 73
    5414:	df 4f       	sbci	r29, 0xFF	; 255
    5416:	19 82       	std	Y+1, r1	; 0x01
    5418:	18 82       	st	Y, r1
    541a:	c7 5b       	subi	r28, 0xB7	; 183
    541c:	d0 40       	sbci	r29, 0x00	; 0
    541e:	fe 01       	movw	r30, r28
    5420:	bd 96       	adiw	r30, 0x2d	; 45
    5422:	cf 54       	subi	r28, 0x4F	; 79
    5424:	df 4f       	sbci	r29, 0xFF	; 255
    5426:	f9 83       	std	Y+1, r31	; 0x01
    5428:	e8 83       	st	Y, r30
    542a:	c1 5b       	subi	r28, 0xB1	; 177
    542c:	d0 40       	sbci	r29, 0x00	; 0
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    542e:	cf 53       	subi	r28, 0x3F	; 63
    5430:	df 4f       	sbci	r29, 0xFF	; 255
    5432:	08 83       	st	Y, r16
    5434:	c1 5c       	subi	r28, 0xC1	; 193
    5436:	d0 40       	sbci	r29, 0x00	; 0
    5438:	ce 53       	subi	r28, 0x3E	; 62
    543a:	df 4f       	sbci	r29, 0xFF	; 255
    543c:	18 83       	st	Y, r17
    543e:	c2 5c       	subi	r28, 0xC2	; 194
    5440:	d0 40       	sbci	r29, 0x00	; 0
    5442:	6c c0       	rjmp	.+216    	; 0x551c <omega_estimation+0x3fc>
    5444:	cd 54       	subi	r28, 0x4D	; 77
    5446:	df 4f       	sbci	r29, 0xFF	; 255
    5448:	a8 81       	ld	r26, Y
    544a:	b9 81       	ldd	r27, Y+1	; 0x01
    544c:	c3 5b       	subi	r28, 0xB3	; 179
    544e:	d0 40       	sbci	r29, 0x00	; 0
    5450:	6d 91       	ld	r22, X+
    5452:	7d 91       	ld	r23, X+
    5454:	8d 91       	ld	r24, X+
    5456:	9d 91       	ld	r25, X+
    5458:	cd 54       	subi	r28, 0x4D	; 77
    545a:	df 4f       	sbci	r29, 0xFF	; 255
    545c:	b9 83       	std	Y+1, r27	; 0x01
    545e:	a8 83       	st	Y, r26
    5460:	c3 5b       	subi	r28, 0xB3	; 179
    5462:	d0 40       	sbci	r29, 0x00	; 0
    5464:	cb 54       	subi	r28, 0x4B	; 75
    5466:	df 4f       	sbci	r29, 0xFF	; 255
    5468:	e8 81       	ld	r30, Y
    546a:	f9 81       	ldd	r31, Y+1	; 0x01
    546c:	c5 5b       	subi	r28, 0xB5	; 181
    546e:	d0 40       	sbci	r29, 0x00	; 0
    5470:	21 91       	ld	r18, Z+
    5472:	31 91       	ld	r19, Z+
    5474:	41 91       	ld	r20, Z+
    5476:	51 91       	ld	r21, Z+
    5478:	cb 54       	subi	r28, 0x4B	; 75
    547a:	df 4f       	sbci	r29, 0xFF	; 255
    547c:	f9 83       	std	Y+1, r31	; 0x01
    547e:	e8 83       	st	Y, r30
    5480:	c5 5b       	subi	r28, 0xB5	; 181
    5482:	d0 40       	sbci	r29, 0x00	; 0
    5484:	d1 01       	movw	r26, r2
    5486:	4d 90       	ld	r4, X+
    5488:	5d 90       	ld	r5, X+
    548a:	6d 90       	ld	r6, X+
    548c:	7d 90       	ld	r7, X+
    548e:	1d 01       	movw	r2, r26
    5490:	8b d7       	rcall	.+3862   	; 0x63a8 <__subsf3>
    5492:	6b 01       	movw	r12, r22
    5494:	7c 01       	movw	r14, r24
    5496:	a3 01       	movw	r20, r6
    5498:	92 01       	movw	r18, r4
    549a:	c5 01       	movw	r24, r10
    549c:	b4 01       	movw	r22, r8
    549e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    54a2:	c7 54       	subi	r28, 0x47	; 71
    54a4:	df 4f       	sbci	r29, 0xFF	; 255
    54a6:	28 81       	ld	r18, Y
    54a8:	39 81       	ldd	r19, Y+1	; 0x01
    54aa:	4a 81       	ldd	r20, Y+2	; 0x02
    54ac:	5b 81       	ldd	r21, Y+3	; 0x03
    54ae:	c9 5b       	subi	r28, 0xB9	; 185
    54b0:	d0 40       	sbci	r29, 0x00	; 0
    54b2:	0e 94 b9 32 	call	0x6572	; 0x6572 <__divsf3>
    54b6:	9b 01       	movw	r18, r22
    54b8:	ac 01       	movw	r20, r24
    54ba:	c7 01       	movw	r24, r14
    54bc:	b6 01       	movw	r22, r12
    54be:	75 d7       	rcall	.+3818   	; 0x63aa <__addsf3>
    54c0:	f8 01       	movw	r30, r16
    54c2:	60 83       	st	Z, r22
    54c4:	71 83       	std	Z+1, r23	; 0x01
    54c6:	82 83       	std	Z+2, r24	; 0x02
    54c8:	93 83       	std	Z+3, r25	; 0x03
    54ca:	04 5f       	subi	r16, 0xF4	; 244
    54cc:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    54ce:	cf 54       	subi	r28, 0x4F	; 79
    54d0:	df 4f       	sbci	r29, 0xFF	; 255
    54d2:	28 81       	ld	r18, Y
    54d4:	39 81       	ldd	r19, Y+1	; 0x01
    54d6:	c1 5b       	subi	r28, 0xB1	; 177
    54d8:	d0 40       	sbci	r29, 0x00	; 0
    54da:	22 16       	cp	r2, r18
    54dc:	33 06       	cpc	r3, r19
    54de:	09 f0       	breq	.+2      	; 0x54e2 <omega_estimation+0x3c2>
    54e0:	b1 cf       	rjmp	.-158    	; 0x5444 <omega_estimation+0x324>
    54e2:	c9 54       	subi	r28, 0x49	; 73
    54e4:	df 4f       	sbci	r29, 0xFF	; 255
    54e6:	88 81       	ld	r24, Y
    54e8:	99 81       	ldd	r25, Y+1	; 0x01
    54ea:	c7 5b       	subi	r28, 0xB7	; 183
    54ec:	d0 40       	sbci	r29, 0x00	; 0
    54ee:	0c 96       	adiw	r24, 0x0c	; 12
    54f0:	c9 54       	subi	r28, 0x49	; 73
    54f2:	df 4f       	sbci	r29, 0xFF	; 255
    54f4:	99 83       	std	Y+1, r25	; 0x01
    54f6:	88 83       	st	Y, r24
    54f8:	c7 5b       	subi	r28, 0xB7	; 183
    54fa:	d0 40       	sbci	r29, 0x00	; 0
    54fc:	c3 54       	subi	r28, 0x43	; 67
    54fe:	df 4f       	sbci	r29, 0xFF	; 255
    5500:	a8 81       	ld	r26, Y
    5502:	b9 81       	ldd	r27, Y+1	; 0x01
    5504:	cd 5b       	subi	r28, 0xBD	; 189
    5506:	d0 40       	sbci	r29, 0x00	; 0
    5508:	14 96       	adiw	r26, 0x04	; 4
    550a:	c3 54       	subi	r28, 0x43	; 67
    550c:	df 4f       	sbci	r29, 0xFF	; 255
    550e:	b9 83       	std	Y+1, r27	; 0x01
    5510:	a8 83       	st	Y, r26
    5512:	cd 5b       	subi	r28, 0xBD	; 189
    5514:	d0 40       	sbci	r29, 0x00	; 0
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    5516:	84 97       	sbiw	r24, 0x24	; 36
    5518:	09 f4       	brne	.+2      	; 0x551c <omega_estimation+0x3fc>
    551a:	44 c0       	rjmp	.+136    	; 0x55a4 <omega_estimation+0x484>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    551c:	c1 54       	subi	r28, 0x41	; 65
    551e:	df 4f       	sbci	r29, 0xFF	; 255
    5520:	e8 81       	ld	r30, Y
    5522:	f9 81       	ldd	r31, Y+1	; 0x01
    5524:	cf 5b       	subi	r28, 0xBF	; 191
    5526:	d0 40       	sbci	r29, 0x00	; 0
    5528:	61 91       	ld	r22, Z+
    552a:	71 91       	ld	r23, Z+
    552c:	81 91       	ld	r24, Z+
    552e:	91 91       	ld	r25, Z+
    5530:	c1 54       	subi	r28, 0x41	; 65
    5532:	df 4f       	sbci	r29, 0xFF	; 255
    5534:	f9 83       	std	Y+1, r31	; 0x01
    5536:	e8 83       	st	Y, r30
    5538:	cf 5b       	subi	r28, 0xBF	; 191
    553a:	d0 40       	sbci	r29, 0x00	; 0
    553c:	9b 01       	movw	r18, r22
    553e:	ac 01       	movw	r20, r24
    5540:	34 d7       	rcall	.+3688   	; 0x63aa <__addsf3>
    5542:	4b 01       	movw	r8, r22
    5544:	5c 01       	movw	r10, r24
    5546:	c3 54       	subi	r28, 0x43	; 67
    5548:	df 4f       	sbci	r29, 0xFF	; 255
    554a:	08 81       	ld	r16, Y
    554c:	19 81       	ldd	r17, Y+1	; 0x01
    554e:	cd 5b       	subi	r28, 0xBD	; 189
    5550:	d0 40       	sbci	r29, 0x00	; 0
    5552:	cf 53       	subi	r28, 0x3F	; 63
    5554:	df 4f       	sbci	r29, 0xFF	; 255
    5556:	28 80       	ld	r2, Y
    5558:	c1 5c       	subi	r28, 0xC1	; 193
    555a:	d0 40       	sbci	r29, 0x00	; 0
    555c:	ce 53       	subi	r28, 0x3E	; 62
    555e:	df 4f       	sbci	r29, 0xFF	; 255
    5560:	38 80       	ld	r3, Y
    5562:	c2 5c       	subi	r28, 0xC2	; 194
    5564:	d0 40       	sbci	r29, 0x00	; 0
    5566:	29 e6       	ldi	r18, 0x69	; 105
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	2c 0f       	add	r18, r28
    556c:	3d 1f       	adc	r19, r29
    556e:	c9 54       	subi	r28, 0x49	; 73
    5570:	df 4f       	sbci	r29, 0xFF	; 255
    5572:	88 81       	ld	r24, Y
    5574:	99 81       	ldd	r25, Y+1	; 0x01
    5576:	c7 5b       	subi	r28, 0xB7	; 183
    5578:	d0 40       	sbci	r29, 0x00	; 0
    557a:	28 0f       	add	r18, r24
    557c:	39 1f       	adc	r19, r25
    557e:	cb 54       	subi	r28, 0x4B	; 75
    5580:	df 4f       	sbci	r29, 0xFF	; 255
    5582:	39 83       	std	Y+1, r19	; 0x01
    5584:	28 83       	st	Y, r18
    5586:	c5 5b       	subi	r28, 0xB5	; 181
    5588:	d0 40       	sbci	r29, 0x00	; 0
    558a:	ad e8       	ldi	r26, 0x8D	; 141
    558c:	b0 e0       	ldi	r27, 0x00	; 0
    558e:	ac 0f       	add	r26, r28
    5590:	bd 1f       	adc	r27, r29
    5592:	a8 0f       	add	r26, r24
    5594:	b9 1f       	adc	r27, r25
    5596:	cd 54       	subi	r28, 0x4D	; 77
    5598:	df 4f       	sbci	r29, 0xFF	; 255
    559a:	b9 83       	std	Y+1, r27	; 0x01
    559c:	a8 83       	st	Y, r26
    559e:	c3 5b       	subi	r28, 0xB3	; 179
    55a0:	d0 40       	sbci	r29, 0x00	; 0
    55a2:	50 cf       	rjmp	.-352    	; 0x5444 <omega_estimation+0x324>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    55a4:	ae 01       	movw	r20, r28
    55a6:	47 5c       	subi	r20, 0xC7	; 199
    55a8:	5f 4f       	sbci	r21, 0xFF	; 255
    55aa:	be 01       	movw	r22, r28
    55ac:	6b 5b       	subi	r22, 0xBB	; 187
    55ae:	7f 4f       	sbci	r23, 0xFF	; 255
    55b0:	ce 01       	movw	r24, r28
    55b2:	8d 96       	adiw	r24, 0x2d	; 45
    55b4:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <vector_into_matrix>
    55b8:	8e 01       	movw	r16, r28
    55ba:	07 5c       	subi	r16, 0xC7	; 199
    55bc:	1f 4f       	sbci	r17, 0xFF	; 255
    55be:	0f 2e       	mov	r0, r31
    55c0:	f2 e6       	ldi	r31, 0x62	; 98
    55c2:	cf 2e       	mov	r12, r31
    55c4:	f4 e0       	ldi	r31, 0x04	; 4
    55c6:	df 2e       	mov	r13, r31
    55c8:	f0 2d       	mov	r31, r0
    55ca:	cb 53       	subi	r28, 0x3B	; 59
    55cc:	df 4f       	sbci	r29, 0xFF	; 255
    55ce:	e8 80       	ld	r14, Y
    55d0:	c5 5c       	subi	r28, 0xC5	; 197
    55d2:	d0 40       	sbci	r29, 0x00	; 0
    55d4:	ca 53       	subi	r28, 0x3A	; 58
    55d6:	df 4f       	sbci	r29, 0xFF	; 255
    55d8:	f8 80       	ld	r15, Y
    55da:	c6 5c       	subi	r28, 0xC6	; 198
    55dc:	d0 40       	sbci	r29, 0x00	; 0
    55de:	18 01       	movw	r2, r16
    55e0:	bc e0       	ldi	r27, 0x0C	; 12
    55e2:	2b 0e       	add	r2, r27
    55e4:	31 1c       	adc	r3, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    55e6:	f8 01       	movw	r30, r16
    55e8:	61 91       	ld	r22, Z+
    55ea:	71 91       	ld	r23, Z+
    55ec:	81 91       	ld	r24, Z+
    55ee:	91 91       	ld	r25, Z+
    55f0:	8f 01       	movw	r16, r30
    55f2:	d6 01       	movw	r26, r12
    55f4:	4d 90       	ld	r4, X+
    55f6:	5d 90       	ld	r5, X+
    55f8:	6d 90       	ld	r6, X+
    55fa:	7d 90       	ld	r7, X+
    55fc:	6d 01       	movw	r12, r26
    55fe:	28 e0       	ldi	r18, 0x08	; 8
    5600:	31 e2       	ldi	r19, 0x21	; 33
    5602:	44 e0       	ldi	r20, 0x04	; 4
    5604:	5d e3       	ldi	r21, 0x3D	; 61
    5606:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    560a:	4b 01       	movw	r8, r22
    560c:	5c 01       	movw	r10, r24
    560e:	20 ef       	ldi	r18, 0xF0	; 240
    5610:	3d eb       	ldi	r19, 0xBD	; 189
    5612:	47 e7       	ldi	r20, 0x77	; 119
    5614:	5f e3       	ldi	r21, 0x3F	; 63
    5616:	c3 01       	movw	r24, r6
    5618:	b2 01       	movw	r22, r4
    561a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    561e:	9b 01       	movw	r18, r22
    5620:	ac 01       	movw	r20, r24
    5622:	c5 01       	movw	r24, r10
    5624:	b4 01       	movw	r22, r8
    5626:	c1 d6       	rcall	.+3458   	; 0x63aa <__addsf3>
    5628:	f7 01       	movw	r30, r14
    562a:	61 93       	st	Z+, r22
    562c:	71 93       	st	Z+, r23
    562e:	81 93       	st	Z+, r24
    5630:	91 93       	st	Z+, r25
    5632:	7f 01       	movw	r14, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    5634:	02 15       	cp	r16, r2
    5636:	13 05       	cpc	r17, r3
    5638:	b1 f6       	brne	.-84     	; 0x55e6 <omega_estimation+0x4c6>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    563a:	6e e6       	ldi	r22, 0x6E	; 110
    563c:	74 e0       	ldi	r23, 0x04	; 4
    563e:	cd 53       	subi	r28, 0x3D	; 61
    5640:	df 4f       	sbci	r29, 0xFF	; 255
    5642:	88 81       	ld	r24, Y
    5644:	c3 5c       	subi	r28, 0xC3	; 195
    5646:	d0 40       	sbci	r29, 0x00	; 0
    5648:	cc 53       	subi	r28, 0x3C	; 60
    564a:	df 4f       	sbci	r29, 0xFF	; 255
    564c:	98 81       	ld	r25, Y
    564e:	c4 5c       	subi	r28, 0xC4	; 196
    5650:	d0 40       	sbci	r29, 0x00	; 0
    5652:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    5656:	62 e6       	ldi	r22, 0x62	; 98
    5658:	74 e0       	ldi	r23, 0x04	; 4
    565a:	cb 53       	subi	r28, 0x3B	; 59
    565c:	df 4f       	sbci	r29, 0xFF	; 255
    565e:	88 81       	ld	r24, Y
    5660:	c5 5c       	subi	r28, 0xC5	; 197
    5662:	d0 40       	sbci	r29, 0x00	; 0
    5664:	ca 53       	subi	r28, 0x3A	; 58
    5666:	df 4f       	sbci	r29, 0xFF	; 255
    5668:	98 81       	ld	r25, Y
    566a:	c6 5c       	subi	r28, 0xC6	; 198
    566c:	d0 40       	sbci	r29, 0x00	; 0
    566e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    5672:	ca 53       	subi	r28, 0x3A	; 58
    5674:	df 4f       	sbci	r29, 0xFF	; 255
    5676:	0f b6       	in	r0, 0x3f	; 63
    5678:	f8 94       	cli
    567a:	de bf       	out	0x3e, r29	; 62
    567c:	0f be       	out	0x3f, r0	; 63
    567e:	cd bf       	out	0x3d, r28	; 61
    5680:	df 91       	pop	r29
    5682:	cf 91       	pop	r28
    5684:	1f 91       	pop	r17
    5686:	0f 91       	pop	r16
    5688:	ff 90       	pop	r15
    568a:	ef 90       	pop	r14
    568c:	df 90       	pop	r13
    568e:	cf 90       	pop	r12
    5690:	bf 90       	pop	r11
    5692:	af 90       	pop	r10
    5694:	9f 90       	pop	r9
    5696:	8f 90       	pop	r8
    5698:	7f 90       	pop	r7
    569a:	6f 90       	pop	r6
    569c:	5f 90       	pop	r5
    569e:	4f 90       	pop	r4
    56a0:	3f 90       	pop	r3
    56a2:	2f 90       	pop	r2
    56a4:	08 95       	ret

000056a6 <init_SPI>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    56a6:	17 ba       	out	0x17, r1	; 23
    56a8:	86 e0       	ldi	r24, 0x06	; 6
    56aa:	87 bb       	out	0x17, r24	; 23
    56ac:	87 b3       	in	r24, 0x17	; 23
    56ae:	81 63       	ori	r24, 0x31	; 49
    56b0:	87 bb       	out	0x17, r24	; 23
    56b2:	88 b3       	in	r24, 0x18	; 24
    56b4:	80 63       	ori	r24, 0x30	; 48
    56b6:	88 bb       	out	0x18, r24	; 24
    56b8:	c0 98       	cbi	0x18, 0	; 24
    56ba:	8f e5       	ldi	r24, 0x5F	; 95
    56bc:	8d b9       	out	0x0d, r24	; 13
    56be:	08 95       	ret

000056c0 <SPI_transfer>:
}


uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
    56c0:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
    56c2:	77 9b       	sbis	0x0e, 7	; 14
    56c4:	fe cf       	rjmp	.-4      	; 0x56c2 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
    56c6:	8f b1       	in	r24, 0x0f	; 15
}
    56c8:	08 95       	ret

000056ca <poll_SS>:
	val=(val<<8)+vall;
	return val;
}

void poll_SS(void)
{
    56ca:	2f 92       	push	r2
    56cc:	3f 92       	push	r3
    56ce:	4f 92       	push	r4
    56d0:	5f 92       	push	r5
    56d2:	6f 92       	push	r6
    56d4:	7f 92       	push	r7
    56d6:	8f 92       	push	r8
    56d8:	9f 92       	push	r9
    56da:	af 92       	push	r10
    56dc:	bf 92       	push	r11
    56de:	cf 92       	push	r12
    56e0:	df 92       	push	r13
    56e2:	ef 92       	push	r14
    56e4:	ff 92       	push	r15
    56e6:	0f 93       	push	r16
    56e8:	1f 93       	push	r17
    56ea:	cf 93       	push	r28
    56ec:	df 93       	push	r29
    56ee:	cd b7       	in	r28, 0x3d	; 61
    56f0:	de b7       	in	r29, 0x3e	; 62
    56f2:	2c 97       	sbiw	r28, 0x0c	; 12
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	de bf       	out	0x3e, r29	; 62
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t valh6;
	uint8_t vall6;

	uint16_t val[6];//First sunsensor combined 16 bit value
	int8_t data_r;
  PORTB |= (1<<PB0);//Set Slave select of Slave OBC to 1
    56fe:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~(1<<PB5);// Set slave select of ADC to 0
    5700:	c5 98       	cbi	0x18, 5	; 24
    5702:	8f ec       	ldi	r24, 0xCF	; 207
    5704:	97 e0       	ldi	r25, 0x07	; 7
    5706:	01 97       	sbiw	r24, 0x01	; 1
    5708:	f1 f7       	brne	.-4      	; 0x5706 <poll_SS+0x3c>
    570a:	00 c0       	rjmp	.+0      	; 0x570c <poll_SS+0x42>
    570c:	00 00       	nop
  //SPCR |=(1<<SPE);
  _delay_ms(1);
  data_r=SPI_transfer(0xFF); //Dummy transaction. Tell ADC that data transmission should begin now.
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	d7 df       	rcall	.-82     	; 0x56c0 <SPI_transfer>
    5712:	ef ec       	ldi	r30, 0xCF	; 207
    5714:	f7 e0       	ldi	r31, 0x07	; 7
    5716:	31 97       	sbiw	r30, 0x01	; 1
    5718:	f1 f7       	brne	.-4      	; 0x5716 <poll_SS+0x4c>
    571a:	00 c0       	rjmp	.+0      	; 0x571c <poll_SS+0x52>
    571c:	00 00       	nop
  _delay_ms(1);
  //transmit_UART0(data_r);
  PORTA = 0xFF;
    571e:	8f ef       	ldi	r24, 0xFF	; 255
    5720:	8b bb       	out	0x1b, r24	; 27
  vall1=SPI_transfer(0xFF);//First data byte
    5722:	ce df       	rcall	.-100    	; 0x56c0 <SPI_transfer>
    5724:	b8 2e       	mov	r11, r24
    5726:	8f ec       	ldi	r24, 0xCF	; 207
    5728:	97 e0       	ldi	r25, 0x07	; 7
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	f1 f7       	brne	.-4      	; 0x572a <poll_SS+0x60>
    572e:	00 c0       	rjmp	.+0      	; 0x5730 <poll_SS+0x66>
    5730:	00 00       	nop
  _delay_ms(1);
  valh1=SPI_transfer(0xFF);
    5732:	8f ef       	ldi	r24, 0xFF	; 255
    5734:	c5 df       	rcall	.-118    	; 0x56c0 <SPI_transfer>
    5736:	c8 2e       	mov	r12, r24
    5738:	ef ec       	ldi	r30, 0xCF	; 207
    573a:	f7 e0       	ldi	r31, 0x07	; 7
    573c:	31 97       	sbiw	r30, 0x01	; 1
    573e:	f1 f7       	brne	.-4      	; 0x573c <poll_SS+0x72>
    5740:	00 c0       	rjmp	.+0      	; 0x5742 <poll_SS+0x78>
    5742:	00 00       	nop
  _delay_ms(1);


  vall2=SPI_transfer(0xFF);
    5744:	8f ef       	ldi	r24, 0xFF	; 255
    5746:	bc df       	rcall	.-136    	; 0x56c0 <SPI_transfer>
    5748:	98 2e       	mov	r9, r24
    574a:	8f ec       	ldi	r24, 0xCF	; 207
    574c:	97 e0       	ldi	r25, 0x07	; 7
    574e:	01 97       	sbiw	r24, 0x01	; 1
    5750:	f1 f7       	brne	.-4      	; 0x574e <poll_SS+0x84>
    5752:	00 c0       	rjmp	.+0      	; 0x5754 <poll_SS+0x8a>
    5754:	00 00       	nop
  _delay_ms(1);
  valh2=SPI_transfer(0xFF);
    5756:	8f ef       	ldi	r24, 0xFF	; 255
    5758:	b3 df       	rcall	.-154    	; 0x56c0 <SPI_transfer>
    575a:	a8 2e       	mov	r10, r24
    575c:	ef ec       	ldi	r30, 0xCF	; 207
    575e:	f7 e0       	ldi	r31, 0x07	; 7
    5760:	31 97       	sbiw	r30, 0x01	; 1
    5762:	f1 f7       	brne	.-4      	; 0x5760 <poll_SS+0x96>
    5764:	00 c0       	rjmp	.+0      	; 0x5766 <poll_SS+0x9c>
    5766:	00 00       	nop
  _delay_ms(1);




  vall3=SPI_transfer(0xFF);
    5768:	8f ef       	ldi	r24, 0xFF	; 255
    576a:	aa df       	rcall	.-172    	; 0x56c0 <SPI_transfer>
    576c:	e8 2e       	mov	r14, r24
    576e:	8f ec       	ldi	r24, 0xCF	; 207
    5770:	97 e0       	ldi	r25, 0x07	; 7
    5772:	01 97       	sbiw	r24, 0x01	; 1
    5774:	f1 f7       	brne	.-4      	; 0x5772 <poll_SS+0xa8>
    5776:	00 c0       	rjmp	.+0      	; 0x5778 <poll_SS+0xae>
    5778:	00 00       	nop
  _delay_ms(1);
  valh3=SPI_transfer(0xFF);
    577a:	8f ef       	ldi	r24, 0xFF	; 255
    577c:	a1 df       	rcall	.-190    	; 0x56c0 <SPI_transfer>
    577e:	88 2e       	mov	r8, r24
    5780:	ef ec       	ldi	r30, 0xCF	; 207
    5782:	f7 e0       	ldi	r31, 0x07	; 7
    5784:	31 97       	sbiw	r30, 0x01	; 1
    5786:	f1 f7       	brne	.-4      	; 0x5784 <poll_SS+0xba>
    5788:	00 c0       	rjmp	.+0      	; 0x578a <poll_SS+0xc0>
    578a:	00 00       	nop
  _delay_ms(1);



  vall4=SPI_transfer(0xFF);
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	98 df       	rcall	.-208    	; 0x56c0 <SPI_transfer>
    5790:	f8 2e       	mov	r15, r24
    5792:	8f ec       	ldi	r24, 0xCF	; 207
    5794:	97 e0       	ldi	r25, 0x07	; 7
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	f1 f7       	brne	.-4      	; 0x5796 <poll_SS+0xcc>
    579a:	00 c0       	rjmp	.+0      	; 0x579c <poll_SS+0xd2>
    579c:	00 00       	nop
  _delay_ms(1);
  valh4=SPI_transfer(0xFF);
    579e:	8f ef       	ldi	r24, 0xFF	; 255
    57a0:	8f df       	rcall	.-226    	; 0x56c0 <SPI_transfer>
    57a2:	68 2e       	mov	r6, r24
    57a4:	ef ec       	ldi	r30, 0xCF	; 207
    57a6:	f7 e0       	ldi	r31, 0x07	; 7
    57a8:	31 97       	sbiw	r30, 0x01	; 1
    57aa:	f1 f7       	brne	.-4      	; 0x57a8 <poll_SS+0xde>
    57ac:	00 c0       	rjmp	.+0      	; 0x57ae <poll_SS+0xe4>
    57ae:	00 00       	nop
  _delay_ms(1);



  vall5=SPI_transfer(0xFF);
    57b0:	8f ef       	ldi	r24, 0xFF	; 255
    57b2:	86 df       	rcall	.-244    	; 0x56c0 <SPI_transfer>
    57b4:	08 2f       	mov	r16, r24
    57b6:	8f ec       	ldi	r24, 0xCF	; 207
    57b8:	97 e0       	ldi	r25, 0x07	; 7
    57ba:	01 97       	sbiw	r24, 0x01	; 1
    57bc:	f1 f7       	brne	.-4      	; 0x57ba <poll_SS+0xf0>
    57be:	00 c0       	rjmp	.+0      	; 0x57c0 <poll_SS+0xf6>
    57c0:	00 00       	nop
  _delay_ms(1);
  valh5=SPI_transfer(0xFF);
    57c2:	8f ef       	ldi	r24, 0xFF	; 255
    57c4:	7d df       	rcall	.-262    	; 0x56c0 <SPI_transfer>
    57c6:	48 2e       	mov	r4, r24
    57c8:	ef ec       	ldi	r30, 0xCF	; 207
    57ca:	f7 e0       	ldi	r31, 0x07	; 7
    57cc:	31 97       	sbiw	r30, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <poll_SS+0x102>
    57d0:	00 c0       	rjmp	.+0      	; 0x57d2 <poll_SS+0x108>
    57d2:	00 00       	nop
  _delay_ms(1);



  vall6=SPI_transfer(0xFF);
    57d4:	8f ef       	ldi	r24, 0xFF	; 255
    57d6:	74 df       	rcall	.-280    	; 0x56c0 <SPI_transfer>
    57d8:	18 2f       	mov	r17, r24
    57da:	8f ec       	ldi	r24, 0xCF	; 207
    57dc:	97 e0       	ldi	r25, 0x07	; 7
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	f1 f7       	brne	.-4      	; 0x57de <poll_SS+0x114>
    57e2:	00 c0       	rjmp	.+0      	; 0x57e4 <poll_SS+0x11a>
    57e4:	00 00       	nop
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
    57e6:	8f ef       	ldi	r24, 0xFF	; 255
    57e8:	6b df       	rcall	.-298    	; 0x56c0 <SPI_transfer>
    57ea:	ef ec       	ldi	r30, 0xCF	; 207
    57ec:	f7 e0       	ldi	r31, 0x07	; 7
    57ee:	31 97       	sbiw	r30, 0x01	; 1
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <poll_SS+0x124>
    57f2:	00 c0       	rjmp	.+0      	; 0x57f4 <poll_SS+0x12a>
    57f4:	00 00       	nop
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    57f6:	d1 2c       	mov	r13, r1
	val=(val<<8)+vall;
    57f8:	dc 2c       	mov	r13, r12
    57fa:	cc 24       	eor	r12, r12
    57fc:	cb 0c       	add	r12, r11
    57fe:	d1 1c       	adc	r13, r1

  vall6=SPI_transfer(0xFF);
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
    5800:	da 82       	std	Y+2, r13	; 0x02
    5802:	c9 82       	std	Y+1, r12	; 0x01
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5804:	b1 2c       	mov	r11, r1
	val=(val<<8)+vall;
    5806:	ba 2c       	mov	r11, r10
    5808:	aa 24       	eor	r10, r10
    580a:	a9 0c       	add	r10, r9
    580c:	b1 1c       	adc	r11, r1
  vall6=SPI_transfer(0xFF);
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
    580e:	bc 82       	std	Y+4, r11	; 0x04
    5810:	ab 82       	std	Y+3, r10	; 0x03
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5812:	91 2c       	mov	r9, r1
	val=(val<<8)+vall;
    5814:	98 2c       	mov	r9, r8
    5816:	88 24       	eor	r8, r8
    5818:	8e 0c       	add	r8, r14
    581a:	91 1c       	adc	r9, r1
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
    581c:	9e 82       	std	Y+6, r9	; 0x06
    581e:	8d 82       	std	Y+5, r8	; 0x05
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5820:	71 2c       	mov	r7, r1
	val=(val<<8)+vall;
    5822:	76 2c       	mov	r7, r6
    5824:	66 24       	eor	r6, r6
    5826:	6f 0c       	add	r6, r15
    5828:	71 1c       	adc	r7, r1
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
    582a:	78 86       	std	Y+8, r7	; 0x08
    582c:	6f 82       	std	Y+7, r6	; 0x07
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    582e:	51 2c       	mov	r5, r1
	val=(val<<8)+vall;
    5830:	54 2c       	mov	r5, r4
    5832:	44 24       	eor	r4, r4
    5834:	40 0e       	add	r4, r16
    5836:	51 1c       	adc	r5, r1
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
    5838:	5a 86       	std	Y+10, r5	; 0x0a
    583a:	49 86       	std	Y+9, r4	; 0x09
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    583c:	28 2e       	mov	r2, r24
    583e:	31 2c       	mov	r3, r1
	val=(val<<8)+vall;
    5840:	32 2c       	mov	r3, r2
    5842:	22 24       	eor	r2, r2
    5844:	21 0e       	add	r2, r17
    5846:	31 1c       	adc	r3, r1
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
  val[5]=convert(vall6,valh6);
    5848:	3c 86       	std	Y+12, r3	; 0x0c
    584a:	2b 86       	std	Y+11, r2	; 0x0b
    584c:	ce 01       	movw	r24, r28
    584e:	01 96       	adiw	r24, 0x01	; 1
    5850:	7c 01       	movw	r14, r24

  for (int i=0;i<6;i=i+1)
    5852:	00 e0       	ldi	r16, 0x00	; 0
    5854:	10 e0       	ldi	r17, 0x00	; 0
  {
	  Current_state.ss.read[i] = (double)(((double)val[i]*3.3/1024.0));//Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i]*3.3/1024)-1.65)*2;
    5856:	f7 01       	movw	r30, r14
    5858:	61 91       	ld	r22, Z+
    585a:	71 91       	ld	r23, Z+
    585c:	7f 01       	movw	r14, r30
    585e:	80 e0       	ldi	r24, 0x00	; 0
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	20 d7       	rcall	.+3648   	; 0x66a4 <__floatunsisf>
    5864:	23 e3       	ldi	r18, 0x33	; 51
    5866:	33 e3       	ldi	r19, 0x33	; 51
    5868:	43 e5       	ldi	r20, 0x53	; 83
    586a:	50 e4       	ldi	r21, 0x40	; 64
    586c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	40 e8       	ldi	r20, 0x80	; 128
    5876:	5a e3       	ldi	r21, 0x3A	; 58
    5878:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    587c:	f8 01       	movw	r30, r16
    587e:	ee 0f       	add	r30, r30
    5880:	ff 1f       	adc	r31, r31
    5882:	ee 0f       	add	r30, r30
    5884:	ff 1f       	adc	r31, r31
    5886:	e5 53       	subi	r30, 0x35	; 53
    5888:	fb 4f       	sbci	r31, 0xFB	; 251
    588a:	61 ab       	std	Z+49, r22	; 0x31
    588c:	72 ab       	std	Z+50, r23	; 0x32
    588e:	83 ab       	std	Z+51, r24	; 0x33
    5890:	94 ab       	std	Z+52, r25	; 0x34
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
  val[5]=convert(vall6,valh6);

  for (int i=0;i<6;i=i+1)
    5892:	0f 5f       	subi	r16, 0xFF	; 255
    5894:	1f 4f       	sbci	r17, 0xFF	; 255
    5896:	06 30       	cpi	r16, 0x06	; 6
    5898:	11 05       	cpc	r17, r1
    589a:	e9 f6       	brne	.-70     	; 0x5856 <poll_SS+0x18c>
    589c:	00 e0       	ldi	r16, 0x00	; 0
    589e:	10 e0       	ldi	r17, 0x00	; 0
  
  uint8_t sen;
 // transmit_UART0('A');
  for(int i=0;i<6;i=i+1)
  {
	  sen = (Current_state.ss.read[i]*255/3.3);
    58a0:	f8 01       	movw	r30, r16
    58a2:	ee 0f       	add	r30, r30
    58a4:	ff 1f       	adc	r31, r31
    58a6:	ee 0f       	add	r30, r30
    58a8:	ff 1f       	adc	r31, r31
    58aa:	e5 53       	subi	r30, 0x35	; 53
    58ac:	fb 4f       	sbci	r31, 0xFB	; 251
    58ae:	61 a9       	ldd	r22, Z+49	; 0x31
    58b0:	72 a9       	ldd	r23, Z+50	; 0x32
    58b2:	83 a9       	ldd	r24, Z+51	; 0x33
    58b4:	94 a9       	ldd	r25, Z+52	; 0x34
    58b6:	20 e0       	ldi	r18, 0x00	; 0
    58b8:	30 e0       	ldi	r19, 0x00	; 0
    58ba:	4f e7       	ldi	r20, 0x7F	; 127
    58bc:	53 e4       	ldi	r21, 0x43	; 67
    58be:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__mulsf3>
    58c2:	23 e3       	ldi	r18, 0x33	; 51
    58c4:	33 e3       	ldi	r19, 0x33	; 51
    58c6:	43 e5       	ldi	r20, 0x53	; 83
    58c8:	50 e4       	ldi	r21, 0x40	; 64
    58ca:	53 d6       	rcall	.+3238   	; 0x6572 <__divsf3>
    58cc:	bf d6       	rcall	.+3454   	; 0x664c <__fixunssfsi>
	  transmit_UART0(sen);
    58ce:	86 2f       	mov	r24, r22
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	6c d0       	rcall	.+216    	; 0x59ac <transmit_UART0>
	  Current_state.ss.read[i] = (double)(((double)val[i]*3.3/1024.0));//Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i]*3.3/1024)-1.65)*2;
  }
  
  uint8_t sen;
 // transmit_UART0('A');
  for(int i=0;i<6;i=i+1)
    58d4:	0f 5f       	subi	r16, 0xFF	; 255
    58d6:	1f 4f       	sbci	r17, 0xFF	; 255
    58d8:	06 30       	cpi	r16, 0x06	; 6
    58da:	11 05       	cpc	r17, r1
    58dc:	09 f7       	brne	.-62     	; 0x58a0 <poll_SS+0x1d6>
  {
	  sen = (Current_state.ss.read[i]*255/3.3);
	  transmit_UART0(sen);
  }
  ///////////////////////////////////
  if ((val[0]>30000)||(val[1]>30000)||(val[2]>30000)||(val[3]>30000)||(val[4]>30000)||(val[5]>30000))
    58de:	f1 e3       	ldi	r31, 0x31	; 49
    58e0:	cf 16       	cp	r12, r31
    58e2:	f5 e7       	ldi	r31, 0x75	; 117
    58e4:	df 06       	cpc	r13, r31
    58e6:	c8 f4       	brcc	.+50     	; 0x591a <poll_SS+0x250>
    58e8:	21 e3       	ldi	r18, 0x31	; 49
    58ea:	a2 16       	cp	r10, r18
    58ec:	25 e7       	ldi	r18, 0x75	; 117
    58ee:	b2 06       	cpc	r11, r18
    58f0:	a0 f4       	brcc	.+40     	; 0x591a <poll_SS+0x250>
    58f2:	81 e3       	ldi	r24, 0x31	; 49
    58f4:	88 16       	cp	r8, r24
    58f6:	85 e7       	ldi	r24, 0x75	; 117
    58f8:	98 06       	cpc	r9, r24
    58fa:	78 f4       	brcc	.+30     	; 0x591a <poll_SS+0x250>
    58fc:	91 e3       	ldi	r25, 0x31	; 49
    58fe:	69 16       	cp	r6, r25
    5900:	95 e7       	ldi	r25, 0x75	; 117
    5902:	79 06       	cpc	r7, r25
    5904:	50 f4       	brcc	.+20     	; 0x591a <poll_SS+0x250>
    5906:	e1 e3       	ldi	r30, 0x31	; 49
    5908:	4e 16       	cp	r4, r30
    590a:	e5 e7       	ldi	r30, 0x75	; 117
    590c:	5e 06       	cpc	r5, r30
    590e:	28 f4       	brcc	.+10     	; 0x591a <poll_SS+0x250>
    5910:	f1 e3       	ldi	r31, 0x31	; 49
    5912:	2f 16       	cp	r2, r31
    5914:	f5 e7       	ldi	r31, 0x75	; 117
    5916:	3f 06       	cpc	r3, r31
    5918:	48 f0       	brcs	.+18     	; 0x592c <poll_SS+0x262>
    591a:	2f ef       	ldi	r18, 0xFF	; 255
    591c:	8d e3       	ldi	r24, 0x3D	; 61
    591e:	99 e4       	ldi	r25, 0x49	; 73
    5920:	21 50       	subi	r18, 0x01	; 1
    5922:	80 40       	sbci	r24, 0x00	; 0
    5924:	90 40       	sbci	r25, 0x00	; 0
    5926:	e1 f7       	brne	.-8      	; 0x5920 <poll_SS+0x256>
    5928:	00 c0       	rjmp	.+0      	; 0x592a <poll_SS+0x260>
    592a:	00 00       	nop
  {
	  _delay_ms(3000);
  }
  ///////////////////////////////////
 
  PORTB |= (1<<PB5);
    592c:	c5 9a       	sbi	0x18, 5	; 24
  //_delay_ms(1000);
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
}
    592e:	2c 96       	adiw	r28, 0x0c	; 12
    5930:	0f b6       	in	r0, 0x3f	; 63
    5932:	f8 94       	cli
    5934:	de bf       	out	0x3e, r29	; 62
    5936:	0f be       	out	0x3f, r0	; 63
    5938:	cd bf       	out	0x3d, r28	; 61
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	1f 91       	pop	r17
    5940:	0f 91       	pop	r16
    5942:	ff 90       	pop	r15
    5944:	ef 90       	pop	r14
    5946:	df 90       	pop	r13
    5948:	cf 90       	pop	r12
    594a:	bf 90       	pop	r11
    594c:	af 90       	pop	r10
    594e:	9f 90       	pop	r9
    5950:	8f 90       	pop	r8
    5952:	7f 90       	pop	r7
    5954:	6f 90       	pop	r6
    5956:	5f 90       	pop	r5
    5958:	4f 90       	pop	r4
    595a:	3f 90       	pop	r3
    595c:	2f 90       	pop	r2
    595e:	08 95       	ret

00005960 <timer_reset_two_sec>:
    
}

void watch_dog(int time){
  wdt_disable();
  wdt_enable(time);
    5960:	86 b7       	in	r24, 0x36	; 54
    5962:	80 61       	ori	r24, 0x10	; 16
    5964:	86 bf       	out	0x36, r24	; 54
    5966:	1e bc       	out	0x2e, r1	; 46
    5968:	1d bc       	out	0x2d, r1	; 45
    596a:	1c bc       	out	0x2c, r1	; 44
    596c:	88 e0       	ldi	r24, 0x08	; 8
    596e:	9d e3       	ldi	r25, 0x3D	; 61
    5970:	9b bd       	out	0x2b, r25	; 43
    5972:	8a bd       	out	0x2a, r24	; 42
    5974:	1f bc       	out	0x2f, r1	; 47
    5976:	85 e0       	ldi	r24, 0x05	; 5
    5978:	8e bd       	out	0x2e, r24	; 46
    597a:	10 92 7a 00 	sts	0x007A, r1
    597e:	08 95       	ret

00005980 <timer_wait_reset>:
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    5980:	06 b6       	in	r0, 0x36	; 54
    5982:	04 fe       	sbrs	r0, 4
    5984:	fd cf       	rjmp	.-6      	; 0x5980 <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    5986:	ec cf       	rjmp	.-40     	; 0x5960 <timer_reset_two_sec>
    5988:	08 95       	ret

0000598a <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
    598a:	1b b8       	out	0x0b, r1	; 11
    598c:	1a b8       	out	0x0a, r1	; 10
    598e:	e5 e9       	ldi	r30, 0x95	; 149
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	10 82       	st	Z, r1
    5994:	59 9a       	sbi	0x0b, 1	; 11
    5996:	8a b1       	in	r24, 0x0a	; 10
    5998:	88 61       	ori	r24, 0x18	; 24
    599a:	8a b9       	out	0x0a, r24	; 10
    599c:	80 81       	ld	r24, Z
    599e:	8e 60       	ori	r24, 0x0E	; 14
    59a0:	80 83       	st	Z, r24
    59a2:	87 e6       	ldi	r24, 0x67	; 103
    59a4:	89 b9       	out	0x09, r24	; 9
    59a6:	10 92 90 00 	sts	0x0090, r1
    59aa:	08 95       	ret

000059ac <transmit_UART0>:
    59ac:	5d 9b       	sbis	0x0b, 5	; 11
    59ae:	fe cf       	rjmp	.-4      	; 0x59ac <transmit_UART0>
    59b0:	8c b9       	out	0x0c, r24	; 12
    59b2:	08 95       	ret

000059b4 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    59b4:	fc 01       	movw	r30, r24
    59b6:	20 81       	ld	r18, Z
    59b8:	22 23       	and	r18, r18
    59ba:	39 f0       	breq	.+14     	; 0x59ca <transmit_string_UART0+0x16>
    59bc:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
    59be:	5d 9b       	sbis	0x0b, 5	; 11
    59c0:	fe cf       	rjmp	.-4      	; 0x59be <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
    59c2:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    59c4:	21 91       	ld	r18, Z+
    59c6:	21 11       	cpse	r18, r1
    59c8:	fa cf       	rjmp	.-12     	; 0x59be <transmit_string_UART0+0xa>
    59ca:	08 95       	ret

000059cc <TWI_init_master>:
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
}
    59cc:	10 92 71 00 	sts	0x0071, r1
    59d0:	10 92 74 00 	sts	0x0074, r1
    59d4:	8c e0       	ldi	r24, 0x0C	; 12
    59d6:	80 93 70 00 	sts	0x0070, r24
    59da:	08 95       	ret

000059dc <TWI_start>:
    59dc:	84 ea       	ldi	r24, 0xA4	; 164
    59de:	80 93 74 00 	sts	0x0074, r24
    59e2:	e4 e7       	ldi	r30, 0x74	; 116
    59e4:	f0 e0       	ldi	r31, 0x00	; 0
    59e6:	80 81       	ld	r24, Z
    59e8:	88 23       	and	r24, r24
    59ea:	ec f7       	brge	.-6      	; 0x59e6 <TWI_start+0xa>
    59ec:	e1 e7       	ldi	r30, 0x71	; 113
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	80 81       	ld	r24, Z
    59f2:	88 7f       	andi	r24, 0xF8	; 248
    59f4:	88 30       	cpi	r24, 0x08	; 8
    59f6:	e1 f7       	brne	.-8      	; 0x59f0 <TWI_start+0x14>
    59f8:	08 95       	ret

000059fa <TWI_write_address>:

void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
    59fa:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    59fe:	84 e8       	ldi	r24, 0x84	; 132
    5a00:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    5a04:	a4 e7       	ldi	r26, 0x74	; 116
    5a06:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    5a08:	e1 e7       	ldi	r30, 0x71	; 113
    5a0a:	f0 e0       	ldi	r31, 0x00	; 0
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    5a0c:	04 c0       	rjmp	.+8      	; 0x5a16 <TWI_write_address+0x1c>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    5a0e:	80 81       	ld	r24, Z
    5a10:	88 7f       	andi	r24, 0xF8	; 248
    5a12:	88 31       	cpi	r24, 0x18	; 24
    5a14:	e1 f7       	brne	.-8      	; 0x5a0e <TWI_write_address+0x14>
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    5a16:	8c 91       	ld	r24, X
    5a18:	88 23       	and	r24, r24
    5a1a:	cc f7       	brge	.-14     	; 0x5a0e <TWI_write_address+0x14>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement

}
    5a1c:	08 95       	ret

00005a1e <TWI_read_address>:

void TWI_read_address(unsigned char data) //Function for slave side to read address sent by Master
{
	TWDR=data; // Address and read instruction
    5a1e:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    5a22:	84 e8       	ldi	r24, 0x84	; 132
    5a24:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    5a28:	e4 e7       	ldi	r30, 0x74	; 116
    5a2a:	f0 e0       	ldi	r31, 0x00	; 0
    5a2c:	80 81       	ld	r24, Z
    5a2e:	88 23       	and	r24, r24
    5a30:	ec f7       	brge	.-6      	; 0x5a2c <TWI_read_address+0xe>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
    5a32:	e1 e7       	ldi	r30, 0x71	; 113
    5a34:	f0 e0       	ldi	r31, 0x00	; 0
    5a36:	80 81       	ld	r24, Z
    5a38:	88 7f       	andi	r24, 0xF8	; 248
    5a3a:	80 34       	cpi	r24, 0x40	; 64
    5a3c:	e1 f7       	brne	.-8      	; 0x5a36 <TWI_read_address+0x18>
}
    5a3e:	08 95       	ret

00005a40 <TWI_write_data>:

void TWI_write_data(unsigned char data)//Function to write data on I2C data line
{
	TWDR=data; // put data in TWDR
    5a40:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    5a44:	84 e8       	ldi	r24, 0x84	; 132
    5a46:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    5a4a:	e4 e7       	ldi	r30, 0x74	; 116
    5a4c:	f0 e0       	ldi	r31, 0x00	; 0
    5a4e:	80 81       	ld	r24, Z
    5a50:	88 23       	and	r24, r24
    5a52:	ec f7       	brge	.-6      	; 0x5a4e <TWI_write_data+0xe>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
    5a54:	e1 e7       	ldi	r30, 0x71	; 113
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	80 81       	ld	r24, Z
    5a5a:	88 7f       	andi	r24, 0xF8	; 248
    5a5c:	88 32       	cpi	r24, 0x28	; 40
    5a5e:	e1 f7       	brne	.-8      	; 0x5a58 <TWI_write_data+0x18>
}
    5a60:	08 95       	ret

00005a62 <TWI_read_data>:

void TWI_read_data(void) //Function to read data from I2C data line
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    5a62:	84 e8       	ldi	r24, 0x84	; 132
    5a64:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    5a68:	e4 e7       	ldi	r30, 0x74	; 116
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	80 81       	ld	r24, Z
    5a6e:	88 23       	and	r24, r24
    5a70:	ec f7       	brge	.-6      	; 0x5a6c <TWI_read_data+0xa>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
    5a72:	e1 e7       	ldi	r30, 0x71	; 113
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	80 81       	ld	r24, Z
    5a78:	88 7f       	andi	r24, 0xF8	; 248
    5a7a:	88 35       	cpi	r24, 0x58	; 88
    5a7c:	e1 f7       	brne	.-8      	; 0x5a76 <TWI_read_data+0x14>
	recv_data=TWDR;//PORTA=recv_data;
    5a7e:	80 91 73 00 	lds	r24, 0x0073
    5a82:	80 93 30 05 	sts	0x0530, r24
    5a86:	08 95       	ret

00005a88 <TWI_stop>:
}

void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    5a88:	84 e9       	ldi	r24, 0x94	; 148
    5a8a:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
    5a8e:	e4 e7       	ldi	r30, 0x74	; 116
    5a90:	f0 e0       	ldi	r31, 0x00	; 0
    5a92:	80 81       	ld	r24, Z
    5a94:	84 ff       	sbrs	r24, 4
    5a96:	fd cf       	rjmp	.-6      	; 0x5a92 <TWI_stop+0xa>
}
    5a98:	08 95       	ret

00005a9a <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    5a9a:	e9 e3       	ldi	r30, 0x39	; 57
    5a9c:	f5 e0       	ldi	r31, 0x05	; 5
    5a9e:	80 e4       	ldi	r24, 0x40	; 64
    5aa0:	95 e0       	ldi	r25, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    5aa2:	3f ef       	ldi	r19, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    5aa4:	21 91       	ld	r18, Z+
    5aa6:	2f b9       	out	0x0f, r18	; 15
		 while(!(SPSR & (1<<SPIF) ));
    5aa8:	77 9b       	sbis	0x0e, 7	; 14
    5aaa:	fe cf       	rjmp	.-4      	; 0x5aa8 <SendHM+0xe>
		 PORTA = 0xFF;
    5aac:	3b bb       	out	0x1b, r19	; 27
    5aae:	af ec       	ldi	r26, 0xCF	; 207
    5ab0:	b7 e0       	ldi	r27, 0x07	; 7
    5ab2:	11 97       	sbiw	r26, 0x01	; 1
    5ab4:	f1 f7       	brne	.-4      	; 0x5ab2 <SendHM+0x18>
    5ab6:	00 c0       	rjmp	.+0      	; 0x5ab8 <SendHM+0x1e>
    5ab8:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    5aba:	e8 17       	cp	r30, r24
    5abc:	f9 07       	cpc	r31, r25
    5abe:	91 f7       	brne	.-28     	; 0x5aa4 <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    5ac0:	08 95       	ret

00005ac2 <main>:


int main(void){
    5ac2:	cf 93       	push	r28
    5ac4:	df 93       	push	r29
    5ac6:	cd b7       	in	r28, 0x3d	; 61
    5ac8:	de b7       	in	r29, 0x3e	; 62
    5aca:	68 97       	sbiw	r28, 0x18	; 24
    5acc:	0f b6       	in	r0, 0x3f	; 63
    5ace:	f8 94       	cli
    5ad0:	de bf       	out	0x3e, r29	; 62
    5ad2:	0f be       	out	0x3f, r0	; 63
    5ad4:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    5ad6:	e7 dd       	rcall	.-1074   	; 0x56a6 <init_SPI>
  init_UART0();
    5ad8:	58 df       	rcall	.-336    	; 0x598a <init_UART0>
  init_UART_MM();
    5ada:	0e 94 1c 1c 	call	0x3838	; 0x3838 <init_UART_MM>
  configure_torquer();
    5ade:	0e 94 10 20 	call	0x4020	; 0x4020 <configure_torquer>
  DDRA=0xF0;
    5ae2:	80 ef       	ldi	r24, 0xF0	; 240
    5ae4:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    5ae6:	10 92 ec 04 	sts	0x04EC, r1
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    5aea:	87 b3       	in	r24, 0x17	; 23
    5aec:	81 62       	ori	r24, 0x21	; 33
    5aee:	87 bb       	out	0x17, r24	; 23
    5af0:	2f ef       	ldi	r18, 0xFF	; 255
    5af2:	33 ed       	ldi	r19, 0xD3	; 211
    5af4:	80 e3       	ldi	r24, 0x30	; 48
    5af6:	21 50       	subi	r18, 0x01	; 1
    5af8:	30 40       	sbci	r19, 0x00	; 0
    5afa:	80 40       	sbci	r24, 0x00	; 0
    5afc:	e1 f7       	brne	.-8      	; 0x5af6 <main+0x34>
    5afe:	00 c0       	rjmp	.+0      	; 0x5b00 <main+0x3e>
    5b00:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    5b02:	80 ed       	ldi	r24, 0xD0	; 208
    5b04:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    5b06:	62 df       	rcall	.-316    	; 0x59cc <TWI_init_master>
  transmit_string_UART0("Flight");// uncomment afetrwards
    5b08:	8a e9       	ldi	r24, 0x9A	; 154
    5b0a:	91 e0       	ldi	r25, 0x01	; 1
    5b0c:	53 df       	rcall	.-346    	; 0x59b4 <transmit_string_UART0>
  transmit_string_UART0("Code");
    5b0e:	81 ea       	ldi	r24, 0xA1	; 161
    5b10:	91 e0       	ldi	r25, 0x01	; 1
    5b12:	50 df       	rcall	.-352    	; 0x59b4 <transmit_string_UART0>
    5b14:	9f ef       	ldi	r25, 0xFF	; 255
    5b16:	a1 e1       	ldi	r26, 0x11	; 17
    5b18:	ba e7       	ldi	r27, 0x7A	; 122
    5b1a:	91 50       	subi	r25, 0x01	; 1
    5b1c:	a0 40       	sbci	r26, 0x00	; 0
    5b1e:	b0 40       	sbci	r27, 0x00	; 0
    5b20:	e1 f7       	brne	.-8      	; 0x5b1a <main+0x58>
    5b22:	00 c0       	rjmp	.+0      	; 0x5b24 <main+0x62>
    5b24:	00 00       	nop
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    5b26:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    5b28:	10 92 31 05 	sts	0x0531, r1
    5b2c:	10 92 32 05 	sts	0x0532, r1
    5b30:	10 92 33 05 	sts	0x0533, r1
    5b34:	10 92 34 05 	sts	0x0534, r1
    5b38:	10 92 35 05 	sts	0x0535, r1
    5b3c:	10 92 36 05 	sts	0x0536, r1
    5b40:	10 92 37 05 	sts	0x0537, r1
    5b44:	10 92 38 05 	sts	0x0538, r1
    5b48:	0f 2e       	mov	r0, r31
    5b4a:	f0 e4       	ldi	r31, 0x40	; 64
    5b4c:	2f 2e       	mov	r2, r31
    5b4e:	f5 e0       	ldi	r31, 0x05	; 5
    5b50:	3f 2e       	mov	r3, r31
    5b52:	f0 2d       	mov	r31, r0
       */
	 
	  
  while (1)
  {
	  timer_reset_two_sec();
    5b54:	05 df       	rcall	.-502    	; 0x5960 <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    5b56:	80 91 26 01 	lds	r24, 0x0126
    5b5a:	84 30       	cpi	r24, 0x04	; 4
    5b5c:	31 f4       	brne	.+12     	; 0x5b6a <main+0xa8>
    5b5e:	80 91 25 01 	lds	r24, 0x0125
    5b62:	8c 64       	ori	r24, 0x4C	; 76
    5b64:	80 93 25 01 	sts	0x0125, r24
    5b68:	07 c0       	rjmp	.+14     	; 0x5b78 <main+0xb6>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5b6a:	81 30       	cpi	r24, 0x01	; 1
    5b6c:	29 f4       	brne	.+10     	; 0x5b78 <main+0xb6>
    5b6e:	80 91 25 01 	lds	r24, 0x0125
    5b72:	8c 6c       	ori	r24, 0xCC	; 204
    5b74:	80 93 25 01 	sts	0x0125, r24
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5b78:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5b7a:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5b7c:	ed ee       	ldi	r30, 0xED	; 237
    5b7e:	f4 e0       	ldi	r31, 0x04	; 4
    5b80:	80 81       	ld	r24, Z
    5b82:	82 30       	cpi	r24, 0x02	; 2
    5b84:	59 f4       	brne	.+22     	; 0x5b9c <main+0xda>
    5b86:	ac ee       	ldi	r26, 0xEC	; 236
    5b88:	b4 e0       	ldi	r27, 0x04	; 4
    5b8a:	8c 91       	ld	r24, X
    5b8c:	81 11       	cpse	r24, r1
    5b8e:	06 c0       	rjmp	.+12     	; 0x5b9c <main+0xda>
	{write_data |= (1<<5);}
    5b90:	80 91 25 01 	lds	r24, 0x0125
    5b94:	80 62       	ori	r24, 0x20	; 32
    5b96:	80 93 25 01 	sts	0x0125, r24
    5b9a:	05 c0       	rjmp	.+10     	; 0x5ba6 <main+0xe4>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5b9c:	80 91 25 01 	lds	r24, 0x0125
    5ba0:	8f 7d       	andi	r24, 0xDF	; 223
    5ba2:	80 93 25 01 	sts	0x0125, r24
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5ba6:	80 91 26 01 	lds	r24, 0x0126
    5baa:	81 30       	cpi	r24, 0x01	; 1
    5bac:	49 f4       	brne	.+18     	; 0x5bc0 <main+0xfe>
    5bae:	80 91 13 01 	lds	r24, 0x0113
    5bb2:	81 11       	cpse	r24, r1
    5bb4:	05 c0       	rjmp	.+10     	; 0x5bc0 <main+0xfe>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5bb6:	80 91 25 01 	lds	r24, 0x0125
    5bba:	8b 79       	andi	r24, 0x9B	; 155
    5bbc:	80 93 25 01 	sts	0x0125, r24
	}
	
	wdt_enable(WDTO_2S);
    5bc0:	8f e0       	ldi	r24, 0x0F	; 15
    5bc2:	e8 e1       	ldi	r30, 0x18	; 24
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	0f b6       	in	r0, 0x3f	; 63
    5bc8:	f8 94       	cli
    5bca:	a8 95       	wdr
    5bcc:	e1 bd       	out	0x21, r30	; 33
    5bce:	0f be       	out	0x3f, r0	; 63
    5bd0:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
    5bd2:	a8 95       	wdr
	
PORTA = 0xAA;
    5bd4:	8a ea       	ldi	r24, 0xAA	; 170
    5bd6:	8b bb       	out	0x1b, r24	; 27
TWI_start(); // Function to send start condition
    5bd8:	01 df       	rcall	.-510    	; 0x59dc <TWI_start>
PORTA=0b11000000;
    5bda:	80 ec       	ldi	r24, 0xC0	; 192
    5bdc:	8b bb       	out	0x1b, r24	; 27
TWI_write_address(address); // Function to write address and data direction bit(write) on SDA
    5bde:	80 91 24 01 	lds	r24, 0x0124
    5be2:	0b df       	rcall	.-490    	; 0x59fa <TWI_write_address>

PORTA=0b01100000;
    5be4:	80 e6       	ldi	r24, 0x60	; 96
    5be6:	8b bb       	out	0x1b, r24	; 27
TWI_write_data(write_data);     // Function to write data in slave
    5be8:	80 91 25 01 	lds	r24, 0x0125
    5bec:	29 df       	rcall	.-430    	; 0x5a40 <TWI_write_data>
PORTA=0b10100000;
    5bee:	80 ea       	ldi	r24, 0xA0	; 160
    5bf0:	8b bb       	out	0x1b, r24	; 27
TWI_stop(); // Function to send stop condition
    5bf2:	4a df       	rcall	.-364    	; 0x5a88 <TWI_stop>
    5bf4:	8f e1       	ldi	r24, 0x1F	; 31
    5bf6:	9e e4       	ldi	r25, 0x4E	; 78
    5bf8:	01 97       	sbiw	r24, 0x01	; 1
    5bfa:	f1 f7       	brne	.-4      	; 0x5bf8 <main+0x136>
    5bfc:	00 c0       	rjmp	.+0      	; 0x5bfe <main+0x13c>
    5bfe:	00 00       	nop
    5c00:	09 e3       	ldi	r16, 0x39	; 57
    5c02:	15 e0       	ldi	r17, 0x05	; 5
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
{
	TWI_start();
    5c04:	eb de       	rcall	.-554    	; 0x59dc <TWI_start>
	
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
    5c06:	90 91 23 01 	lds	r25, 0x0123
    5c0a:	80 91 24 01 	lds	r24, 0x0124
    5c0e:	89 0f       	add	r24, r25
    5c10:	06 df       	rcall	.-500    	; 0x5a1e <TWI_read_address>
	TWI_read_data(); // Function to read data from slave
    5c12:	27 df       	rcall	.-434    	; 0x5a62 <TWI_read_data>
	HM_Data[i] = recv_data;
    5c14:	80 91 30 05 	lds	r24, 0x0530
    5c18:	d8 01       	movw	r26, r16
    5c1a:	8d 93       	st	X+, r24
    5c1c:	8d 01       	movw	r16, r26
	TWI_stop();
    5c1e:	34 df       	rcall	.-408    	; 0x5a88 <TWI_stop>

//if (UniversalCycles%CyclesToCollectData == 0){transmit_string_UART0("PRA");}
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
    5c20:	02 15       	cp	r16, r2
    5c22:	13 05       	cpc	r17, r3
    5c24:	79 f7       	brne	.-34     	; 0x5c04 <main+0x142>
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
	TWI_read_data(); // Function to read data from slave
	HM_Data[i] = recv_data;
	TWI_stop();
}
wdt_disable();
    5c26:	88 e1       	ldi	r24, 0x18	; 24
    5c28:	0f b6       	in	r0, 0x3f	; 63
    5c2a:	f8 94       	cli
    5c2c:	81 bd       	out	0x21, r24	; 33
    5c2e:	11 bc       	out	0x21, r1	; 33
    5c30:	0f be       	out	0x3f, r0	; 63
    5c32:	ef e1       	ldi	r30, 0x1F	; 31
    5c34:	fe e4       	ldi	r31, 0x4E	; 78
    5c36:	31 97       	sbiw	r30, 0x01	; 1
    5c38:	f1 f7       	brne	.-4      	; 0x5c36 <main+0x174>
    5c3a:	00 c0       	rjmp	.+0      	; 0x5c3c <main+0x17a>
    5c3c:	00 00       	nop
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5c3e:	a7 ed       	ldi	r26, 0xD7	; 215
    5c40:	b4 e0       	ldi	r27, 0x04	; 4
    5c42:	8d 90       	ld	r8, X+
    5c44:	9d 90       	ld	r9, X+
    5c46:	ad 90       	ld	r10, X+
    5c48:	bc 90       	ld	r11, X
    5c4a:	13 97       	sbiw	r26, 0x03	; 3
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5c4c:	cd 90       	ld	r12, X+
    5c4e:	dd 90       	ld	r13, X+
    5c50:	ed 90       	ld	r14, X+
    5c52:	fc 90       	ld	r15, X
G3 = (uint8_t)Current_state.gps.lon;
    5c54:	ab ed       	ldi	r26, 0xDB	; 219
    5c56:	b4 e0       	ldi	r27, 0x04	; 4
    5c58:	8d 91       	ld	r24, X+
    5c5a:	9d 91       	ld	r25, X+
    5c5c:	0d 90       	ld	r0, X+
    5c5e:	bc 91       	ld	r27, X
    5c60:	a0 2d       	mov	r26, r0
    5c62:	89 83       	std	Y+1, r24	; 0x01
    5c64:	9a 83       	std	Y+2, r25	; 0x02
    5c66:	ab 83       	std	Y+3, r26	; 0x03
    5c68:	bc 83       	std	Y+4, r27	; 0x04
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5c6a:	ab ed       	ldi	r26, 0xDB	; 219
    5c6c:	b4 e0       	ldi	r27, 0x04	; 4
    5c6e:	8d 91       	ld	r24, X+
    5c70:	9d 91       	ld	r25, X+
    5c72:	0d 90       	ld	r0, X+
    5c74:	bc 91       	ld	r27, X
    5c76:	a0 2d       	mov	r26, r0
    5c78:	8d 83       	std	Y+5, r24	; 0x05
    5c7a:	9e 83       	std	Y+6, r25	; 0x06
    5c7c:	af 83       	std	Y+7, r26	; 0x07
    5c7e:	b8 87       	std	Y+8, r27	; 0x08
G5 = Current_state.gps.seconds;
    5c80:	e5 ee       	ldi	r30, 0xE5	; 229
    5c82:	f4 e0       	ldi	r31, 0x04	; 4
    5c84:	50 80       	ld	r5, Z
G6 = Current_state.gps.minutes;
    5c86:	a4 ee       	ldi	r26, 0xE4	; 228
    5c88:	b4 e0       	ldi	r27, 0x04	; 4
    5c8a:	6c 90       	ld	r6, X
G7 = Current_state.gps.hours;
    5c8c:	e3 ee       	ldi	r30, 0xE3	; 227
    5c8e:	f4 e0       	ldi	r31, 0x04	; 4
    5c90:	70 80       	ld	r7, Z
G8 = Current_state.gps.date;
    5c92:	a6 ee       	ldi	r26, 0xE6	; 230
    5c94:	b4 e0       	ldi	r27, 0x04	; 4
    5c96:	0c 91       	ld	r16, X
G9 = (uint8_t)(q_o[0]*127);
    5c98:	20 e0       	ldi	r18, 0x00	; 0
    5c9a:	30 e0       	ldi	r19, 0x00	; 0
    5c9c:	4e ef       	ldi	r20, 0xFE	; 254
    5c9e:	52 e4       	ldi	r21, 0x42	; 66
    5ca0:	e8 e8       	ldi	r30, 0x88	; 136
    5ca2:	f4 e0       	ldi	r31, 0x04	; 4
    5ca4:	60 81       	ld	r22, Z
    5ca6:	71 81       	ldd	r23, Z+1	; 0x01
    5ca8:	82 81       	ldd	r24, Z+2	; 0x02
    5caa:	93 81       	ldd	r25, Z+3	; 0x03
    5cac:	80 d6       	rcall	.+3328   	; 0x69ae <__mulsf3>
    5cae:	ce d4       	rcall	.+2460   	; 0x664c <__fixunssfsi>
    5cb0:	16 2f       	mov	r17, r22
G10 = (uint8_t)(q_o[1]*127);
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	4e ef       	ldi	r20, 0xFE	; 254
    5cb8:	52 e4       	ldi	r21, 0x42	; 66
    5cba:	ac e8       	ldi	r26, 0x8C	; 140
    5cbc:	b4 e0       	ldi	r27, 0x04	; 4
    5cbe:	6d 91       	ld	r22, X+
    5cc0:	7d 91       	ld	r23, X+
    5cc2:	8d 91       	ld	r24, X+
    5cc4:	9c 91       	ld	r25, X
    5cc6:	73 d6       	rcall	.+3302   	; 0x69ae <__mulsf3>
    5cc8:	c1 d4       	rcall	.+2434   	; 0x664c <__fixunssfsi>
    5cca:	69 87       	std	Y+9, r22	; 0x09
G11 = (uint8_t)(q_o[2]*127);
    5ccc:	20 e0       	ldi	r18, 0x00	; 0
    5cce:	30 e0       	ldi	r19, 0x00	; 0
    5cd0:	4e ef       	ldi	r20, 0xFE	; 254
    5cd2:	52 e4       	ldi	r21, 0x42	; 66
    5cd4:	60 91 90 04 	lds	r22, 0x0490
    5cd8:	70 91 91 04 	lds	r23, 0x0491
    5cdc:	80 91 92 04 	lds	r24, 0x0492
    5ce0:	90 91 93 04 	lds	r25, 0x0493
    5ce4:	64 d6       	rcall	.+3272   	; 0x69ae <__mulsf3>
    5ce6:	b2 d4       	rcall	.+2404   	; 0x664c <__fixunssfsi>
    5ce8:	46 2e       	mov	r4, r22
G12 = (uint8_t)(q_o[3]*127);
    5cea:	20 e0       	ldi	r18, 0x00	; 0
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	4e ef       	ldi	r20, 0xFE	; 254
    5cf0:	52 e4       	ldi	r21, 0x42	; 66
    5cf2:	60 91 94 04 	lds	r22, 0x0494
    5cf6:	70 91 95 04 	lds	r23, 0x0495
    5cfa:	80 91 96 04 	lds	r24, 0x0496
    5cfe:	90 91 97 04 	lds	r25, 0x0497
    5d02:	55 d6       	rcall	.+3242   	; 0x69ae <__mulsf3>
    5d04:	a3 d4       	rcall	.+2374   	; 0x664c <__fixunssfsi>
}
wdt_disable();
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5d06:	80 92 14 01 	sts	0x0114, r8
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5d0a:	d0 92 15 01 	sts	0x0115, r13
G3 = (uint8_t)Current_state.gps.lon;
    5d0e:	b9 81       	ldd	r27, Y+1	; 0x01
    5d10:	b0 93 16 01 	sts	0x0116, r27
G4 = (uint8_t)((Current_state.gps.lon)>>8);
    5d14:	ee 81       	ldd	r30, Y+6	; 0x06
    5d16:	e0 93 17 01 	sts	0x0117, r30

GPS_Data[0] = G1;
GPS_Data[1] = G2;
GPS_Data[2] = G3;
GPS_Data[3] = G4;
GPS_Data[4] = G5;
    5d1a:	50 92 18 01 	sts	0x0118, r5
GPS_Data[5] = G6;
    5d1e:	60 92 19 01 	sts	0x0119, r6
GPS_Data[6] = G7;
    5d22:	70 92 1a 01 	sts	0x011A, r7
GPS_Data[7] = G8;
    5d26:	00 93 1b 01 	sts	0x011B, r16
GPS_Data[8] = G9;
    5d2a:	10 93 1c 01 	sts	0x011C, r17
GPS_Data[9] = G10;
    5d2e:	f9 85       	ldd	r31, Y+9	; 0x09
    5d30:	f0 93 1d 01 	sts	0x011D, r31
GPS_Data[10] = G11;
    5d34:	40 92 1e 01 	sts	0x011E, r4
GPS_Data[11] = G12;
    5d38:	60 93 1f 01 	sts	0x011F, r22
//////////////////////////////////////////

if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    5d3c:	80 91 80 04 	lds	r24, 0x0480
    5d40:	81 30       	cpi	r24, 0x01	; 1
    5d42:	29 f0       	breq	.+10     	; 0x5d4e <main+0x28c>
    5d44:	80 91 7f 04 	lds	r24, 0x047F
    5d48:	81 30       	cpi	r24, 0x01	; 1
    5d4a:	09 f0       	breq	.+2      	; 0x5d4e <main+0x28c>
    5d4c:	4f c0       	rjmp	.+158    	; 0x5dec <main+0x32a>
{
	
	if(FirstTimeOuter ==0)
    5d4e:	80 91 85 04 	lds	r24, 0x0485
    5d52:	81 11       	cpse	r24, r1
    5d54:	0e c0       	rjmp	.+28     	; 0x5d72 <main+0x2b0>
	{
		
	FirstTimeInner = 0;
    5d56:	10 92 84 04 	sts	0x0484, r1
	FirstTimeNormal = 0;
    5d5a:	10 92 83 04 	sts	0x0483, r1
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    5d5e:	80 91 25 01 	lds	r24, 0x0125
    5d62:	8d 7f       	andi	r24, 0xFD	; 253
    5d64:	80 61       	ori	r24, 0x10	; 16
    5d66:	80 93 25 01 	sts	0x0125, r24
	FirstTimeOuter = 1;
    5d6a:	81 e0       	ldi	r24, 0x01	; 1
    5d6c:	80 93 85 04 	sts	0x0485, r24
    5d70:	37 c0       	rjmp	.+110    	; 0x5de0 <main+0x31e>
	}
	else if(FirstTimeOuter == 1)
    5d72:	81 30       	cpi	r24, 0x01	; 1
    5d74:	e9 f4       	brne	.+58     	; 0x5db0 <main+0x2ee>
	{
		
		if(countu ==0)
    5d76:	80 91 81 04 	lds	r24, 0x0481
    5d7a:	81 11       	cpse	r24, r1
    5d7c:	15 c0       	rjmp	.+42     	; 0x5da8 <main+0x2e6>
    5d7e:	83 e0       	ldi	r24, 0x03	; 3
    5d80:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5d82:	31 eb       	ldi	r19, 0xB1	; 177
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5d84:	2f ef       	ldi	r18, 0xFF	; 255
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5d86:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5d88:	77 9b       	sbis	0x0e, 7	; 14
    5d8a:	fe cf       	rjmp	.-4      	; 0x5d88 <main+0x2c6>
			PORTA = 0xFF;
    5d8c:	2b bb       	out	0x1b, r18	; 27
    5d8e:	af ec       	ldi	r26, 0xCF	; 207
    5d90:	b7 e0       	ldi	r27, 0x07	; 7
    5d92:	11 97       	sbiw	r26, 0x01	; 1
    5d94:	f1 f7       	brne	.-4      	; 0x5d92 <main+0x2d0>
    5d96:	00 c0       	rjmp	.+0      	; 0x5d98 <main+0x2d6>
    5d98:	00 00       	nop
    5d9a:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    5d9c:	00 97       	sbiw	r24, 0x00	; 0
    5d9e:	99 f7       	brne	.-26     	; 0x5d86 <main+0x2c4>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    5da0:	82 e0       	ldi	r24, 0x02	; 2
    5da2:	80 93 85 04 	sts	0x0485, r24
    5da6:	1c c0       	rjmp	.+56     	; 0x5de0 <main+0x31e>
		}
		else if(countu == 1)
    5da8:	81 30       	cpi	r24, 0x01	; 1
    5daa:	d1 f4       	brne	.+52     	; 0x5de0 <main+0x31e>
		{
			
			SendHM();
    5dac:	76 de       	rcall	.-788    	; 0x5a9a <SendHM>
    5dae:	18 c0       	rjmp	.+48     	; 0x5de0 <main+0x31e>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    5db0:	74 de       	rcall	.-792    	; 0x5a9a <SendHM>
		if(countu ==0)
    5db2:	80 91 81 04 	lds	r24, 0x0481
    5db6:	81 11       	cpse	r24, r1
    5db8:	13 c0       	rjmp	.+38     	; 0x5de0 <main+0x31e>
    5dba:	e4 e1       	ldi	r30, 0x14	; 20
    5dbc:	f1 e0       	ldi	r31, 0x01	; 1
    5dbe:	80 e2       	ldi	r24, 0x20	; 32
    5dc0:	91 e0       	ldi	r25, 0x01	; 1
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
				while(!(SPSR & (1<<SPIF) ));
				PORTA = 0xFF;
    5dc2:	3f ef       	ldi	r19, 0xFF	; 255
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    5dc4:	21 91       	ld	r18, Z+
    5dc6:	2f b9       	out	0x0f, r18	; 15
				while(!(SPSR & (1<<SPIF) ));
    5dc8:	77 9b       	sbis	0x0e, 7	; 14
    5dca:	fe cf       	rjmp	.-4      	; 0x5dc8 <main+0x306>
				PORTA = 0xFF;
    5dcc:	3b bb       	out	0x1b, r19	; 27
    5dce:	af ec       	ldi	r26, 0xCF	; 207
    5dd0:	b7 e0       	ldi	r27, 0x07	; 7
    5dd2:	11 97       	sbiw	r26, 0x01	; 1
    5dd4:	f1 f7       	brne	.-4      	; 0x5dd2 <main+0x310>
    5dd6:	00 c0       	rjmp	.+0      	; 0x5dd8 <main+0x316>
    5dd8:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    5dda:	e8 17       	cp	r30, r24
    5ddc:	f9 07       	cpc	r31, r25
    5dde:	91 f7       	brne	.-28     	; 0x5dc4 <main+0x302>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    5de0:	80 91 82 04 	lds	r24, 0x0482
    5de4:	8e 5f       	subi	r24, 0xFE	; 254
    5de6:	80 93 82 04 	sts	0x0482, r24
    5dea:	97 c0       	rjmp	.+302    	; 0x5f1a <main+0x458>
}
else if(flag_mumbai ==1) //Check for Circles
    5dec:	80 91 7e 04 	lds	r24, 0x047E
    5df0:	81 30       	cpi	r24, 0x01	; 1
    5df2:	09 f0       	breq	.+2      	; 0x5df6 <main+0x334>
    5df4:	4f c0       	rjmp	.+158    	; 0x5e94 <main+0x3d2>
{
	
	if(FirstTimeInner ==0)
    5df6:	80 91 84 04 	lds	r24, 0x0484
    5dfa:	81 11       	cpse	r24, r1
    5dfc:	0e c0       	rjmp	.+28     	; 0x5e1a <main+0x358>
	{
		
		FirstTimeOuter = 0;
    5dfe:	10 92 85 04 	sts	0x0485, r1
		FirstTimeNormal = 0;
    5e02:	10 92 83 04 	sts	0x0483, r1
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    5e06:	80 91 25 01 	lds	r24, 0x0125
    5e0a:	8d 7f       	andi	r24, 0xFD	; 253
    5e0c:	80 61       	ori	r24, 0x10	; 16
    5e0e:	80 93 25 01 	sts	0x0125, r24
		FirstTimeInner = 1;
    5e12:	81 e0       	ldi	r24, 0x01	; 1
    5e14:	80 93 84 04 	sts	0x0484, r24
    5e18:	37 c0       	rjmp	.+110    	; 0x5e88 <main+0x3c6>
		
	}
	else if(FirstTimeInner == 1)
    5e1a:	81 30       	cpi	r24, 0x01	; 1
    5e1c:	e9 f4       	brne	.+58     	; 0x5e58 <main+0x396>
	{
		
		if(countu ==0)
    5e1e:	80 91 81 04 	lds	r24, 0x0481
    5e22:	81 11       	cpse	r24, r1
    5e24:	15 c0       	rjmp	.+42     	; 0x5e50 <main+0x38e>
    5e26:	83 e0       	ldi	r24, 0x03	; 3
    5e28:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5e2a:	31 ef       	ldi	r19, 0xF1	; 241
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5e2c:	2f ef       	ldi	r18, 0xFF	; 255
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5e2e:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5e30:	77 9b       	sbis	0x0e, 7	; 14
    5e32:	fe cf       	rjmp	.-4      	; 0x5e30 <main+0x36e>
			PORTA = 0xFF;
    5e34:	2b bb       	out	0x1b, r18	; 27
    5e36:	ef ec       	ldi	r30, 0xCF	; 207
    5e38:	f7 e0       	ldi	r31, 0x07	; 7
    5e3a:	31 97       	sbiw	r30, 0x01	; 1
    5e3c:	f1 f7       	brne	.-4      	; 0x5e3a <main+0x378>
    5e3e:	00 c0       	rjmp	.+0      	; 0x5e40 <main+0x37e>
    5e40:	00 00       	nop
    5e42:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    5e44:	00 97       	sbiw	r24, 0x00	; 0
    5e46:	99 f7       	brne	.-26     	; 0x5e2e <main+0x36c>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    5e48:	82 e0       	ldi	r24, 0x02	; 2
    5e4a:	80 93 84 04 	sts	0x0484, r24
    5e4e:	1c c0       	rjmp	.+56     	; 0x5e88 <main+0x3c6>
		}
		
		else if(countu == 1)
    5e50:	81 30       	cpi	r24, 0x01	; 1
    5e52:	d1 f4       	brne	.+52     	; 0x5e88 <main+0x3c6>
		{
			
			SendHM();
    5e54:	22 de       	rcall	.-956    	; 0x5a9a <SendHM>
    5e56:	18 c0       	rjmp	.+48     	; 0x5e88 <main+0x3c6>
		
	}
	else
	{
		
		SendHM();
    5e58:	20 de       	rcall	.-960    	; 0x5a9a <SendHM>
		if(countu ==0)
    5e5a:	80 91 81 04 	lds	r24, 0x0481
    5e5e:	81 11       	cpse	r24, r1
    5e60:	13 c0       	rjmp	.+38     	; 0x5e88 <main+0x3c6>
    5e62:	e4 e1       	ldi	r30, 0x14	; 20
    5e64:	f1 e0       	ldi	r31, 0x01	; 1
    5e66:	80 e2       	ldi	r24, 0x20	; 32
    5e68:	91 e0       	ldi	r25, 0x01	; 1
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5e6a:	3f ef       	ldi	r19, 0xFF	; 255
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    5e6c:	21 91       	ld	r18, Z+
    5e6e:	2f b9       	out	0x0f, r18	; 15
			while(!(SPSR & (1<<SPIF) ));
    5e70:	77 9b       	sbis	0x0e, 7	; 14
    5e72:	fe cf       	rjmp	.-4      	; 0x5e70 <main+0x3ae>
			PORTA = 0xFF;
    5e74:	3b bb       	out	0x1b, r19	; 27
    5e76:	af ec       	ldi	r26, 0xCF	; 207
    5e78:	b7 e0       	ldi	r27, 0x07	; 7
    5e7a:	11 97       	sbiw	r26, 0x01	; 1
    5e7c:	f1 f7       	brne	.-4      	; 0x5e7a <main+0x3b8>
    5e7e:	00 c0       	rjmp	.+0      	; 0x5e80 <main+0x3be>
    5e80:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    5e82:	e8 17       	cp	r30, r24
    5e84:	f9 07       	cpc	r31, r25
    5e86:	91 f7       	brne	.-28     	; 0x5e6c <main+0x3aa>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    5e88:	80 91 82 04 	lds	r24, 0x0482
    5e8c:	8e 5f       	subi	r24, 0xFE	; 254
    5e8e:	80 93 82 04 	sts	0x0482, r24
    5e92:	43 c0       	rjmp	.+134    	; 0x5f1a <main+0x458>
}
else
{

	countd = 0;
    5e94:	10 92 82 04 	sts	0x0482, r1
	countu = 0;
    5e98:	10 92 81 04 	sts	0x0481, r1
	if(FirstTimeNormal == 0)
    5e9c:	80 91 83 04 	lds	r24, 0x0483
    5ea0:	81 11       	cpse	r24, r1
    5ea2:	14 c0       	rjmp	.+40     	; 0x5ecc <main+0x40a>
    5ea4:	83 e0       	ldi	r24, 0x03	; 3
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5ea8:	31 ed       	ldi	r19, 0xD1	; 209
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
    5eaa:	2f ef       	ldi	r18, 0xFF	; 255
	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5eac:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5eae:	77 9b       	sbis	0x0e, 7	; 14
    5eb0:	fe cf       	rjmp	.-4      	; 0x5eae <main+0x3ec>
			PORTA = 0xFF;
    5eb2:	2b bb       	out	0x1b, r18	; 27
    5eb4:	ef ec       	ldi	r30, 0xCF	; 207
    5eb6:	f7 e0       	ldi	r31, 0x07	; 7
    5eb8:	31 97       	sbiw	r30, 0x01	; 1
    5eba:	f1 f7       	brne	.-4      	; 0x5eb8 <main+0x3f6>
    5ebc:	00 c0       	rjmp	.+0      	; 0x5ebe <main+0x3fc>
    5ebe:	00 00       	nop
    5ec0:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    5ec2:	00 97       	sbiw	r24, 0x00	; 0
    5ec4:	99 f7       	brne	.-26     	; 0x5eac <main+0x3ea>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	80 93 83 04 	sts	0x0483, r24
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    5ecc:	40 91 21 01 	lds	r20, 0x0121
    5ed0:	50 91 22 01 	lds	r21, 0x0122
    5ed4:	9a 01       	movw	r18, r20
    5ed6:	ad ec       	ldi	r26, 0xCD	; 205
    5ed8:	bc ec       	ldi	r27, 0xCC	; 204
    5eda:	70 d7       	rcall	.+3808   	; 0x6dbc <__umulhisi3>
    5edc:	96 95       	lsr	r25
    5ede:	87 95       	ror	r24
    5ee0:	96 95       	lsr	r25
    5ee2:	87 95       	ror	r24
    5ee4:	96 95       	lsr	r25
    5ee6:	87 95       	ror	r24
    5ee8:	9c 01       	movw	r18, r24
    5eea:	22 0f       	add	r18, r18
    5eec:	33 1f       	adc	r19, r19
    5eee:	88 0f       	add	r24, r24
    5ef0:	99 1f       	adc	r25, r25
    5ef2:	88 0f       	add	r24, r24
    5ef4:	99 1f       	adc	r25, r25
    5ef6:	88 0f       	add	r24, r24
    5ef8:	99 1f       	adc	r25, r25
    5efa:	82 0f       	add	r24, r18
    5efc:	93 1f       	adc	r25, r19
    5efe:	48 17       	cp	r20, r24
    5f00:	59 07       	cpc	r21, r25
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <main+0x444>
    5f04:	ca dd       	rcall	.-1132   	; 0x5a9a <SendHM>
	write_data &= ~(1<<4);
    5f06:	80 91 25 01 	lds	r24, 0x0125
    5f0a:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    5f0c:	82 60       	ori	r24, 0x02	; 2
    5f0e:	80 93 25 01 	sts	0x0125, r24
	FirstTimeInner = 0;
    5f12:	10 92 84 04 	sts	0x0484, r1
	FirstTimeOuter = 0;
    5f16:	10 92 85 04 	sts	0x0485, r1
}

if ((countd >120)&&(countd <=150))
    5f1a:	80 91 82 04 	lds	r24, 0x0482
    5f1e:	97 e8       	ldi	r25, 0x87	; 135
    5f20:	98 0f       	add	r25, r24
    5f22:	9e 31       	cpi	r25, 0x1E	; 30
    5f24:	e0 f4       	brcc	.+56     	; 0x5f5e <main+0x49c>
{
	
	write_data &= ~(1<<4); //switch off downlink
    5f26:	90 91 25 01 	lds	r25, 0x0125
    5f2a:	9f 7e       	andi	r25, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    5f2c:	92 60       	ori	r25, 0x02	; 2
    5f2e:	90 93 25 01 	sts	0x0125, r25
	if (countd == 122)
    5f32:	8a 37       	cpi	r24, 0x7A	; 122
    5f34:	89 f4       	brne	.+34     	; 0x5f58 <main+0x496>
    5f36:	83 e0       	ldi	r24, 0x03	; 3
    5f38:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5f3a:	31 ed       	ldi	r19, 0xD1	; 209
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
    5f3c:	2f ef       	ldi	r18, 0xFF	; 255
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5f3e:	3f b9       	out	0x0f, r19	; 15
		while(!(SPSR & (1<<SPIF) ));
    5f40:	77 9b       	sbis	0x0e, 7	; 14
    5f42:	fe cf       	rjmp	.-4      	; 0x5f40 <main+0x47e>
		PORTA = 0xFF;
    5f44:	2b bb       	out	0x1b, r18	; 27
    5f46:	af ec       	ldi	r26, 0xCF	; 207
    5f48:	b7 e0       	ldi	r27, 0x07	; 7
    5f4a:	11 97       	sbiw	r26, 0x01	; 1
    5f4c:	f1 f7       	brne	.-4      	; 0x5f4a <main+0x488>
    5f4e:	00 c0       	rjmp	.+0      	; 0x5f50 <main+0x48e>
    5f50:	00 00       	nop
    5f52:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    5f54:	00 97       	sbiw	r24, 0x00	; 0
    5f56:	99 f7       	brne	.-26     	; 0x5f3e <main+0x47c>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	80 93 81 04 	sts	0x0481, r24
}
if (countd >150)
    5f5e:	80 91 82 04 	lds	r24, 0x0482
    5f62:	87 39       	cpi	r24, 0x97	; 151
    5f64:	70 f0       	brcs	.+28     	; 0x5f82 <main+0x4c0>
{

	countd=0;
    5f66:	10 92 82 04 	sts	0x0482, r1
	countu=0;
    5f6a:	10 92 81 04 	sts	0x0481, r1
	write_data &= ~(1<<1); 
    5f6e:	80 91 25 01 	lds	r24, 0x0125
    5f72:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    5f74:	80 61       	ori	r24, 0x10	; 16
    5f76:	80 93 25 01 	sts	0x0125, r24
	FirstTimeOuter = 0;
    5f7a:	10 92 85 04 	sts	0x0485, r1
	FirstTimeInner = 0;
    5f7e:	10 92 84 04 	sts	0x0484, r1
		
}

	
		PORTB |= (1<<PB0);
    5f82:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    5f84:	c5 98       	cbi	0x18, 5	; 24
     	
     	if(counter1 == 0) //OC Check for Beacon
    5f86:	80 91 86 04 	lds	r24, 0x0486
    5f8a:	90 91 87 04 	lds	r25, 0x0487
    5f8e:	89 2b       	or	r24, r25
    5f90:	79 f4       	brne	.+30     	; 0x5fb0 <main+0x4ee>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    5f92:	80 91 3f 05 	lds	r24, 0x053F
    5f96:	88 23       	and	r24, r24
    5f98:	4c f1       	brlt	.+82     	; 0x5fec <main+0x52a>
	     	{
		     	counter1 = 1;
    5f9a:	81 e0       	ldi	r24, 0x01	; 1
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	90 93 87 04 	sts	0x0487, r25
    5fa2:	80 93 86 04 	sts	0x0486, r24
		     	write_data &= ~(1<<7);
    5fa6:	80 91 25 01 	lds	r24, 0x0125
    5faa:	8f 77       	andi	r24, 0x7F	; 127
    5fac:	80 93 25 01 	sts	0x0125, r24
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    5fb0:	80 91 86 04 	lds	r24, 0x0486
    5fb4:	90 91 87 04 	lds	r25, 0x0487
    5fb8:	9c 01       	movw	r18, r24
    5fba:	21 50       	subi	r18, 0x01	; 1
    5fbc:	31 09       	sbc	r19, r1
    5fbe:	26 30       	cpi	r18, 0x06	; 6
    5fc0:	31 05       	cpc	r19, r1
    5fc2:	28 f4       	brcc	.+10     	; 0x5fce <main+0x50c>
     	{
	     	counter1 = counter1+1;
    5fc4:	01 96       	adiw	r24, 0x01	; 1
    5fc6:	90 93 87 04 	sts	0x0487, r25
    5fca:	80 93 86 04 	sts	0x0486, r24
     	}
     	
     	if(counter1 == 7)
    5fce:	80 91 86 04 	lds	r24, 0x0486
    5fd2:	90 91 87 04 	lds	r25, 0x0487
    5fd6:	07 97       	sbiw	r24, 0x07	; 7
    5fd8:	49 f4       	brne	.+18     	; 0x5fec <main+0x52a>
     	{
	     	counter1 = 0;
    5fda:	10 92 87 04 	sts	0x0487, r1
    5fde:	10 92 86 04 	sts	0x0486, r1
	     	write_data |= (1<<7);
    5fe2:	80 91 25 01 	lds	r24, 0x0125
    5fe6:	80 68       	ori	r24, 0x80	; 128
    5fe8:	80 93 25 01 	sts	0x0125, r24
		 
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    5fec:	80 91 3f 05 	lds	r24, 0x053F
    5ff0:	85 fd       	sbrc	r24, 5
    5ff2:	05 c0       	rjmp	.+10     	; 0x5ffe <main+0x53c>
			 {
				Current_state.gps.gps_OC = 1;
    5ff4:	81 e0       	ldi	r24, 0x01	; 1
    5ff6:	ec ee       	ldi	r30, 0xEC	; 236
    5ff8:	f4 e0       	ldi	r31, 0x04	; 4
    5ffa:	80 83       	st	Z, r24
    5ffc:	03 c0       	rjmp	.+6      	; 0x6004 <main+0x542>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    5ffe:	ac ee       	ldi	r26, 0xEC	; 236
    6000:	b4 e0       	ldi	r27, 0x04	; 4
    6002:	1c 92       	st	X, r1
			}


	wdt_enable(WDTO_2S);
    6004:	8f e0       	ldi	r24, 0x0F	; 15
    6006:	e8 e1       	ldi	r30, 0x18	; 24
    6008:	f0 e0       	ldi	r31, 0x00	; 0
    600a:	0f b6       	in	r0, 0x3f	; 63
    600c:	f8 94       	cli
    600e:	a8 95       	wdr
    6010:	e1 bd       	out	0x21, r30	; 33
    6012:	0f be       	out	0x3f, r0	; 63
    6014:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
    6016:	a8 95       	wdr

	control();
    6018:	0e 94 4b 08 	call	0x1096	; 0x1096 <control>
	wdt_disable();
    601c:	88 e1       	ldi	r24, 0x18	; 24
    601e:	0f b6       	in	r0, 0x3f	; 63
    6020:	f8 94       	cli
    6022:	81 bd       	out	0x21, r24	; 33
    6024:	11 bc       	out	0x21, r1	; 33
    6026:	0f be       	out	0x3f, r0	; 63
	transmit_UART0('a');
    6028:	81 e6       	ldi	r24, 0x61	; 97
    602a:	c0 dc       	rcall	.-1664   	; 0x59ac <transmit_UART0>
    602c:	0f 2e       	mov	r0, r31
    602e:	f4 e1       	ldi	r31, 0x14	; 20
    6030:	ef 2e       	mov	r14, r31
    6032:	f1 e0       	ldi	r31, 0x01	; 1
    6034:	ff 2e       	mov	r15, r31
    6036:	f0 2d       	mov	r31, r0
    6038:	00 e2       	ldi	r16, 0x20	; 32
    603a:	11 e0       	ldi	r17, 0x01	; 1
	for (int i=0;i<12;i++)
	{
		transmit_UART0(GPS_Data[i]);
    603c:	d7 01       	movw	r26, r14
    603e:	8d 91       	ld	r24, X+
    6040:	7d 01       	movw	r14, r26
    6042:	b4 dc       	rcall	.-1688   	; 0x59ac <transmit_UART0>
	wdt_reset();

	control();
	wdt_disable();
	transmit_UART0('a');
	for (int i=0;i<12;i++)
    6044:	e0 16       	cp	r14, r16
    6046:	f1 06       	cpc	r15, r17
    6048:	c9 f7       	brne	.-14     	; 0x603c <main+0x57a>
	{
		transmit_UART0(GPS_Data[i]);
	}
	transmit_UART0('a');
    604a:	81 e6       	ldi	r24, 0x61	; 97
    604c:	af dc       	rcall	.-1698   	; 0x59ac <transmit_UART0>
    604e:	09 e3       	ldi	r16, 0x39	; 57
    6050:	15 e0       	ldi	r17, 0x05	; 5
	//transmit_UART0(flag_india);
	//transmit_UART0(flag_mumbai);
	//transmit_UART0(flag_france);
	for (int i = 0; i<7;i++)
	{
		transmit_UART0(HM_Data[i]);
    6052:	f8 01       	movw	r30, r16
    6054:	81 91       	ld	r24, Z+
    6056:	8f 01       	movw	r16, r30
    6058:	a9 dc       	rcall	.-1710   	; 0x59ac <transmit_UART0>
	//int w = 2;Current_state.gps.lat = 168;Current_state.gps.lon = 96;
	//flag_india = (int8_t)(Current_state.gps.lat);//(pow((Current_state.gps.lat - 22.5833),2) + cos(Current_state.gps.lat*3.141592/180)*pow((Current_state.gps.lon - 82.7666),2))*255/70000;
	//transmit_UART0(flag_india);
	//transmit_UART0(flag_mumbai);
	//transmit_UART0(flag_france);
	for (int i = 0; i<7;i++)
    605a:	20 16       	cp	r2, r16
    605c:	31 06       	cpc	r3, r17
    605e:	c9 f7       	brne	.-14     	; 0x6052 <main+0x590>
	{
		transmit_UART0(HM_Data[i]);
	}
	
	light_main = light_cal();	
    6060:	0e 94 70 24 	call	0x48e0	; 0x48e0 <light_cal>
    6064:	80 93 13 01 	sts	0x0113, r24
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    6068:	80 91 3f 05 	lds	r24, 0x053F
    606c:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    606e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    6072:	20 91 31 05 	lds	r18, 0x0531
    6076:	30 91 32 05 	lds	r19, 0x0532
    607a:	40 91 33 05 	lds	r20, 0x0533
    607e:	50 91 34 05 	lds	r21, 0x0534
    6082:	60 91 35 05 	lds	r22, 0x0535
    6086:	70 91 36 05 	lds	r23, 0x0536
    608a:	80 91 37 05 	lds	r24, 0x0537
    608e:	90 91 38 05 	lds	r25, 0x0538
    6092:	a2 e0       	ldi	r26, 0x02	; 2
    6094:	c4 d6       	rcall	.+3464   	; 0x6e1e <__adddi3_s8>
    6096:	20 93 31 05 	sts	0x0531, r18
    609a:	30 93 32 05 	sts	0x0532, r19
    609e:	40 93 33 05 	sts	0x0533, r20
    60a2:	50 93 34 05 	sts	0x0534, r21
    60a6:	60 93 35 05 	sts	0x0535, r22
    60aa:	70 93 36 05 	sts	0x0536, r23
    60ae:	80 93 37 05 	sts	0x0537, r24
    60b2:	90 93 38 05 	sts	0x0538, r25
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
    60b6:	a7 ed       	ldi	r26, 0xD7	; 215
    60b8:	b4 e0       	ldi	r27, 0x04	; 4
    60ba:	6d 91       	ld	r22, X+
    60bc:	7d 91       	ld	r23, X+
    60be:	8d 91       	ld	r24, X+
    60c0:	9c 91       	ld	r25, X
    60c2:	f2 d2       	rcall	.+1508   	; 0x66a8 <__floatsisf>
    60c4:	20 e0       	ldi	r18, 0x00	; 0
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	48 ec       	ldi	r20, 0xC8	; 200
    60ca:	52 e4       	ldi	r21, 0x42	; 66
    60cc:	52 d2       	rcall	.+1188   	; 0x6572 <__divsf3>
    60ce:	29 e9       	ldi	r18, 0x99	; 153
    60d0:	3a ea       	ldi	r19, 0xAA	; 170
    60d2:	44 eb       	ldi	r20, 0xB4	; 180
    60d4:	51 e4       	ldi	r21, 0x41	; 65
    60d6:	68 d1       	rcall	.+720    	; 0x63a8 <__subsf3>
    60d8:	69 83       	std	Y+1, r22	; 0x01
    60da:	7a 83       	std	Y+2, r23	; 0x02
    60dc:	8b 83       	std	Y+3, r24	; 0x03
    60de:	9c 83       	std	Y+4, r25	; 0x04
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
    60e0:	eb ed       	ldi	r30, 0xDB	; 219
    60e2:	f4 e0       	ldi	r31, 0x04	; 4
    60e4:	60 81       	ld	r22, Z
    60e6:	71 81       	ldd	r23, Z+1	; 0x01
    60e8:	82 81       	ldd	r24, Z+2	; 0x02
    60ea:	93 81       	ldd	r25, Z+3	; 0x03
    60ec:	dd d2       	rcall	.+1466   	; 0x66a8 <__floatsisf>
    60ee:	20 e0       	ldi	r18, 0x00	; 0
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	48 ec       	ldi	r20, 0xC8	; 200
    60f4:	52 e4       	ldi	r21, 0x42	; 66
    60f6:	3d d2       	rcall	.+1146   	; 0x6572 <__divsf3>
    60f8:	20 e8       	ldi	r18, 0x80	; 128
    60fa:	38 e8       	ldi	r19, 0x88	; 136
    60fc:	45 ea       	ldi	r20, 0xA5	; 165
    60fe:	52 e4       	ldi	r21, 0x42	; 66
    6100:	53 d1       	rcall	.+678    	; 0x63a8 <__subsf3>
    6102:	2b 01       	movw	r4, r22
    6104:	3c 01       	movw	r6, r24
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    6106:	a7 ed       	ldi	r26, 0xD7	; 215
    6108:	b4 e0       	ldi	r27, 0x04	; 4
    610a:	6d 91       	ld	r22, X+
    610c:	7d 91       	ld	r23, X+
    610e:	8d 91       	ld	r24, X+
    6110:	9c 91       	ld	r25, X
    6112:	ca d2       	rcall	.+1428   	; 0x66a8 <__floatsisf>
    6114:	20 e0       	ldi	r18, 0x00	; 0
    6116:	30 e0       	ldi	r19, 0x00	; 0
    6118:	48 ec       	ldi	r20, 0xC8	; 200
    611a:	52 e4       	ldi	r21, 0x42	; 66
    611c:	2a d2       	rcall	.+1108   	; 0x6572 <__divsf3>
    611e:	28 ed       	ldi	r18, 0xD8	; 216
    6120:	3f e0       	ldi	r19, 0x0F	; 15
    6122:	49 e4       	ldi	r20, 0x49	; 73
    6124:	50 e4       	ldi	r21, 0x40	; 64
    6126:	43 d4       	rcall	.+2182   	; 0x69ae <__mulsf3>
    6128:	20 e0       	ldi	r18, 0x00	; 0
    612a:	30 e0       	ldi	r19, 0x00	; 0
    612c:	44 e3       	ldi	r20, 0x34	; 52
    612e:	53 e4       	ldi	r21, 0x43	; 67
    6130:	20 d2       	rcall	.+1088   	; 0x6572 <__divsf3>
    6132:	69 87       	std	Y+9, r22	; 0x09
    6134:	7a 87       	std	Y+10, r23	; 0x0a
    6136:	8b 87       	std	Y+11, r24	; 0x0b
    6138:	9c 87       	std	Y+12, r25	; 0x0c
	// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    613a:	a7 ed       	ldi	r26, 0xD7	; 215
    613c:	b4 e0       	ldi	r27, 0x04	; 4
    613e:	8d 91       	ld	r24, X+
    6140:	9d 91       	ld	r25, X+
    6142:	0d 90       	ld	r0, X+
    6144:	bc 91       	ld	r27, X
    6146:	a0 2d       	mov	r26, r0
    6148:	8d 87       	std	Y+13, r24	; 0x0d
    614a:	9e 87       	std	Y+14, r25	; 0x0e
    614c:	af 87       	std	Y+15, r26	; 0x0f
    614e:	b8 8b       	std	Y+16, r27	; 0x10
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    6150:	ab ed       	ldi	r26, 0xDB	; 219
    6152:	b4 e0       	ldi	r27, 0x04	; 4
    6154:	8d 91       	ld	r24, X+
    6156:	9d 91       	ld	r25, X+
    6158:	0d 90       	ld	r0, X+
    615a:	bc 91       	ld	r27, X
    615c:	a0 2d       	mov	r26, r0
    615e:	89 8b       	std	Y+17, r24	; 0x11
    6160:	9a 8b       	std	Y+18, r25	; 0x12
    6162:	ab 8b       	std	Y+19, r26	; 0x13
    6164:	bc 8b       	std	Y+20, r27	; 0x14
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    6166:	a7 ed       	ldi	r26, 0xD7	; 215
    6168:	b4 e0       	ldi	r27, 0x04	; 4
    616a:	8d 91       	ld	r24, X+
    616c:	9d 91       	ld	r25, X+
    616e:	0d 90       	ld	r0, X+
    6170:	bc 91       	ld	r27, X
    6172:	a0 2d       	mov	r26, r0
    6174:	8d 8b       	std	Y+21, r24	; 0x15
    6176:	9e 8b       	std	Y+22, r25	; 0x16
    6178:	af 8b       	std	Y+23, r26	; 0x17
    617a:	b8 8f       	std	Y+24, r27	; 0x18
	// for india inner circle
	double a2 = ((double)Current_state.gps.lat/100.0) - 19.076;
    617c:	e7 ed       	ldi	r30, 0xD7	; 215
    617e:	f4 e0       	ldi	r31, 0x04	; 4
    6180:	60 81       	ld	r22, Z
    6182:	71 81       	ldd	r23, Z+1	; 0x01
    6184:	82 81       	ldd	r24, Z+2	; 0x02
    6186:	93 81       	ldd	r25, Z+3	; 0x03
    6188:	8f d2       	rcall	.+1310   	; 0x66a8 <__floatsisf>
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	30 e0       	ldi	r19, 0x00	; 0
    618e:	48 ec       	ldi	r20, 0xC8	; 200
    6190:	52 e4       	ldi	r21, 0x42	; 66
    6192:	ef d1       	rcall	.+990    	; 0x6572 <__divsf3>
    6194:	26 ea       	ldi	r18, 0xA6	; 166
    6196:	3b e9       	ldi	r19, 0x9B	; 155
    6198:	48 e9       	ldi	r20, 0x98	; 152
    619a:	51 e4       	ldi	r21, 0x41	; 65
    619c:	05 d1       	rcall	.+522    	; 0x63a8 <__subsf3>
    619e:	4b 01       	movw	r8, r22
    61a0:	5c 01       	movw	r10, r24
	double b2 = ((double)Current_state.gps.lon/100.0) - 72.877;
    61a2:	ab ed       	ldi	r26, 0xDB	; 219
    61a4:	b4 e0       	ldi	r27, 0x04	; 4
    61a6:	6d 91       	ld	r22, X+
    61a8:	7d 91       	ld	r23, X+
    61aa:	8d 91       	ld	r24, X+
    61ac:	9c 91       	ld	r25, X
    61ae:	7c d2       	rcall	.+1272   	; 0x66a8 <__floatsisf>
    61b0:	20 e0       	ldi	r18, 0x00	; 0
    61b2:	30 e0       	ldi	r19, 0x00	; 0
    61b4:	48 ec       	ldi	r20, 0xC8	; 200
    61b6:	52 e4       	ldi	r21, 0x42	; 66
    61b8:	dc d1       	rcall	.+952    	; 0x6572 <__divsf3>
    61ba:	26 e0       	ldi	r18, 0x06	; 6
    61bc:	31 ec       	ldi	r19, 0xC1	; 193
    61be:	41 e9       	ldi	r20, 0x91	; 145
    61c0:	52 e4       	ldi	r21, 0x42	; 66
    61c2:	f2 d0       	rcall	.+484    	; 0x63a8 <__subsf3>
    61c4:	6b 01       	movw	r12, r22
    61c6:	7c 01       	movw	r14, r24
	double c2 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    61c8:	e7 ed       	ldi	r30, 0xD7	; 215
    61ca:	f4 e0       	ldi	r31, 0x04	; 4
    61cc:	60 81       	ld	r22, Z
    61ce:	71 81       	ldd	r23, Z+1	; 0x01
    61d0:	82 81       	ldd	r24, Z+2	; 0x02
    61d2:	93 81       	ldd	r25, Z+3	; 0x03
    61d4:	69 d2       	rcall	.+1234   	; 0x66a8 <__floatsisf>
    61d6:	20 e0       	ldi	r18, 0x00	; 0
    61d8:	30 e0       	ldi	r19, 0x00	; 0
    61da:	48 ec       	ldi	r20, 0xC8	; 200
    61dc:	52 e4       	ldi	r21, 0x42	; 66
    61de:	c9 d1       	rcall	.+914    	; 0x6572 <__divsf3>
    61e0:	28 ed       	ldi	r18, 0xD8	; 216
    61e2:	3f e0       	ldi	r19, 0x0F	; 15
    61e4:	49 e4       	ldi	r20, 0x49	; 73
    61e6:	50 e4       	ldi	r21, 0x40	; 64
    61e8:	e2 d3       	rcall	.+1988   	; 0x69ae <__mulsf3>
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	44 e3       	ldi	r20, 0x34	; 52
    61f0:	53 e4       	ldi	r21, 0x43	; 67
    61f2:	bf d1       	rcall	.+894    	; 0x6572 <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    61f4:	bb d1       	rcall	.+886    	; 0x656c <cos>
    61f6:	6d 83       	std	Y+5, r22	; 0x05
    61f8:	7e 83       	std	Y+6, r23	; 0x06
    61fa:	8f 83       	std	Y+7, r24	; 0x07
    61fc:	98 87       	std	Y+8, r25	; 0x08
    61fe:	a5 01       	movw	r20, r10
    6200:	94 01       	movw	r18, r8
    6202:	c5 01       	movw	r24, r10
    6204:	b4 01       	movw	r22, r8
    6206:	d3 d3       	rcall	.+1958   	; 0x69ae <__mulsf3>
    6208:	4b 01       	movw	r8, r22
    620a:	5c 01       	movw	r10, r24
    620c:	a7 01       	movw	r20, r14
    620e:	96 01       	movw	r18, r12
    6210:	6d 81       	ldd	r22, Y+5	; 0x05
    6212:	7e 81       	ldd	r23, Y+6	; 0x06
    6214:	8f 81       	ldd	r24, Y+7	; 0x07
    6216:	98 85       	ldd	r25, Y+8	; 0x08
    6218:	ca d3       	rcall	.+1940   	; 0x69ae <__mulsf3>
    621a:	a7 01       	movw	r20, r14
    621c:	96 01       	movw	r18, r12
    621e:	c7 d3       	rcall	.+1934   	; 0x69ae <__mulsf3>
    6220:	9b 01       	movw	r18, r22
    6222:	ac 01       	movw	r20, r24
    6224:	c5 01       	movw	r24, r10
    6226:	b4 01       	movw	r22, r8
    6228:	c0 d0       	rcall	.+384    	; 0x63aa <__addsf3>
    622a:	20 e0       	ldi	r18, 0x00	; 0
    622c:	30 e0       	ldi	r19, 0x00	; 0
    622e:	48 ec       	ldi	r20, 0xC8	; 200
    6230:	52 e4       	ldi	r21, 0x42	; 66
    6232:	98 d1       	rcall	.+816    	; 0x6564 <__cmpsf2>
    6234:	88 23       	and	r24, r24
    6236:	5c f4       	brge	.+22     	; 0x624e <main+0x78c>
    6238:	80 91 26 01 	lds	r24, 0x0126
    623c:	81 30       	cpi	r24, 0x01	; 1
    623e:	39 f4       	brne	.+14     	; 0x624e <main+0x78c>
		{
			flag_mumbai = 1;
    6240:	80 93 7e 04 	sts	0x047E, r24
			flag_india = 0;
    6244:	10 92 80 04 	sts	0x0480, r1
			flag_france = 0;
    6248:	10 92 7f 04 	sts	0x047F, r1
    624c:	94 c0       	rjmp	.+296    	; 0x6376 <main+0x8b4>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    624e:	69 85       	ldd	r22, Y+9	; 0x09
    6250:	7a 85       	ldd	r23, Y+10	; 0x0a
    6252:	8b 85       	ldd	r24, Y+11	; 0x0b
    6254:	9c 85       	ldd	r25, Y+12	; 0x0c
    6256:	8a d1       	rcall	.+788    	; 0x656c <cos>
    6258:	6b 01       	movw	r12, r22
    625a:	7c 01       	movw	r14, r24
    625c:	29 81       	ldd	r18, Y+1	; 0x01
    625e:	3a 81       	ldd	r19, Y+2	; 0x02
    6260:	4b 81       	ldd	r20, Y+3	; 0x03
    6262:	5c 81       	ldd	r21, Y+4	; 0x04
    6264:	ca 01       	movw	r24, r20
    6266:	b9 01       	movw	r22, r18
    6268:	a2 d3       	rcall	.+1860   	; 0x69ae <__mulsf3>
    626a:	4b 01       	movw	r8, r22
    626c:	5c 01       	movw	r10, r24
    626e:	a3 01       	movw	r20, r6
    6270:	92 01       	movw	r18, r4
    6272:	c7 01       	movw	r24, r14
    6274:	b6 01       	movw	r22, r12
    6276:	9b d3       	rcall	.+1846   	; 0x69ae <__mulsf3>
    6278:	a3 01       	movw	r20, r6
    627a:	92 01       	movw	r18, r4
    627c:	98 d3       	rcall	.+1840   	; 0x69ae <__mulsf3>
    627e:	9b 01       	movw	r18, r22
    6280:	ac 01       	movw	r20, r24
    6282:	c5 01       	movw	r24, r10
    6284:	b4 01       	movw	r22, r8
    6286:	91 d0       	rcall	.+290    	; 0x63aa <__addsf3>
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e4       	ldi	r19, 0x40	; 64
    628c:	4c e1       	ldi	r20, 0x1C	; 28
    628e:	54 e4       	ldi	r21, 0x44	; 68
    6290:	69 d1       	rcall	.+722    	; 0x6564 <__cmpsf2>
    6292:	88 23       	and	r24, r24
    6294:	5c f4       	brge	.+22     	; 0x62ac <main+0x7ea>
    6296:	80 91 26 01 	lds	r24, 0x0126
    629a:	81 30       	cpi	r24, 0x01	; 1
    629c:	39 f4       	brne	.+14     	; 0x62ac <main+0x7ea>
	  {
      flag_mumbai = 0;
    629e:	10 92 7e 04 	sts	0x047E, r1
      flag_india = 1;
    62a2:	80 93 80 04 	sts	0x0480, r24
	  flag_france = 0;
    62a6:	10 92 7f 04 	sts	0x047F, r1
    62aa:	65 c0       	rjmp	.+202    	; 0x6376 <main+0x8b4>
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
	// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
    62ac:	69 89       	ldd	r22, Y+17	; 0x11
    62ae:	7a 89       	ldd	r23, Y+18	; 0x12
    62b0:	8b 89       	ldd	r24, Y+19	; 0x13
    62b2:	9c 89       	ldd	r25, Y+20	; 0x14
    62b4:	f9 d1       	rcall	.+1010   	; 0x66a8 <__floatsisf>
    62b6:	20 e0       	ldi	r18, 0x00	; 0
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	48 ec       	ldi	r20, 0xC8	; 200
    62bc:	52 e4       	ldi	r21, 0x42	; 66
    62be:	59 d1       	rcall	.+690    	; 0x6572 <__divsf3>
    62c0:	28 eb       	ldi	r18, 0xB8	; 184
    62c2:	3e e1       	ldi	r19, 0x1E	; 30
    62c4:	45 e1       	ldi	r20, 0x15	; 21
    62c6:	50 e4       	ldi	r21, 0x40	; 64
    62c8:	6f d0       	rcall	.+222    	; 0x63a8 <__subsf3>
    62ca:	6b 01       	movw	r12, r22
    62cc:	7c 01       	movw	r14, r24
	  // for india outer circle
	double a = ((double)Current_state.gps.lat/100.0) - 22.5833;
	double b = ((double)Current_state.gps.lon/100.0) - 82.7666;
	double c = ((double)Current_state.gps.lat/100.0)*3.141592/180;
	// for france
	double a1 = ((double)Current_state.gps.lat/100.0) - 48.8;
    62ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    62d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    62d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    62d4:	98 89       	ldd	r25, Y+16	; 0x10
    62d6:	e8 d1       	rcall	.+976    	; 0x66a8 <__floatsisf>
    62d8:	20 e0       	ldi	r18, 0x00	; 0
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	48 ec       	ldi	r20, 0xC8	; 200
    62de:	52 e4       	ldi	r21, 0x42	; 66
    62e0:	48 d1       	rcall	.+656    	; 0x6572 <__divsf3>
    62e2:	23 e3       	ldi	r18, 0x33	; 51
    62e4:	33 e3       	ldi	r19, 0x33	; 51
    62e6:	43 e4       	ldi	r20, 0x43	; 67
    62e8:	52 e4       	ldi	r21, 0x42	; 66
    62ea:	5e d0       	rcall	.+188    	; 0x63a8 <__subsf3>
    62ec:	4b 01       	movw	r8, r22
    62ee:	5c 01       	movw	r10, r24
	double b1 = ((double)Current_state.gps.lon/100.0) - 2.33;
	double c1 = ((double)Current_state.gps.lat/100.0)*3.141592/180;
    62f0:	6d 89       	ldd	r22, Y+21	; 0x15
    62f2:	7e 89       	ldd	r23, Y+22	; 0x16
    62f4:	8f 89       	ldd	r24, Y+23	; 0x17
    62f6:	98 8d       	ldd	r25, Y+24	; 0x18
    62f8:	d7 d1       	rcall	.+942    	; 0x66a8 <__floatsisf>
    62fa:	20 e0       	ldi	r18, 0x00	; 0
    62fc:	30 e0       	ldi	r19, 0x00	; 0
    62fe:	48 ec       	ldi	r20, 0xC8	; 200
    6300:	52 e4       	ldi	r21, 0x42	; 66
    6302:	37 d1       	rcall	.+622    	; 0x6572 <__divsf3>
    6304:	28 ed       	ldi	r18, 0xD8	; 216
    6306:	3f e0       	ldi	r19, 0x0F	; 15
    6308:	49 e4       	ldi	r20, 0x49	; 73
    630a:	50 e4       	ldi	r21, 0x40	; 64
    630c:	50 d3       	rcall	.+1696   	; 0x69ae <__mulsf3>
    630e:	20 e0       	ldi	r18, 0x00	; 0
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	44 e3       	ldi	r20, 0x34	; 52
    6314:	53 e4       	ldi	r21, 0x43	; 67
    6316:	2d d1       	rcall	.+602    	; 0x6572 <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    6318:	29 d1       	rcall	.+594    	; 0x656c <cos>
    631a:	2b 01       	movw	r4, r22
    631c:	3c 01       	movw	r6, r24
    631e:	a5 01       	movw	r20, r10
    6320:	94 01       	movw	r18, r8
    6322:	c5 01       	movw	r24, r10
    6324:	b4 01       	movw	r22, r8
    6326:	43 d3       	rcall	.+1670   	; 0x69ae <__mulsf3>
    6328:	4b 01       	movw	r8, r22
    632a:	5c 01       	movw	r10, r24
    632c:	a7 01       	movw	r20, r14
    632e:	96 01       	movw	r18, r12
    6330:	c3 01       	movw	r24, r6
    6332:	b2 01       	movw	r22, r4
    6334:	3c d3       	rcall	.+1656   	; 0x69ae <__mulsf3>
    6336:	a7 01       	movw	r20, r14
    6338:	96 01       	movw	r18, r12
    633a:	39 d3       	rcall	.+1650   	; 0x69ae <__mulsf3>
    633c:	9b 01       	movw	r18, r22
    633e:	ac 01       	movw	r20, r24
    6340:	c5 01       	movw	r24, r10
    6342:	b4 01       	movw	r22, r8
    6344:	32 d0       	rcall	.+100    	; 0x63aa <__addsf3>
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	48 ec       	ldi	r20, 0xC8	; 200
    634c:	52 e4       	ldi	r21, 0x42	; 66
    634e:	0a d1       	rcall	.+532    	; 0x6564 <__cmpsf2>
    6350:	88 23       	and	r24, r24
    6352:	5c f4       	brge	.+22     	; 0x636a <main+0x8a8>
    6354:	80 91 26 01 	lds	r24, 0x0126
    6358:	81 30       	cpi	r24, 0x01	; 1
    635a:	39 f4       	brne	.+14     	; 0x636a <main+0x8a8>
      {
	  flag_mumbai = 0;
    635c:	10 92 7e 04 	sts	0x047E, r1
      flag_france = 1;
    6360:	80 93 7f 04 	sts	0x047F, r24
	  flag_india = 0;
    6364:	10 92 80 04 	sts	0x0480, r1
    6368:	06 c0       	rjmp	.+12     	; 0x6376 <main+0x8b4>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    636a:	10 92 7f 04 	sts	0x047F, r1
	  flag_india = 0;
    636e:	10 92 80 04 	sts	0x0480, r1
	  flag_mumbai = 0;
    6372:	10 92 7e 04 	sts	0x047E, r1
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    6376:	80 91 21 01 	lds	r24, 0x0121
    637a:	90 91 22 01 	lds	r25, 0x0122
    637e:	01 96       	adiw	r24, 0x01	; 1
    6380:	90 93 22 01 	sts	0x0122, r25
    6384:	80 93 21 01 	sts	0x0121, r24
    //}
	timer_wait_reset();
    6388:	fb da       	rcall	.-2570   	; 0x5980 <timer_wait_reset>
	//wdt_disable();
  }
    638a:	e4 cb       	rjmp	.-2104   	; 0x5b54 <main+0x92>

0000638c <acos>:
    638c:	9f 93       	push	r25
    638e:	9f 77       	andi	r25, 0x7F	; 127
    6390:	04 d2       	rcall	.+1032   	; 0x679a <__fp_arccos>
    6392:	0f 90       	pop	r0
    6394:	00 20       	and	r0, r0
    6396:	3a f4       	brpl	.+14     	; 0x63a6 <acos+0x1a>
    6398:	90 58       	subi	r25, 0x80	; 128
    639a:	a2 ea       	ldi	r26, 0xA2	; 162
    639c:	2a ed       	ldi	r18, 0xDA	; 218
    639e:	3f e0       	ldi	r19, 0x0F	; 15
    63a0:	49 e4       	ldi	r20, 0x49	; 73
    63a2:	50 e4       	ldi	r21, 0x40	; 64
    63a4:	13 d0       	rcall	.+38     	; 0x63cc <__addsf3x>
    63a6:	ad c2       	rjmp	.+1370   	; 0x6902 <__fp_round>

000063a8 <__subsf3>:
    63a8:	50 58       	subi	r21, 0x80	; 128

000063aa <__addsf3>:
    63aa:	bb 27       	eor	r27, r27
    63ac:	aa 27       	eor	r26, r26
    63ae:	0e d0       	rcall	.+28     	; 0x63cc <__addsf3x>
    63b0:	a8 c2       	rjmp	.+1360   	; 0x6902 <__fp_round>
    63b2:	71 d2       	rcall	.+1250   	; 0x6896 <__fp_pscA>
    63b4:	30 f0       	brcs	.+12     	; 0x63c2 <__addsf3+0x18>
    63b6:	76 d2       	rcall	.+1260   	; 0x68a4 <__fp_pscB>
    63b8:	20 f0       	brcs	.+8      	; 0x63c2 <__addsf3+0x18>
    63ba:	31 f4       	brne	.+12     	; 0x63c8 <__addsf3+0x1e>
    63bc:	9f 3f       	cpi	r25, 0xFF	; 255
    63be:	11 f4       	brne	.+4      	; 0x63c4 <__addsf3+0x1a>
    63c0:	1e f4       	brtc	.+6      	; 0x63c8 <__addsf3+0x1e>
    63c2:	30 c2       	rjmp	.+1120   	; 0x6824 <__fp_nan>
    63c4:	0e f4       	brtc	.+2      	; 0x63c8 <__addsf3+0x1e>
    63c6:	e0 95       	com	r30
    63c8:	e7 fb       	bst	r30, 7
    63ca:	26 c2       	rjmp	.+1100   	; 0x6818 <__fp_inf>

000063cc <__addsf3x>:
    63cc:	e9 2f       	mov	r30, r25
    63ce:	bb d2       	rcall	.+1398   	; 0x6946 <__fp_split3>
    63d0:	80 f3       	brcs	.-32     	; 0x63b2 <__addsf3+0x8>
    63d2:	ba 17       	cp	r27, r26
    63d4:	62 07       	cpc	r22, r18
    63d6:	73 07       	cpc	r23, r19
    63d8:	84 07       	cpc	r24, r20
    63da:	95 07       	cpc	r25, r21
    63dc:	18 f0       	brcs	.+6      	; 0x63e4 <__addsf3x+0x18>
    63de:	71 f4       	brne	.+28     	; 0x63fc <__addsf3x+0x30>
    63e0:	9e f5       	brtc	.+102    	; 0x6448 <__addsf3x+0x7c>
    63e2:	d3 c2       	rjmp	.+1446   	; 0x698a <__fp_zero>
    63e4:	0e f4       	brtc	.+2      	; 0x63e8 <__addsf3x+0x1c>
    63e6:	e0 95       	com	r30
    63e8:	0b 2e       	mov	r0, r27
    63ea:	ba 2f       	mov	r27, r26
    63ec:	a0 2d       	mov	r26, r0
    63ee:	0b 01       	movw	r0, r22
    63f0:	b9 01       	movw	r22, r18
    63f2:	90 01       	movw	r18, r0
    63f4:	0c 01       	movw	r0, r24
    63f6:	ca 01       	movw	r24, r20
    63f8:	a0 01       	movw	r20, r0
    63fa:	11 24       	eor	r1, r1
    63fc:	ff 27       	eor	r31, r31
    63fe:	59 1b       	sub	r21, r25
    6400:	99 f0       	breq	.+38     	; 0x6428 <__addsf3x+0x5c>
    6402:	59 3f       	cpi	r21, 0xF9	; 249
    6404:	50 f4       	brcc	.+20     	; 0x641a <__addsf3x+0x4e>
    6406:	50 3e       	cpi	r21, 0xE0	; 224
    6408:	68 f1       	brcs	.+90     	; 0x6464 <__addsf3x+0x98>
    640a:	1a 16       	cp	r1, r26
    640c:	f0 40       	sbci	r31, 0x00	; 0
    640e:	a2 2f       	mov	r26, r18
    6410:	23 2f       	mov	r18, r19
    6412:	34 2f       	mov	r19, r20
    6414:	44 27       	eor	r20, r20
    6416:	58 5f       	subi	r21, 0xF8	; 248
    6418:	f3 cf       	rjmp	.-26     	; 0x6400 <__addsf3x+0x34>
    641a:	46 95       	lsr	r20
    641c:	37 95       	ror	r19
    641e:	27 95       	ror	r18
    6420:	a7 95       	ror	r26
    6422:	f0 40       	sbci	r31, 0x00	; 0
    6424:	53 95       	inc	r21
    6426:	c9 f7       	brne	.-14     	; 0x641a <__addsf3x+0x4e>
    6428:	7e f4       	brtc	.+30     	; 0x6448 <__addsf3x+0x7c>
    642a:	1f 16       	cp	r1, r31
    642c:	ba 0b       	sbc	r27, r26
    642e:	62 0b       	sbc	r22, r18
    6430:	73 0b       	sbc	r23, r19
    6432:	84 0b       	sbc	r24, r20
    6434:	ba f0       	brmi	.+46     	; 0x6464 <__addsf3x+0x98>
    6436:	91 50       	subi	r25, 0x01	; 1
    6438:	a1 f0       	breq	.+40     	; 0x6462 <__addsf3x+0x96>
    643a:	ff 0f       	add	r31, r31
    643c:	bb 1f       	adc	r27, r27
    643e:	66 1f       	adc	r22, r22
    6440:	77 1f       	adc	r23, r23
    6442:	88 1f       	adc	r24, r24
    6444:	c2 f7       	brpl	.-16     	; 0x6436 <__addsf3x+0x6a>
    6446:	0e c0       	rjmp	.+28     	; 0x6464 <__addsf3x+0x98>
    6448:	ba 0f       	add	r27, r26
    644a:	62 1f       	adc	r22, r18
    644c:	73 1f       	adc	r23, r19
    644e:	84 1f       	adc	r24, r20
    6450:	48 f4       	brcc	.+18     	; 0x6464 <__addsf3x+0x98>
    6452:	87 95       	ror	r24
    6454:	77 95       	ror	r23
    6456:	67 95       	ror	r22
    6458:	b7 95       	ror	r27
    645a:	f7 95       	ror	r31
    645c:	9e 3f       	cpi	r25, 0xFE	; 254
    645e:	08 f0       	brcs	.+2      	; 0x6462 <__addsf3x+0x96>
    6460:	b3 cf       	rjmp	.-154    	; 0x63c8 <__addsf3+0x1e>
    6462:	93 95       	inc	r25
    6464:	88 0f       	add	r24, r24
    6466:	08 f0       	brcs	.+2      	; 0x646a <__addsf3x+0x9e>
    6468:	99 27       	eor	r25, r25
    646a:	ee 0f       	add	r30, r30
    646c:	97 95       	ror	r25
    646e:	87 95       	ror	r24
    6470:	08 95       	ret

00006472 <asin>:
    6472:	9f 93       	push	r25
    6474:	9f 77       	andi	r25, 0x7F	; 127
    6476:	ee e3       	ldi	r30, 0x3E	; 62
    6478:	89 37       	cpi	r24, 0x79	; 121
    647a:	9e 07       	cpc	r25, r30
    647c:	20 f4       	brcc	.+8      	; 0x6486 <asin+0x14>
    647e:	e2 ea       	ldi	r30, 0xA2	; 162
    6480:	f0 e0       	ldi	r31, 0x00	; 0
    6482:	f8 d1       	rcall	.+1008   	; 0x6874 <__fp_powsodd>
    6484:	09 c0       	rjmp	.+18     	; 0x6498 <asin+0x26>
    6486:	89 d1       	rcall	.+786    	; 0x679a <__fp_arccos>
    6488:	90 58       	subi	r25, 0x80	; 128
    648a:	a2 ea       	ldi	r26, 0xA2	; 162
    648c:	2a ed       	ldi	r18, 0xDA	; 218
    648e:	3f e0       	ldi	r19, 0x0F	; 15
    6490:	49 ec       	ldi	r20, 0xC9	; 201
    6492:	5f e3       	ldi	r21, 0x3F	; 63
    6494:	9b df       	rcall	.-202    	; 0x63cc <__addsf3x>
    6496:	35 d2       	rcall	.+1130   	; 0x6902 <__fp_round>
    6498:	0f 90       	pop	r0
    649a:	07 fc       	sbrc	r0, 7
    649c:	90 58       	subi	r25, 0x80	; 128
    649e:	08 95       	ret
    64a0:	fa d1       	rcall	.+1012   	; 0x6896 <__fp_pscA>
    64a2:	58 f0       	brcs	.+22     	; 0x64ba <asin+0x48>
    64a4:	80 e8       	ldi	r24, 0x80	; 128
    64a6:	91 e0       	ldi	r25, 0x01	; 1
    64a8:	09 f4       	brne	.+2      	; 0x64ac <asin+0x3a>
    64aa:	9e ef       	ldi	r25, 0xFE	; 254
    64ac:	fb d1       	rcall	.+1014   	; 0x68a4 <__fp_pscB>
    64ae:	28 f0       	brcs	.+10     	; 0x64ba <asin+0x48>
    64b0:	40 e8       	ldi	r20, 0x80	; 128
    64b2:	51 e0       	ldi	r21, 0x01	; 1
    64b4:	59 f4       	brne	.+22     	; 0x64cc <atan2+0xe>
    64b6:	5e ef       	ldi	r21, 0xFE	; 254
    64b8:	09 c0       	rjmp	.+18     	; 0x64cc <atan2+0xe>
    64ba:	b4 c1       	rjmp	.+872    	; 0x6824 <__fp_nan>
    64bc:	66 c2       	rjmp	.+1228   	; 0x698a <__fp_zero>

000064be <atan2>:
    64be:	e9 2f       	mov	r30, r25
    64c0:	e0 78       	andi	r30, 0x80	; 128
    64c2:	41 d2       	rcall	.+1154   	; 0x6946 <__fp_split3>
    64c4:	68 f3       	brcs	.-38     	; 0x64a0 <asin+0x2e>
    64c6:	09 2e       	mov	r0, r25
    64c8:	05 2a       	or	r0, r21
    64ca:	c1 f3       	breq	.-16     	; 0x64bc <asin+0x4a>
    64cc:	26 17       	cp	r18, r22
    64ce:	37 07       	cpc	r19, r23
    64d0:	48 07       	cpc	r20, r24
    64d2:	59 07       	cpc	r21, r25
    64d4:	38 f0       	brcs	.+14     	; 0x64e4 <atan2+0x26>
    64d6:	0e 2e       	mov	r0, r30
    64d8:	07 f8       	bld	r0, 7
    64da:	e0 25       	eor	r30, r0
    64dc:	69 f0       	breq	.+26     	; 0x64f8 <atan2+0x3a>
    64de:	e0 25       	eor	r30, r0
    64e0:	e0 64       	ori	r30, 0x40	; 64
    64e2:	0a c0       	rjmp	.+20     	; 0x64f8 <atan2+0x3a>
    64e4:	ef 63       	ori	r30, 0x3F	; 63
    64e6:	07 f8       	bld	r0, 7
    64e8:	00 94       	com	r0
    64ea:	07 fa       	bst	r0, 7
    64ec:	db 01       	movw	r26, r22
    64ee:	b9 01       	movw	r22, r18
    64f0:	9d 01       	movw	r18, r26
    64f2:	dc 01       	movw	r26, r24
    64f4:	ca 01       	movw	r24, r20
    64f6:	ad 01       	movw	r20, r26
    64f8:	ef 93       	push	r30
    64fa:	4a d0       	rcall	.+148    	; 0x6590 <__divsf3_pse>
    64fc:	02 d2       	rcall	.+1028   	; 0x6902 <__fp_round>
    64fe:	0a d0       	rcall	.+20     	; 0x6514 <atan>
    6500:	5f 91       	pop	r21
    6502:	55 23       	and	r21, r21
    6504:	31 f0       	breq	.+12     	; 0x6512 <atan2+0x54>
    6506:	2b ed       	ldi	r18, 0xDB	; 219
    6508:	3f e0       	ldi	r19, 0x0F	; 15
    650a:	49 e4       	ldi	r20, 0x49	; 73
    650c:	50 fd       	sbrc	r21, 0
    650e:	49 ec       	ldi	r20, 0xC9	; 201
    6510:	4c cf       	rjmp	.-360    	; 0x63aa <__addsf3>
    6512:	08 95       	ret

00006514 <atan>:
    6514:	df 93       	push	r29
    6516:	dd 27       	eor	r29, r29
    6518:	b9 2f       	mov	r27, r25
    651a:	bf 77       	andi	r27, 0x7F	; 127
    651c:	40 e8       	ldi	r20, 0x80	; 128
    651e:	5f e3       	ldi	r21, 0x3F	; 63
    6520:	16 16       	cp	r1, r22
    6522:	17 06       	cpc	r1, r23
    6524:	48 07       	cpc	r20, r24
    6526:	5b 07       	cpc	r21, r27
    6528:	10 f4       	brcc	.+4      	; 0x652e <atan+0x1a>
    652a:	d9 2f       	mov	r29, r25
    652c:	39 d2       	rcall	.+1138   	; 0x69a0 <inverse>
    652e:	9f 93       	push	r25
    6530:	8f 93       	push	r24
    6532:	7f 93       	push	r23
    6534:	6f 93       	push	r22
    6536:	32 d3       	rcall	.+1636   	; 0x6b9c <square>
    6538:	e6 eb       	ldi	r30, 0xB6	; 182
    653a:	f0 e0       	ldi	r31, 0x00	; 0
    653c:	76 d1       	rcall	.+748    	; 0x682a <__fp_powser>
    653e:	e1 d1       	rcall	.+962    	; 0x6902 <__fp_round>
    6540:	2f 91       	pop	r18
    6542:	3f 91       	pop	r19
    6544:	4f 91       	pop	r20
    6546:	5f 91       	pop	r21
    6548:	3e d2       	rcall	.+1148   	; 0x69c6 <__mulsf3x>
    654a:	dd 23       	and	r29, r29
    654c:	49 f0       	breq	.+18     	; 0x6560 <atan+0x4c>
    654e:	90 58       	subi	r25, 0x80	; 128
    6550:	a2 ea       	ldi	r26, 0xA2	; 162
    6552:	2a ed       	ldi	r18, 0xDA	; 218
    6554:	3f e0       	ldi	r19, 0x0F	; 15
    6556:	49 ec       	ldi	r20, 0xC9	; 201
    6558:	5f e3       	ldi	r21, 0x3F	; 63
    655a:	d0 78       	andi	r29, 0x80	; 128
    655c:	5d 27       	eor	r21, r29
    655e:	36 df       	rcall	.-404    	; 0x63cc <__addsf3x>
    6560:	df 91       	pop	r29
    6562:	cf c1       	rjmp	.+926    	; 0x6902 <__fp_round>

00006564 <__cmpsf2>:
    6564:	35 d1       	rcall	.+618    	; 0x67d0 <__fp_cmp>
    6566:	08 f4       	brcc	.+2      	; 0x656a <__cmpsf2+0x6>
    6568:	81 e0       	ldi	r24, 0x01	; 1
    656a:	08 95       	ret

0000656c <cos>:
    656c:	a3 d1       	rcall	.+838    	; 0x68b4 <__fp_rempio2>
    656e:	e3 95       	inc	r30
    6570:	d9 c1       	rjmp	.+946    	; 0x6924 <__fp_sinus>

00006572 <__divsf3>:
    6572:	0c d0       	rcall	.+24     	; 0x658c <__divsf3x>
    6574:	c6 c1       	rjmp	.+908    	; 0x6902 <__fp_round>
    6576:	96 d1       	rcall	.+812    	; 0x68a4 <__fp_pscB>
    6578:	40 f0       	brcs	.+16     	; 0x658a <__divsf3+0x18>
    657a:	8d d1       	rcall	.+794    	; 0x6896 <__fp_pscA>
    657c:	30 f0       	brcs	.+12     	; 0x658a <__divsf3+0x18>
    657e:	21 f4       	brne	.+8      	; 0x6588 <__divsf3+0x16>
    6580:	5f 3f       	cpi	r21, 0xFF	; 255
    6582:	19 f0       	breq	.+6      	; 0x658a <__divsf3+0x18>
    6584:	49 c1       	rjmp	.+658    	; 0x6818 <__fp_inf>
    6586:	51 11       	cpse	r21, r1
    6588:	01 c2       	rjmp	.+1026   	; 0x698c <__fp_szero>
    658a:	4c c1       	rjmp	.+664    	; 0x6824 <__fp_nan>

0000658c <__divsf3x>:
    658c:	dc d1       	rcall	.+952    	; 0x6946 <__fp_split3>
    658e:	98 f3       	brcs	.-26     	; 0x6576 <__divsf3+0x4>

00006590 <__divsf3_pse>:
    6590:	99 23       	and	r25, r25
    6592:	c9 f3       	breq	.-14     	; 0x6586 <__divsf3+0x14>
    6594:	55 23       	and	r21, r21
    6596:	b1 f3       	breq	.-20     	; 0x6584 <__divsf3+0x12>
    6598:	95 1b       	sub	r25, r21
    659a:	55 0b       	sbc	r21, r21
    659c:	bb 27       	eor	r27, r27
    659e:	aa 27       	eor	r26, r26
    65a0:	62 17       	cp	r22, r18
    65a2:	73 07       	cpc	r23, r19
    65a4:	84 07       	cpc	r24, r20
    65a6:	38 f0       	brcs	.+14     	; 0x65b6 <__divsf3_pse+0x26>
    65a8:	9f 5f       	subi	r25, 0xFF	; 255
    65aa:	5f 4f       	sbci	r21, 0xFF	; 255
    65ac:	22 0f       	add	r18, r18
    65ae:	33 1f       	adc	r19, r19
    65b0:	44 1f       	adc	r20, r20
    65b2:	aa 1f       	adc	r26, r26
    65b4:	a9 f3       	breq	.-22     	; 0x65a0 <__divsf3_pse+0x10>
    65b6:	33 d0       	rcall	.+102    	; 0x661e <__divsf3_pse+0x8e>
    65b8:	0e 2e       	mov	r0, r30
    65ba:	3a f0       	brmi	.+14     	; 0x65ca <__divsf3_pse+0x3a>
    65bc:	e0 e8       	ldi	r30, 0x80	; 128
    65be:	30 d0       	rcall	.+96     	; 0x6620 <__divsf3_pse+0x90>
    65c0:	91 50       	subi	r25, 0x01	; 1
    65c2:	50 40       	sbci	r21, 0x00	; 0
    65c4:	e6 95       	lsr	r30
    65c6:	00 1c       	adc	r0, r0
    65c8:	ca f7       	brpl	.-14     	; 0x65bc <__divsf3_pse+0x2c>
    65ca:	29 d0       	rcall	.+82     	; 0x661e <__divsf3_pse+0x8e>
    65cc:	fe 2f       	mov	r31, r30
    65ce:	27 d0       	rcall	.+78     	; 0x661e <__divsf3_pse+0x8e>
    65d0:	66 0f       	add	r22, r22
    65d2:	77 1f       	adc	r23, r23
    65d4:	88 1f       	adc	r24, r24
    65d6:	bb 1f       	adc	r27, r27
    65d8:	26 17       	cp	r18, r22
    65da:	37 07       	cpc	r19, r23
    65dc:	48 07       	cpc	r20, r24
    65de:	ab 07       	cpc	r26, r27
    65e0:	b0 e8       	ldi	r27, 0x80	; 128
    65e2:	09 f0       	breq	.+2      	; 0x65e6 <__divsf3_pse+0x56>
    65e4:	bb 0b       	sbc	r27, r27
    65e6:	80 2d       	mov	r24, r0
    65e8:	bf 01       	movw	r22, r30
    65ea:	ff 27       	eor	r31, r31
    65ec:	93 58       	subi	r25, 0x83	; 131
    65ee:	5f 4f       	sbci	r21, 0xFF	; 255
    65f0:	2a f0       	brmi	.+10     	; 0x65fc <__divsf3_pse+0x6c>
    65f2:	9e 3f       	cpi	r25, 0xFE	; 254
    65f4:	51 05       	cpc	r21, r1
    65f6:	68 f0       	brcs	.+26     	; 0x6612 <__divsf3_pse+0x82>
    65f8:	0f c1       	rjmp	.+542    	; 0x6818 <__fp_inf>
    65fa:	c8 c1       	rjmp	.+912    	; 0x698c <__fp_szero>
    65fc:	5f 3f       	cpi	r21, 0xFF	; 255
    65fe:	ec f3       	brlt	.-6      	; 0x65fa <__divsf3_pse+0x6a>
    6600:	98 3e       	cpi	r25, 0xE8	; 232
    6602:	dc f3       	brlt	.-10     	; 0x65fa <__divsf3_pse+0x6a>
    6604:	86 95       	lsr	r24
    6606:	77 95       	ror	r23
    6608:	67 95       	ror	r22
    660a:	b7 95       	ror	r27
    660c:	f7 95       	ror	r31
    660e:	9f 5f       	subi	r25, 0xFF	; 255
    6610:	c9 f7       	brne	.-14     	; 0x6604 <__divsf3_pse+0x74>
    6612:	88 0f       	add	r24, r24
    6614:	91 1d       	adc	r25, r1
    6616:	96 95       	lsr	r25
    6618:	87 95       	ror	r24
    661a:	97 f9       	bld	r25, 7
    661c:	08 95       	ret
    661e:	e1 e0       	ldi	r30, 0x01	; 1
    6620:	66 0f       	add	r22, r22
    6622:	77 1f       	adc	r23, r23
    6624:	88 1f       	adc	r24, r24
    6626:	bb 1f       	adc	r27, r27
    6628:	62 17       	cp	r22, r18
    662a:	73 07       	cpc	r23, r19
    662c:	84 07       	cpc	r24, r20
    662e:	ba 07       	cpc	r27, r26
    6630:	20 f0       	brcs	.+8      	; 0x663a <__divsf3_pse+0xaa>
    6632:	62 1b       	sub	r22, r18
    6634:	73 0b       	sbc	r23, r19
    6636:	84 0b       	sbc	r24, r20
    6638:	ba 0b       	sbc	r27, r26
    663a:	ee 1f       	adc	r30, r30
    663c:	88 f7       	brcc	.-30     	; 0x6620 <__divsf3_pse+0x90>
    663e:	e0 95       	com	r30
    6640:	08 95       	ret

00006642 <__fixsfsi>:
    6642:	04 d0       	rcall	.+8      	; 0x664c <__fixunssfsi>
    6644:	68 94       	set
    6646:	b1 11       	cpse	r27, r1
    6648:	a1 c1       	rjmp	.+834    	; 0x698c <__fp_szero>
    664a:	08 95       	ret

0000664c <__fixunssfsi>:
    664c:	84 d1       	rcall	.+776    	; 0x6956 <__fp_splitA>
    664e:	88 f0       	brcs	.+34     	; 0x6672 <__fixunssfsi+0x26>
    6650:	9f 57       	subi	r25, 0x7F	; 127
    6652:	90 f0       	brcs	.+36     	; 0x6678 <__fixunssfsi+0x2c>
    6654:	b9 2f       	mov	r27, r25
    6656:	99 27       	eor	r25, r25
    6658:	b7 51       	subi	r27, 0x17	; 23
    665a:	a0 f0       	brcs	.+40     	; 0x6684 <__fixunssfsi+0x38>
    665c:	d1 f0       	breq	.+52     	; 0x6692 <__fixunssfsi+0x46>
    665e:	66 0f       	add	r22, r22
    6660:	77 1f       	adc	r23, r23
    6662:	88 1f       	adc	r24, r24
    6664:	99 1f       	adc	r25, r25
    6666:	1a f0       	brmi	.+6      	; 0x666e <__fixunssfsi+0x22>
    6668:	ba 95       	dec	r27
    666a:	c9 f7       	brne	.-14     	; 0x665e <__fixunssfsi+0x12>
    666c:	12 c0       	rjmp	.+36     	; 0x6692 <__fixunssfsi+0x46>
    666e:	b1 30       	cpi	r27, 0x01	; 1
    6670:	81 f0       	breq	.+32     	; 0x6692 <__fixunssfsi+0x46>
    6672:	8b d1       	rcall	.+790    	; 0x698a <__fp_zero>
    6674:	b1 e0       	ldi	r27, 0x01	; 1
    6676:	08 95       	ret
    6678:	88 c1       	rjmp	.+784    	; 0x698a <__fp_zero>
    667a:	67 2f       	mov	r22, r23
    667c:	78 2f       	mov	r23, r24
    667e:	88 27       	eor	r24, r24
    6680:	b8 5f       	subi	r27, 0xF8	; 248
    6682:	39 f0       	breq	.+14     	; 0x6692 <__fixunssfsi+0x46>
    6684:	b9 3f       	cpi	r27, 0xF9	; 249
    6686:	cc f3       	brlt	.-14     	; 0x667a <__fixunssfsi+0x2e>
    6688:	86 95       	lsr	r24
    668a:	77 95       	ror	r23
    668c:	67 95       	ror	r22
    668e:	b3 95       	inc	r27
    6690:	d9 f7       	brne	.-10     	; 0x6688 <__fixunssfsi+0x3c>
    6692:	3e f4       	brtc	.+14     	; 0x66a2 <__fixunssfsi+0x56>
    6694:	90 95       	com	r25
    6696:	80 95       	com	r24
    6698:	70 95       	com	r23
    669a:	61 95       	neg	r22
    669c:	7f 4f       	sbci	r23, 0xFF	; 255
    669e:	8f 4f       	sbci	r24, 0xFF	; 255
    66a0:	9f 4f       	sbci	r25, 0xFF	; 255
    66a2:	08 95       	ret

000066a4 <__floatunsisf>:
    66a4:	e8 94       	clt
    66a6:	09 c0       	rjmp	.+18     	; 0x66ba <__floatsisf+0x12>

000066a8 <__floatsisf>:
    66a8:	97 fb       	bst	r25, 7
    66aa:	3e f4       	brtc	.+14     	; 0x66ba <__floatsisf+0x12>
    66ac:	90 95       	com	r25
    66ae:	80 95       	com	r24
    66b0:	70 95       	com	r23
    66b2:	61 95       	neg	r22
    66b4:	7f 4f       	sbci	r23, 0xFF	; 255
    66b6:	8f 4f       	sbci	r24, 0xFF	; 255
    66b8:	9f 4f       	sbci	r25, 0xFF	; 255
    66ba:	99 23       	and	r25, r25
    66bc:	a9 f0       	breq	.+42     	; 0x66e8 <__floatsisf+0x40>
    66be:	f9 2f       	mov	r31, r25
    66c0:	96 e9       	ldi	r25, 0x96	; 150
    66c2:	bb 27       	eor	r27, r27
    66c4:	93 95       	inc	r25
    66c6:	f6 95       	lsr	r31
    66c8:	87 95       	ror	r24
    66ca:	77 95       	ror	r23
    66cc:	67 95       	ror	r22
    66ce:	b7 95       	ror	r27
    66d0:	f1 11       	cpse	r31, r1
    66d2:	f8 cf       	rjmp	.-16     	; 0x66c4 <__floatsisf+0x1c>
    66d4:	fa f4       	brpl	.+62     	; 0x6714 <__floatsisf+0x6c>
    66d6:	bb 0f       	add	r27, r27
    66d8:	11 f4       	brne	.+4      	; 0x66de <__floatsisf+0x36>
    66da:	60 ff       	sbrs	r22, 0
    66dc:	1b c0       	rjmp	.+54     	; 0x6714 <__floatsisf+0x6c>
    66de:	6f 5f       	subi	r22, 0xFF	; 255
    66e0:	7f 4f       	sbci	r23, 0xFF	; 255
    66e2:	8f 4f       	sbci	r24, 0xFF	; 255
    66e4:	9f 4f       	sbci	r25, 0xFF	; 255
    66e6:	16 c0       	rjmp	.+44     	; 0x6714 <__floatsisf+0x6c>
    66e8:	88 23       	and	r24, r24
    66ea:	11 f0       	breq	.+4      	; 0x66f0 <__floatsisf+0x48>
    66ec:	96 e9       	ldi	r25, 0x96	; 150
    66ee:	11 c0       	rjmp	.+34     	; 0x6712 <__floatsisf+0x6a>
    66f0:	77 23       	and	r23, r23
    66f2:	21 f0       	breq	.+8      	; 0x66fc <__floatsisf+0x54>
    66f4:	9e e8       	ldi	r25, 0x8E	; 142
    66f6:	87 2f       	mov	r24, r23
    66f8:	76 2f       	mov	r23, r22
    66fa:	05 c0       	rjmp	.+10     	; 0x6706 <__floatsisf+0x5e>
    66fc:	66 23       	and	r22, r22
    66fe:	71 f0       	breq	.+28     	; 0x671c <__floatsisf+0x74>
    6700:	96 e8       	ldi	r25, 0x86	; 134
    6702:	86 2f       	mov	r24, r22
    6704:	70 e0       	ldi	r23, 0x00	; 0
    6706:	60 e0       	ldi	r22, 0x00	; 0
    6708:	2a f0       	brmi	.+10     	; 0x6714 <__floatsisf+0x6c>
    670a:	9a 95       	dec	r25
    670c:	66 0f       	add	r22, r22
    670e:	77 1f       	adc	r23, r23
    6710:	88 1f       	adc	r24, r24
    6712:	da f7       	brpl	.-10     	; 0x670a <__floatsisf+0x62>
    6714:	88 0f       	add	r24, r24
    6716:	96 95       	lsr	r25
    6718:	87 95       	ror	r24
    671a:	97 f9       	bld	r25, 7
    671c:	08 95       	ret

0000671e <__floatundisf>:
    671e:	e8 94       	clt

00006720 <__fp_di2sf>:
    6720:	f9 2f       	mov	r31, r25
    6722:	96 eb       	ldi	r25, 0xB6	; 182
    6724:	ff 23       	and	r31, r31
    6726:	81 f0       	breq	.+32     	; 0x6748 <__fp_di2sf+0x28>
    6728:	12 16       	cp	r1, r18
    672a:	13 06       	cpc	r1, r19
    672c:	14 06       	cpc	r1, r20
    672e:	44 0b       	sbc	r20, r20
    6730:	93 95       	inc	r25
    6732:	f6 95       	lsr	r31
    6734:	87 95       	ror	r24
    6736:	77 95       	ror	r23
    6738:	67 95       	ror	r22
    673a:	57 95       	ror	r21
    673c:	40 40       	sbci	r20, 0x00	; 0
    673e:	ff 23       	and	r31, r31
    6740:	b9 f7       	brne	.-18     	; 0x6730 <__fp_di2sf+0x10>
    6742:	1b c0       	rjmp	.+54     	; 0x677a <__fp_di2sf+0x5a>
    6744:	99 27       	eor	r25, r25
    6746:	08 95       	ret
    6748:	88 23       	and	r24, r24
    674a:	51 f4       	brne	.+20     	; 0x6760 <__fp_di2sf+0x40>
    674c:	98 50       	subi	r25, 0x08	; 8
    674e:	d2 f7       	brpl	.-12     	; 0x6744 <__fp_di2sf+0x24>
    6750:	87 2b       	or	r24, r23
    6752:	76 2f       	mov	r23, r22
    6754:	65 2f       	mov	r22, r21
    6756:	54 2f       	mov	r21, r20
    6758:	43 2f       	mov	r20, r19
    675a:	32 2f       	mov	r19, r18
    675c:	20 e0       	ldi	r18, 0x00	; 0
    675e:	b1 f3       	breq	.-20     	; 0x674c <__fp_di2sf+0x2c>
    6760:	12 16       	cp	r1, r18
    6762:	13 06       	cpc	r1, r19
    6764:	14 06       	cpc	r1, r20
    6766:	44 0b       	sbc	r20, r20
    6768:	88 23       	and	r24, r24
    676a:	3a f0       	brmi	.+14     	; 0x677a <__fp_di2sf+0x5a>
    676c:	9a 95       	dec	r25
    676e:	44 0f       	add	r20, r20
    6770:	55 1f       	adc	r21, r21
    6772:	66 1f       	adc	r22, r22
    6774:	77 1f       	adc	r23, r23
    6776:	88 1f       	adc	r24, r24
    6778:	ca f7       	brpl	.-14     	; 0x676c <__fp_di2sf+0x4c>
    677a:	55 23       	and	r21, r21
    677c:	4a f4       	brpl	.+18     	; 0x6790 <__fp_di2sf+0x70>
    677e:	44 0f       	add	r20, r20
    6780:	55 1f       	adc	r21, r21
    6782:	11 f4       	brne	.+4      	; 0x6788 <__fp_di2sf+0x68>
    6784:	60 ff       	sbrs	r22, 0
    6786:	04 c0       	rjmp	.+8      	; 0x6790 <__fp_di2sf+0x70>
    6788:	6f 5f       	subi	r22, 0xFF	; 255
    678a:	7f 4f       	sbci	r23, 0xFF	; 255
    678c:	8f 4f       	sbci	r24, 0xFF	; 255
    678e:	9f 4f       	sbci	r25, 0xFF	; 255
    6790:	88 0f       	add	r24, r24
    6792:	96 95       	lsr	r25
    6794:	87 95       	ror	r24
    6796:	97 f9       	bld	r25, 7
    6798:	08 95       	ret

0000679a <__fp_arccos>:
    679a:	df 93       	push	r29
    679c:	cf 93       	push	r28
    679e:	1f 93       	push	r17
    67a0:	0f 93       	push	r16
    67a2:	8b 01       	movw	r16, r22
    67a4:	ec 01       	movw	r28, r24
    67a6:	e3 ee       	ldi	r30, 0xE3	; 227
    67a8:	f0 e0       	ldi	r31, 0x00	; 0
    67aa:	3f d0       	rcall	.+126    	; 0x682a <__fp_powser>
    67ac:	aa d0       	rcall	.+340    	; 0x6902 <__fp_round>
    67ae:	98 01       	movw	r18, r16
    67b0:	ae 01       	movw	r20, r28
    67b2:	8b 01       	movw	r16, r22
    67b4:	ec 01       	movw	r28, r24
    67b6:	60 e0       	ldi	r22, 0x00	; 0
    67b8:	70 e0       	ldi	r23, 0x00	; 0
    67ba:	80 e8       	ldi	r24, 0x80	; 128
    67bc:	9f e3       	ldi	r25, 0x3F	; 63
    67be:	f4 dd       	rcall	.-1048   	; 0x63a8 <__subsf3>
    67c0:	af d1       	rcall	.+862    	; 0x6b20 <sqrt>
    67c2:	98 01       	movw	r18, r16
    67c4:	ae 01       	movw	r20, r28
    67c6:	0f 91       	pop	r16
    67c8:	1f 91       	pop	r17
    67ca:	cf 91       	pop	r28
    67cc:	df 91       	pop	r29
    67ce:	fb c0       	rjmp	.+502    	; 0x69c6 <__mulsf3x>

000067d0 <__fp_cmp>:
    67d0:	99 0f       	add	r25, r25
    67d2:	00 08       	sbc	r0, r0
    67d4:	55 0f       	add	r21, r21
    67d6:	aa 0b       	sbc	r26, r26
    67d8:	e0 e8       	ldi	r30, 0x80	; 128
    67da:	fe ef       	ldi	r31, 0xFE	; 254
    67dc:	16 16       	cp	r1, r22
    67de:	17 06       	cpc	r1, r23
    67e0:	e8 07       	cpc	r30, r24
    67e2:	f9 07       	cpc	r31, r25
    67e4:	c0 f0       	brcs	.+48     	; 0x6816 <__fp_cmp+0x46>
    67e6:	12 16       	cp	r1, r18
    67e8:	13 06       	cpc	r1, r19
    67ea:	e4 07       	cpc	r30, r20
    67ec:	f5 07       	cpc	r31, r21
    67ee:	98 f0       	brcs	.+38     	; 0x6816 <__fp_cmp+0x46>
    67f0:	62 1b       	sub	r22, r18
    67f2:	73 0b       	sbc	r23, r19
    67f4:	84 0b       	sbc	r24, r20
    67f6:	95 0b       	sbc	r25, r21
    67f8:	39 f4       	brne	.+14     	; 0x6808 <__fp_cmp+0x38>
    67fa:	0a 26       	eor	r0, r26
    67fc:	61 f0       	breq	.+24     	; 0x6816 <__fp_cmp+0x46>
    67fe:	23 2b       	or	r18, r19
    6800:	24 2b       	or	r18, r20
    6802:	25 2b       	or	r18, r21
    6804:	21 f4       	brne	.+8      	; 0x680e <__fp_cmp+0x3e>
    6806:	08 95       	ret
    6808:	0a 26       	eor	r0, r26
    680a:	09 f4       	brne	.+2      	; 0x680e <__fp_cmp+0x3e>
    680c:	a1 40       	sbci	r26, 0x01	; 1
    680e:	a6 95       	lsr	r26
    6810:	8f ef       	ldi	r24, 0xFF	; 255
    6812:	81 1d       	adc	r24, r1
    6814:	81 1d       	adc	r24, r1
    6816:	08 95       	ret

00006818 <__fp_inf>:
    6818:	97 f9       	bld	r25, 7
    681a:	9f 67       	ori	r25, 0x7F	; 127
    681c:	80 e8       	ldi	r24, 0x80	; 128
    681e:	70 e0       	ldi	r23, 0x00	; 0
    6820:	60 e0       	ldi	r22, 0x00	; 0
    6822:	08 95       	ret

00006824 <__fp_nan>:
    6824:	9f ef       	ldi	r25, 0xFF	; 255
    6826:	80 ec       	ldi	r24, 0xC0	; 192
    6828:	08 95       	ret

0000682a <__fp_powser>:
    682a:	df 93       	push	r29
    682c:	cf 93       	push	r28
    682e:	1f 93       	push	r17
    6830:	0f 93       	push	r16
    6832:	ff 92       	push	r15
    6834:	ef 92       	push	r14
    6836:	df 92       	push	r13
    6838:	7b 01       	movw	r14, r22
    683a:	8c 01       	movw	r16, r24
    683c:	68 94       	set
    683e:	05 c0       	rjmp	.+10     	; 0x684a <__fp_powser+0x20>
    6840:	da 2e       	mov	r13, r26
    6842:	ef 01       	movw	r28, r30
    6844:	c0 d0       	rcall	.+384    	; 0x69c6 <__mulsf3x>
    6846:	fe 01       	movw	r30, r28
    6848:	e8 94       	clt
    684a:	a5 91       	lpm	r26, Z+
    684c:	25 91       	lpm	r18, Z+
    684e:	35 91       	lpm	r19, Z+
    6850:	45 91       	lpm	r20, Z+
    6852:	55 91       	lpm	r21, Z+
    6854:	ae f3       	brts	.-22     	; 0x6840 <__fp_powser+0x16>
    6856:	ef 01       	movw	r28, r30
    6858:	b9 dd       	rcall	.-1166   	; 0x63cc <__addsf3x>
    685a:	fe 01       	movw	r30, r28
    685c:	97 01       	movw	r18, r14
    685e:	a8 01       	movw	r20, r16
    6860:	da 94       	dec	r13
    6862:	79 f7       	brne	.-34     	; 0x6842 <__fp_powser+0x18>
    6864:	df 90       	pop	r13
    6866:	ef 90       	pop	r14
    6868:	ff 90       	pop	r15
    686a:	0f 91       	pop	r16
    686c:	1f 91       	pop	r17
    686e:	cf 91       	pop	r28
    6870:	df 91       	pop	r29
    6872:	08 95       	ret

00006874 <__fp_powsodd>:
    6874:	9f 93       	push	r25
    6876:	8f 93       	push	r24
    6878:	7f 93       	push	r23
    687a:	6f 93       	push	r22
    687c:	ff 93       	push	r31
    687e:	ef 93       	push	r30
    6880:	9b 01       	movw	r18, r22
    6882:	ac 01       	movw	r20, r24
    6884:	94 d0       	rcall	.+296    	; 0x69ae <__mulsf3>
    6886:	ef 91       	pop	r30
    6888:	ff 91       	pop	r31
    688a:	cf df       	rcall	.-98     	; 0x682a <__fp_powser>
    688c:	2f 91       	pop	r18
    688e:	3f 91       	pop	r19
    6890:	4f 91       	pop	r20
    6892:	5f 91       	pop	r21
    6894:	8c c0       	rjmp	.+280    	; 0x69ae <__mulsf3>

00006896 <__fp_pscA>:
    6896:	00 24       	eor	r0, r0
    6898:	0a 94       	dec	r0
    689a:	16 16       	cp	r1, r22
    689c:	17 06       	cpc	r1, r23
    689e:	18 06       	cpc	r1, r24
    68a0:	09 06       	cpc	r0, r25
    68a2:	08 95       	ret

000068a4 <__fp_pscB>:
    68a4:	00 24       	eor	r0, r0
    68a6:	0a 94       	dec	r0
    68a8:	12 16       	cp	r1, r18
    68aa:	13 06       	cpc	r1, r19
    68ac:	14 06       	cpc	r1, r20
    68ae:	05 06       	cpc	r0, r21
    68b0:	08 95       	ret
    68b2:	b8 cf       	rjmp	.-144    	; 0x6824 <__fp_nan>

000068b4 <__fp_rempio2>:
    68b4:	50 d0       	rcall	.+160    	; 0x6956 <__fp_splitA>
    68b6:	e8 f3       	brcs	.-6      	; 0x68b2 <__fp_pscB+0xe>
    68b8:	e8 94       	clt
    68ba:	e0 e0       	ldi	r30, 0x00	; 0
    68bc:	bb 27       	eor	r27, r27
    68be:	9f 57       	subi	r25, 0x7F	; 127
    68c0:	f0 f0       	brcs	.+60     	; 0x68fe <__fp_rempio2+0x4a>
    68c2:	2a ed       	ldi	r18, 0xDA	; 218
    68c4:	3f e0       	ldi	r19, 0x0F	; 15
    68c6:	49 ec       	ldi	r20, 0xC9	; 201
    68c8:	06 c0       	rjmp	.+12     	; 0x68d6 <__fp_rempio2+0x22>
    68ca:	ee 0f       	add	r30, r30
    68cc:	bb 0f       	add	r27, r27
    68ce:	66 1f       	adc	r22, r22
    68d0:	77 1f       	adc	r23, r23
    68d2:	88 1f       	adc	r24, r24
    68d4:	28 f0       	brcs	.+10     	; 0x68e0 <__fp_rempio2+0x2c>
    68d6:	b2 3a       	cpi	r27, 0xA2	; 162
    68d8:	62 07       	cpc	r22, r18
    68da:	73 07       	cpc	r23, r19
    68dc:	84 07       	cpc	r24, r20
    68de:	28 f0       	brcs	.+10     	; 0x68ea <__fp_rempio2+0x36>
    68e0:	b2 5a       	subi	r27, 0xA2	; 162
    68e2:	62 0b       	sbc	r22, r18
    68e4:	73 0b       	sbc	r23, r19
    68e6:	84 0b       	sbc	r24, r20
    68e8:	e3 95       	inc	r30
    68ea:	9a 95       	dec	r25
    68ec:	72 f7       	brpl	.-36     	; 0x68ca <__fp_rempio2+0x16>
    68ee:	80 38       	cpi	r24, 0x80	; 128
    68f0:	30 f4       	brcc	.+12     	; 0x68fe <__fp_rempio2+0x4a>
    68f2:	9a 95       	dec	r25
    68f4:	bb 0f       	add	r27, r27
    68f6:	66 1f       	adc	r22, r22
    68f8:	77 1f       	adc	r23, r23
    68fa:	88 1f       	adc	r24, r24
    68fc:	d2 f7       	brpl	.-12     	; 0x68f2 <__fp_rempio2+0x3e>
    68fe:	90 48       	sbci	r25, 0x80	; 128
    6900:	83 c1       	rjmp	.+774    	; 0x6c08 <__fp_mpack_finite>

00006902 <__fp_round>:
    6902:	09 2e       	mov	r0, r25
    6904:	03 94       	inc	r0
    6906:	00 0c       	add	r0, r0
    6908:	11 f4       	brne	.+4      	; 0x690e <__fp_round+0xc>
    690a:	88 23       	and	r24, r24
    690c:	52 f0       	brmi	.+20     	; 0x6922 <__fp_round+0x20>
    690e:	bb 0f       	add	r27, r27
    6910:	40 f4       	brcc	.+16     	; 0x6922 <__fp_round+0x20>
    6912:	bf 2b       	or	r27, r31
    6914:	11 f4       	brne	.+4      	; 0x691a <__fp_round+0x18>
    6916:	60 ff       	sbrs	r22, 0
    6918:	04 c0       	rjmp	.+8      	; 0x6922 <__fp_round+0x20>
    691a:	6f 5f       	subi	r22, 0xFF	; 255
    691c:	7f 4f       	sbci	r23, 0xFF	; 255
    691e:	8f 4f       	sbci	r24, 0xFF	; 255
    6920:	9f 4f       	sbci	r25, 0xFF	; 255
    6922:	08 95       	ret

00006924 <__fp_sinus>:
    6924:	ef 93       	push	r30
    6926:	e0 ff       	sbrs	r30, 0
    6928:	06 c0       	rjmp	.+12     	; 0x6936 <__fp_sinus+0x12>
    692a:	a2 ea       	ldi	r26, 0xA2	; 162
    692c:	2a ed       	ldi	r18, 0xDA	; 218
    692e:	3f e0       	ldi	r19, 0x0F	; 15
    6930:	49 ec       	ldi	r20, 0xC9	; 201
    6932:	5f eb       	ldi	r21, 0xBF	; 191
    6934:	4b dd       	rcall	.-1386   	; 0x63cc <__addsf3x>
    6936:	e5 df       	rcall	.-54     	; 0x6902 <__fp_round>
    6938:	0f 90       	pop	r0
    693a:	03 94       	inc	r0
    693c:	01 fc       	sbrc	r0, 1
    693e:	90 58       	subi	r25, 0x80	; 128
    6940:	eb e0       	ldi	r30, 0x0B	; 11
    6942:	f1 e0       	ldi	r31, 0x01	; 1
    6944:	97 cf       	rjmp	.-210    	; 0x6874 <__fp_powsodd>

00006946 <__fp_split3>:
    6946:	57 fd       	sbrc	r21, 7
    6948:	90 58       	subi	r25, 0x80	; 128
    694a:	44 0f       	add	r20, r20
    694c:	55 1f       	adc	r21, r21
    694e:	59 f0       	breq	.+22     	; 0x6966 <__fp_splitA+0x10>
    6950:	5f 3f       	cpi	r21, 0xFF	; 255
    6952:	71 f0       	breq	.+28     	; 0x6970 <__fp_splitA+0x1a>
    6954:	47 95       	ror	r20

00006956 <__fp_splitA>:
    6956:	88 0f       	add	r24, r24
    6958:	97 fb       	bst	r25, 7
    695a:	99 1f       	adc	r25, r25
    695c:	61 f0       	breq	.+24     	; 0x6976 <__fp_splitA+0x20>
    695e:	9f 3f       	cpi	r25, 0xFF	; 255
    6960:	79 f0       	breq	.+30     	; 0x6980 <__fp_splitA+0x2a>
    6962:	87 95       	ror	r24
    6964:	08 95       	ret
    6966:	12 16       	cp	r1, r18
    6968:	13 06       	cpc	r1, r19
    696a:	14 06       	cpc	r1, r20
    696c:	55 1f       	adc	r21, r21
    696e:	f2 cf       	rjmp	.-28     	; 0x6954 <__fp_split3+0xe>
    6970:	46 95       	lsr	r20
    6972:	f1 df       	rcall	.-30     	; 0x6956 <__fp_splitA>
    6974:	08 c0       	rjmp	.+16     	; 0x6986 <__fp_splitA+0x30>
    6976:	16 16       	cp	r1, r22
    6978:	17 06       	cpc	r1, r23
    697a:	18 06       	cpc	r1, r24
    697c:	99 1f       	adc	r25, r25
    697e:	f1 cf       	rjmp	.-30     	; 0x6962 <__fp_splitA+0xc>
    6980:	86 95       	lsr	r24
    6982:	71 05       	cpc	r23, r1
    6984:	61 05       	cpc	r22, r1
    6986:	08 94       	sec
    6988:	08 95       	ret

0000698a <__fp_zero>:
    698a:	e8 94       	clt

0000698c <__fp_szero>:
    698c:	bb 27       	eor	r27, r27
    698e:	66 27       	eor	r22, r22
    6990:	77 27       	eor	r23, r23
    6992:	cb 01       	movw	r24, r22
    6994:	97 f9       	bld	r25, 7
    6996:	08 95       	ret

00006998 <__gesf2>:
    6998:	1b df       	rcall	.-458    	; 0x67d0 <__fp_cmp>
    699a:	08 f4       	brcc	.+2      	; 0x699e <__gesf2+0x6>
    699c:	8f ef       	ldi	r24, 0xFF	; 255
    699e:	08 95       	ret

000069a0 <inverse>:
    69a0:	9b 01       	movw	r18, r22
    69a2:	ac 01       	movw	r20, r24
    69a4:	60 e0       	ldi	r22, 0x00	; 0
    69a6:	70 e0       	ldi	r23, 0x00	; 0
    69a8:	80 e8       	ldi	r24, 0x80	; 128
    69aa:	9f e3       	ldi	r25, 0x3F	; 63
    69ac:	e2 cd       	rjmp	.-1084   	; 0x6572 <__divsf3>

000069ae <__mulsf3>:
    69ae:	0b d0       	rcall	.+22     	; 0x69c6 <__mulsf3x>
    69b0:	a8 cf       	rjmp	.-176    	; 0x6902 <__fp_round>
    69b2:	71 df       	rcall	.-286    	; 0x6896 <__fp_pscA>
    69b4:	28 f0       	brcs	.+10     	; 0x69c0 <__mulsf3+0x12>
    69b6:	76 df       	rcall	.-276    	; 0x68a4 <__fp_pscB>
    69b8:	18 f0       	brcs	.+6      	; 0x69c0 <__mulsf3+0x12>
    69ba:	95 23       	and	r25, r21
    69bc:	09 f0       	breq	.+2      	; 0x69c0 <__mulsf3+0x12>
    69be:	2c cf       	rjmp	.-424    	; 0x6818 <__fp_inf>
    69c0:	31 cf       	rjmp	.-414    	; 0x6824 <__fp_nan>
    69c2:	11 24       	eor	r1, r1
    69c4:	e3 cf       	rjmp	.-58     	; 0x698c <__fp_szero>

000069c6 <__mulsf3x>:
    69c6:	bf df       	rcall	.-130    	; 0x6946 <__fp_split3>
    69c8:	a0 f3       	brcs	.-24     	; 0x69b2 <__mulsf3+0x4>

000069ca <__mulsf3_pse>:
    69ca:	95 9f       	mul	r25, r21
    69cc:	d1 f3       	breq	.-12     	; 0x69c2 <__mulsf3+0x14>
    69ce:	95 0f       	add	r25, r21
    69d0:	50 e0       	ldi	r21, 0x00	; 0
    69d2:	55 1f       	adc	r21, r21
    69d4:	62 9f       	mul	r22, r18
    69d6:	f0 01       	movw	r30, r0
    69d8:	72 9f       	mul	r23, r18
    69da:	bb 27       	eor	r27, r27
    69dc:	f0 0d       	add	r31, r0
    69de:	b1 1d       	adc	r27, r1
    69e0:	63 9f       	mul	r22, r19
    69e2:	aa 27       	eor	r26, r26
    69e4:	f0 0d       	add	r31, r0
    69e6:	b1 1d       	adc	r27, r1
    69e8:	aa 1f       	adc	r26, r26
    69ea:	64 9f       	mul	r22, r20
    69ec:	66 27       	eor	r22, r22
    69ee:	b0 0d       	add	r27, r0
    69f0:	a1 1d       	adc	r26, r1
    69f2:	66 1f       	adc	r22, r22
    69f4:	82 9f       	mul	r24, r18
    69f6:	22 27       	eor	r18, r18
    69f8:	b0 0d       	add	r27, r0
    69fa:	a1 1d       	adc	r26, r1
    69fc:	62 1f       	adc	r22, r18
    69fe:	73 9f       	mul	r23, r19
    6a00:	b0 0d       	add	r27, r0
    6a02:	a1 1d       	adc	r26, r1
    6a04:	62 1f       	adc	r22, r18
    6a06:	83 9f       	mul	r24, r19
    6a08:	a0 0d       	add	r26, r0
    6a0a:	61 1d       	adc	r22, r1
    6a0c:	22 1f       	adc	r18, r18
    6a0e:	74 9f       	mul	r23, r20
    6a10:	33 27       	eor	r19, r19
    6a12:	a0 0d       	add	r26, r0
    6a14:	61 1d       	adc	r22, r1
    6a16:	23 1f       	adc	r18, r19
    6a18:	84 9f       	mul	r24, r20
    6a1a:	60 0d       	add	r22, r0
    6a1c:	21 1d       	adc	r18, r1
    6a1e:	82 2f       	mov	r24, r18
    6a20:	76 2f       	mov	r23, r22
    6a22:	6a 2f       	mov	r22, r26
    6a24:	11 24       	eor	r1, r1
    6a26:	9f 57       	subi	r25, 0x7F	; 127
    6a28:	50 40       	sbci	r21, 0x00	; 0
    6a2a:	8a f0       	brmi	.+34     	; 0x6a4e <__mulsf3_pse+0x84>
    6a2c:	e1 f0       	breq	.+56     	; 0x6a66 <__mulsf3_pse+0x9c>
    6a2e:	88 23       	and	r24, r24
    6a30:	4a f0       	brmi	.+18     	; 0x6a44 <__mulsf3_pse+0x7a>
    6a32:	ee 0f       	add	r30, r30
    6a34:	ff 1f       	adc	r31, r31
    6a36:	bb 1f       	adc	r27, r27
    6a38:	66 1f       	adc	r22, r22
    6a3a:	77 1f       	adc	r23, r23
    6a3c:	88 1f       	adc	r24, r24
    6a3e:	91 50       	subi	r25, 0x01	; 1
    6a40:	50 40       	sbci	r21, 0x00	; 0
    6a42:	a9 f7       	brne	.-22     	; 0x6a2e <__mulsf3_pse+0x64>
    6a44:	9e 3f       	cpi	r25, 0xFE	; 254
    6a46:	51 05       	cpc	r21, r1
    6a48:	70 f0       	brcs	.+28     	; 0x6a66 <__mulsf3_pse+0x9c>
    6a4a:	e6 ce       	rjmp	.-564    	; 0x6818 <__fp_inf>
    6a4c:	9f cf       	rjmp	.-194    	; 0x698c <__fp_szero>
    6a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    6a50:	ec f3       	brlt	.-6      	; 0x6a4c <__mulsf3_pse+0x82>
    6a52:	98 3e       	cpi	r25, 0xE8	; 232
    6a54:	dc f3       	brlt	.-10     	; 0x6a4c <__mulsf3_pse+0x82>
    6a56:	86 95       	lsr	r24
    6a58:	77 95       	ror	r23
    6a5a:	67 95       	ror	r22
    6a5c:	b7 95       	ror	r27
    6a5e:	f7 95       	ror	r31
    6a60:	e7 95       	ror	r30
    6a62:	9f 5f       	subi	r25, 0xFF	; 255
    6a64:	c1 f7       	brne	.-16     	; 0x6a56 <__mulsf3_pse+0x8c>
    6a66:	fe 2b       	or	r31, r30
    6a68:	88 0f       	add	r24, r24
    6a6a:	91 1d       	adc	r25, r1
    6a6c:	96 95       	lsr	r25
    6a6e:	87 95       	ror	r24
    6a70:	97 f9       	bld	r25, 7
    6a72:	08 95       	ret

00006a74 <pow>:
    6a74:	fa 01       	movw	r30, r20
    6a76:	ee 0f       	add	r30, r30
    6a78:	ff 1f       	adc	r31, r31
    6a7a:	30 96       	adiw	r30, 0x00	; 0
    6a7c:	21 05       	cpc	r18, r1
    6a7e:	31 05       	cpc	r19, r1
    6a80:	99 f1       	breq	.+102    	; 0x6ae8 <pow+0x74>
    6a82:	61 15       	cp	r22, r1
    6a84:	71 05       	cpc	r23, r1
    6a86:	61 f4       	brne	.+24     	; 0x6aa0 <pow+0x2c>
    6a88:	80 38       	cpi	r24, 0x80	; 128
    6a8a:	bf e3       	ldi	r27, 0x3F	; 63
    6a8c:	9b 07       	cpc	r25, r27
    6a8e:	49 f1       	breq	.+82     	; 0x6ae2 <pow+0x6e>
    6a90:	68 94       	set
    6a92:	90 38       	cpi	r25, 0x80	; 128
    6a94:	81 05       	cpc	r24, r1
    6a96:	61 f0       	breq	.+24     	; 0x6ab0 <pow+0x3c>
    6a98:	80 38       	cpi	r24, 0x80	; 128
    6a9a:	bf ef       	ldi	r27, 0xFF	; 255
    6a9c:	9b 07       	cpc	r25, r27
    6a9e:	41 f0       	breq	.+16     	; 0x6ab0 <pow+0x3c>
    6aa0:	99 23       	and	r25, r25
    6aa2:	42 f5       	brpl	.+80     	; 0x6af4 <pow+0x80>
    6aa4:	ff 3f       	cpi	r31, 0xFF	; 255
    6aa6:	e1 05       	cpc	r30, r1
    6aa8:	31 05       	cpc	r19, r1
    6aaa:	21 05       	cpc	r18, r1
    6aac:	11 f1       	breq	.+68     	; 0x6af2 <pow+0x7e>
    6aae:	e8 94       	clt
    6ab0:	08 94       	sec
    6ab2:	e7 95       	ror	r30
    6ab4:	d9 01       	movw	r26, r18
    6ab6:	aa 23       	and	r26, r26
    6ab8:	29 f4       	brne	.+10     	; 0x6ac4 <pow+0x50>
    6aba:	ab 2f       	mov	r26, r27
    6abc:	be 2f       	mov	r27, r30
    6abe:	f8 5f       	subi	r31, 0xF8	; 248
    6ac0:	d0 f3       	brcs	.-12     	; 0x6ab6 <pow+0x42>
    6ac2:	10 c0       	rjmp	.+32     	; 0x6ae4 <pow+0x70>
    6ac4:	ff 5f       	subi	r31, 0xFF	; 255
    6ac6:	70 f4       	brcc	.+28     	; 0x6ae4 <pow+0x70>
    6ac8:	a6 95       	lsr	r26
    6aca:	e0 f7       	brcc	.-8      	; 0x6ac4 <pow+0x50>
    6acc:	f7 39       	cpi	r31, 0x97	; 151
    6ace:	50 f0       	brcs	.+20     	; 0x6ae4 <pow+0x70>
    6ad0:	19 f0       	breq	.+6      	; 0x6ad8 <pow+0x64>
    6ad2:	ff 3a       	cpi	r31, 0xAF	; 175
    6ad4:	38 f4       	brcc	.+14     	; 0x6ae4 <pow+0x70>
    6ad6:	9f 77       	andi	r25, 0x7F	; 127
    6ad8:	9f 93       	push	r25
    6ada:	0c d0       	rcall	.+24     	; 0x6af4 <pow+0x80>
    6adc:	0f 90       	pop	r0
    6ade:	07 fc       	sbrc	r0, 7
    6ae0:	90 58       	subi	r25, 0x80	; 128
    6ae2:	08 95       	ret
    6ae4:	3e f0       	brts	.+14     	; 0x6af4 <pow+0x80>
    6ae6:	9e ce       	rjmp	.-708    	; 0x6824 <__fp_nan>
    6ae8:	60 e0       	ldi	r22, 0x00	; 0
    6aea:	70 e0       	ldi	r23, 0x00	; 0
    6aec:	80 e8       	ldi	r24, 0x80	; 128
    6aee:	9f e3       	ldi	r25, 0x3F	; 63
    6af0:	08 95       	ret
    6af2:	4f e7       	ldi	r20, 0x7F	; 127
    6af4:	9f 77       	andi	r25, 0x7F	; 127
    6af6:	5f 93       	push	r21
    6af8:	4f 93       	push	r20
    6afa:	3f 93       	push	r19
    6afc:	2f 93       	push	r18
    6afe:	d2 d0       	rcall	.+420    	; 0x6ca4 <log>
    6b00:	2f 91       	pop	r18
    6b02:	3f 91       	pop	r19
    6b04:	4f 91       	pop	r20
    6b06:	5f 91       	pop	r21
    6b08:	52 df       	rcall	.-348    	; 0x69ae <__mulsf3>
    6b0a:	50 c0       	rjmp	.+160    	; 0x6bac <exp>

00006b0c <sin>:
    6b0c:	9f 93       	push	r25
    6b0e:	d2 de       	rcall	.-604    	; 0x68b4 <__fp_rempio2>
    6b10:	0f 90       	pop	r0
    6b12:	07 fc       	sbrc	r0, 7
    6b14:	ee 5f       	subi	r30, 0xFE	; 254
    6b16:	06 cf       	rjmp	.-500    	; 0x6924 <__fp_sinus>
    6b18:	11 f4       	brne	.+4      	; 0x6b1e <sin+0x12>
    6b1a:	0e f4       	brtc	.+2      	; 0x6b1e <sin+0x12>
    6b1c:	83 ce       	rjmp	.-762    	; 0x6824 <__fp_nan>
    6b1e:	72 c0       	rjmp	.+228    	; 0x6c04 <__fp_mpack>

00006b20 <sqrt>:
    6b20:	1a df       	rcall	.-460    	; 0x6956 <__fp_splitA>
    6b22:	d0 f3       	brcs	.-12     	; 0x6b18 <sin+0xc>
    6b24:	99 23       	and	r25, r25
    6b26:	d9 f3       	breq	.-10     	; 0x6b1e <sin+0x12>
    6b28:	ce f3       	brts	.-14     	; 0x6b1c <sin+0x10>
    6b2a:	9f 57       	subi	r25, 0x7F	; 127
    6b2c:	55 0b       	sbc	r21, r21
    6b2e:	87 ff       	sbrs	r24, 7
    6b30:	77 d0       	rcall	.+238    	; 0x6c20 <__fp_norm2>
    6b32:	00 24       	eor	r0, r0
    6b34:	a0 e6       	ldi	r26, 0x60	; 96
    6b36:	40 ea       	ldi	r20, 0xA0	; 160
    6b38:	90 01       	movw	r18, r0
    6b3a:	80 58       	subi	r24, 0x80	; 128
    6b3c:	56 95       	lsr	r21
    6b3e:	97 95       	ror	r25
    6b40:	28 f4       	brcc	.+10     	; 0x6b4c <sqrt+0x2c>
    6b42:	80 5c       	subi	r24, 0xC0	; 192
    6b44:	66 0f       	add	r22, r22
    6b46:	77 1f       	adc	r23, r23
    6b48:	88 1f       	adc	r24, r24
    6b4a:	20 f0       	brcs	.+8      	; 0x6b54 <sqrt+0x34>
    6b4c:	26 17       	cp	r18, r22
    6b4e:	37 07       	cpc	r19, r23
    6b50:	48 07       	cpc	r20, r24
    6b52:	30 f4       	brcc	.+12     	; 0x6b60 <sqrt+0x40>
    6b54:	62 1b       	sub	r22, r18
    6b56:	73 0b       	sbc	r23, r19
    6b58:	84 0b       	sbc	r24, r20
    6b5a:	20 29       	or	r18, r0
    6b5c:	31 29       	or	r19, r1
    6b5e:	4a 2b       	or	r20, r26
    6b60:	a6 95       	lsr	r26
    6b62:	17 94       	ror	r1
    6b64:	07 94       	ror	r0
    6b66:	20 25       	eor	r18, r0
    6b68:	31 25       	eor	r19, r1
    6b6a:	4a 27       	eor	r20, r26
    6b6c:	58 f7       	brcc	.-42     	; 0x6b44 <sqrt+0x24>
    6b6e:	66 0f       	add	r22, r22
    6b70:	77 1f       	adc	r23, r23
    6b72:	88 1f       	adc	r24, r24
    6b74:	20 f0       	brcs	.+8      	; 0x6b7e <sqrt+0x5e>
    6b76:	26 17       	cp	r18, r22
    6b78:	37 07       	cpc	r19, r23
    6b7a:	48 07       	cpc	r20, r24
    6b7c:	30 f4       	brcc	.+12     	; 0x6b8a <sqrt+0x6a>
    6b7e:	62 0b       	sbc	r22, r18
    6b80:	73 0b       	sbc	r23, r19
    6b82:	84 0b       	sbc	r24, r20
    6b84:	20 0d       	add	r18, r0
    6b86:	31 1d       	adc	r19, r1
    6b88:	41 1d       	adc	r20, r1
    6b8a:	a0 95       	com	r26
    6b8c:	81 f7       	brne	.-32     	; 0x6b6e <sqrt+0x4e>
    6b8e:	b9 01       	movw	r22, r18
    6b90:	84 2f       	mov	r24, r20
    6b92:	91 58       	subi	r25, 0x81	; 129
    6b94:	88 0f       	add	r24, r24
    6b96:	96 95       	lsr	r25
    6b98:	87 95       	ror	r24
    6b9a:	08 95       	ret

00006b9c <square>:
    6b9c:	9b 01       	movw	r18, r22
    6b9e:	ac 01       	movw	r20, r24
    6ba0:	06 cf       	rjmp	.-500    	; 0x69ae <__mulsf3>
    6ba2:	19 f4       	brne	.+6      	; 0x6baa <square+0xe>
    6ba4:	0e f0       	brts	.+2      	; 0x6ba8 <square+0xc>
    6ba6:	38 ce       	rjmp	.-912    	; 0x6818 <__fp_inf>
    6ba8:	f0 ce       	rjmp	.-544    	; 0x698a <__fp_zero>
    6baa:	3c ce       	rjmp	.-904    	; 0x6824 <__fp_nan>

00006bac <exp>:
    6bac:	d4 de       	rcall	.-600    	; 0x6956 <__fp_splitA>
    6bae:	c8 f3       	brcs	.-14     	; 0x6ba2 <square+0x6>
    6bb0:	96 38       	cpi	r25, 0x86	; 134
    6bb2:	c0 f7       	brcc	.-16     	; 0x6ba4 <square+0x8>
    6bb4:	07 f8       	bld	r0, 7
    6bb6:	0f 92       	push	r0
    6bb8:	e8 94       	clt
    6bba:	2b e3       	ldi	r18, 0x3B	; 59
    6bbc:	3a ea       	ldi	r19, 0xAA	; 170
    6bbe:	48 eb       	ldi	r20, 0xB8	; 184
    6bc0:	5f e7       	ldi	r21, 0x7F	; 127
    6bc2:	03 df       	rcall	.-506    	; 0x69ca <__mulsf3_pse>
    6bc4:	0f 92       	push	r0
    6bc6:	0f 92       	push	r0
    6bc8:	0f 92       	push	r0
    6bca:	4d b7       	in	r20, 0x3d	; 61
    6bcc:	5e b7       	in	r21, 0x3e	; 62
    6bce:	0f 92       	push	r0
    6bd0:	a9 d0       	rcall	.+338    	; 0x6d24 <modf>
    6bd2:	e9 e2       	ldi	r30, 0x29	; 41
    6bd4:	f1 e0       	ldi	r31, 0x01	; 1
    6bd6:	29 de       	rcall	.-942    	; 0x682a <__fp_powser>
    6bd8:	4f 91       	pop	r20
    6bda:	5f 91       	pop	r21
    6bdc:	ef 91       	pop	r30
    6bde:	ff 91       	pop	r31
    6be0:	e5 95       	asr	r30
    6be2:	ee 1f       	adc	r30, r30
    6be4:	ff 1f       	adc	r31, r31
    6be6:	49 f0       	breq	.+18     	; 0x6bfa <exp+0x4e>
    6be8:	fe 57       	subi	r31, 0x7E	; 126
    6bea:	e0 68       	ori	r30, 0x80	; 128
    6bec:	44 27       	eor	r20, r20
    6bee:	ee 0f       	add	r30, r30
    6bf0:	44 1f       	adc	r20, r20
    6bf2:	fa 95       	dec	r31
    6bf4:	e1 f7       	brne	.-8      	; 0x6bee <exp+0x42>
    6bf6:	41 95       	neg	r20
    6bf8:	55 0b       	sbc	r21, r21
    6bfa:	1b d0       	rcall	.+54     	; 0x6c32 <ldexp>
    6bfc:	0f 90       	pop	r0
    6bfe:	07 fe       	sbrs	r0, 7
    6c00:	cf ce       	rjmp	.-610    	; 0x69a0 <inverse>
    6c02:	08 95       	ret

00006c04 <__fp_mpack>:
    6c04:	9f 3f       	cpi	r25, 0xFF	; 255
    6c06:	31 f0       	breq	.+12     	; 0x6c14 <__fp_mpack_finite+0xc>

00006c08 <__fp_mpack_finite>:
    6c08:	91 50       	subi	r25, 0x01	; 1
    6c0a:	20 f4       	brcc	.+8      	; 0x6c14 <__fp_mpack_finite+0xc>
    6c0c:	87 95       	ror	r24
    6c0e:	77 95       	ror	r23
    6c10:	67 95       	ror	r22
    6c12:	b7 95       	ror	r27
    6c14:	88 0f       	add	r24, r24
    6c16:	91 1d       	adc	r25, r1
    6c18:	96 95       	lsr	r25
    6c1a:	87 95       	ror	r24
    6c1c:	97 f9       	bld	r25, 7
    6c1e:	08 95       	ret

00006c20 <__fp_norm2>:
    6c20:	91 50       	subi	r25, 0x01	; 1
    6c22:	50 40       	sbci	r21, 0x00	; 0
    6c24:	66 0f       	add	r22, r22
    6c26:	77 1f       	adc	r23, r23
    6c28:	88 1f       	adc	r24, r24
    6c2a:	d2 f7       	brpl	.-12     	; 0x6c20 <__fp_norm2>
    6c2c:	08 95       	ret
    6c2e:	f4 cd       	rjmp	.-1048   	; 0x6818 <__fp_inf>
    6c30:	e9 cf       	rjmp	.-46     	; 0x6c04 <__fp_mpack>

00006c32 <ldexp>:
    6c32:	91 de       	rcall	.-734    	; 0x6956 <__fp_splitA>
    6c34:	e8 f3       	brcs	.-6      	; 0x6c30 <__fp_norm2+0x10>
    6c36:	99 23       	and	r25, r25
    6c38:	d9 f3       	breq	.-10     	; 0x6c30 <__fp_norm2+0x10>
    6c3a:	94 0f       	add	r25, r20
    6c3c:	51 1d       	adc	r21, r1
    6c3e:	bb f3       	brvs	.-18     	; 0x6c2e <__fp_norm2+0xe>
    6c40:	91 50       	subi	r25, 0x01	; 1
    6c42:	50 40       	sbci	r21, 0x00	; 0
    6c44:	94 f0       	brlt	.+36     	; 0x6c6a <ldexp+0x38>
    6c46:	59 f0       	breq	.+22     	; 0x6c5e <ldexp+0x2c>
    6c48:	88 23       	and	r24, r24
    6c4a:	32 f0       	brmi	.+12     	; 0x6c58 <ldexp+0x26>
    6c4c:	66 0f       	add	r22, r22
    6c4e:	77 1f       	adc	r23, r23
    6c50:	88 1f       	adc	r24, r24
    6c52:	91 50       	subi	r25, 0x01	; 1
    6c54:	50 40       	sbci	r21, 0x00	; 0
    6c56:	c1 f7       	brne	.-16     	; 0x6c48 <ldexp+0x16>
    6c58:	9e 3f       	cpi	r25, 0xFE	; 254
    6c5a:	51 05       	cpc	r21, r1
    6c5c:	44 f7       	brge	.-48     	; 0x6c2e <__fp_norm2+0xe>
    6c5e:	88 0f       	add	r24, r24
    6c60:	91 1d       	adc	r25, r1
    6c62:	96 95       	lsr	r25
    6c64:	87 95       	ror	r24
    6c66:	97 f9       	bld	r25, 7
    6c68:	08 95       	ret
    6c6a:	5f 3f       	cpi	r21, 0xFF	; 255
    6c6c:	ac f0       	brlt	.+42     	; 0x6c98 <ldexp+0x66>
    6c6e:	98 3e       	cpi	r25, 0xE8	; 232
    6c70:	9c f0       	brlt	.+38     	; 0x6c98 <ldexp+0x66>
    6c72:	bb 27       	eor	r27, r27
    6c74:	86 95       	lsr	r24
    6c76:	77 95       	ror	r23
    6c78:	67 95       	ror	r22
    6c7a:	b7 95       	ror	r27
    6c7c:	08 f4       	brcc	.+2      	; 0x6c80 <ldexp+0x4e>
    6c7e:	b1 60       	ori	r27, 0x01	; 1
    6c80:	93 95       	inc	r25
    6c82:	c1 f7       	brne	.-16     	; 0x6c74 <ldexp+0x42>
    6c84:	bb 0f       	add	r27, r27
    6c86:	58 f7       	brcc	.-42     	; 0x6c5e <ldexp+0x2c>
    6c88:	11 f4       	brne	.+4      	; 0x6c8e <ldexp+0x5c>
    6c8a:	60 ff       	sbrs	r22, 0
    6c8c:	e8 cf       	rjmp	.-48     	; 0x6c5e <ldexp+0x2c>
    6c8e:	6f 5f       	subi	r22, 0xFF	; 255
    6c90:	7f 4f       	sbci	r23, 0xFF	; 255
    6c92:	8f 4f       	sbci	r24, 0xFF	; 255
    6c94:	9f 4f       	sbci	r25, 0xFF	; 255
    6c96:	e3 cf       	rjmp	.-58     	; 0x6c5e <ldexp+0x2c>
    6c98:	79 ce       	rjmp	.-782    	; 0x698c <__fp_szero>
    6c9a:	0e f0       	brts	.+2      	; 0x6c9e <ldexp+0x6c>
    6c9c:	b3 cf       	rjmp	.-154    	; 0x6c04 <__fp_mpack>
    6c9e:	c2 cd       	rjmp	.-1148   	; 0x6824 <__fp_nan>
    6ca0:	68 94       	set
    6ca2:	ba cd       	rjmp	.-1164   	; 0x6818 <__fp_inf>

00006ca4 <log>:
    6ca4:	58 de       	rcall	.-848    	; 0x6956 <__fp_splitA>
    6ca6:	c8 f3       	brcs	.-14     	; 0x6c9a <ldexp+0x68>
    6ca8:	99 23       	and	r25, r25
    6caa:	d1 f3       	breq	.-12     	; 0x6ca0 <ldexp+0x6e>
    6cac:	c6 f3       	brts	.-16     	; 0x6c9e <ldexp+0x6c>
    6cae:	df 93       	push	r29
    6cb0:	cf 93       	push	r28
    6cb2:	1f 93       	push	r17
    6cb4:	0f 93       	push	r16
    6cb6:	ff 92       	push	r15
    6cb8:	c9 2f       	mov	r28, r25
    6cba:	dd 27       	eor	r29, r29
    6cbc:	88 23       	and	r24, r24
    6cbe:	2a f0       	brmi	.+10     	; 0x6cca <log+0x26>
    6cc0:	21 97       	sbiw	r28, 0x01	; 1
    6cc2:	66 0f       	add	r22, r22
    6cc4:	77 1f       	adc	r23, r23
    6cc6:	88 1f       	adc	r24, r24
    6cc8:	da f7       	brpl	.-10     	; 0x6cc0 <log+0x1c>
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	40 e8       	ldi	r20, 0x80	; 128
    6cd0:	5f eb       	ldi	r21, 0xBF	; 191
    6cd2:	9f e3       	ldi	r25, 0x3F	; 63
    6cd4:	88 39       	cpi	r24, 0x98	; 152
    6cd6:	20 f0       	brcs	.+8      	; 0x6ce0 <log+0x3c>
    6cd8:	80 3e       	cpi	r24, 0xE0	; 224
    6cda:	30 f0       	brcs	.+12     	; 0x6ce8 <log+0x44>
    6cdc:	21 96       	adiw	r28, 0x01	; 1
    6cde:	8f 77       	andi	r24, 0x7F	; 127
    6ce0:	64 db       	rcall	.-2360   	; 0x63aa <__addsf3>
    6ce2:	e1 e5       	ldi	r30, 0x51	; 81
    6ce4:	f1 e0       	ldi	r31, 0x01	; 1
    6ce6:	03 c0       	rjmp	.+6      	; 0x6cee <log+0x4a>
    6ce8:	60 db       	rcall	.-2368   	; 0x63aa <__addsf3>
    6cea:	ee e7       	ldi	r30, 0x7E	; 126
    6cec:	f1 e0       	ldi	r31, 0x01	; 1
    6cee:	9d dd       	rcall	.-1222   	; 0x682a <__fp_powser>
    6cf0:	8b 01       	movw	r16, r22
    6cf2:	be 01       	movw	r22, r28
    6cf4:	ec 01       	movw	r28, r24
    6cf6:	fb 2e       	mov	r15, r27
    6cf8:	6f 57       	subi	r22, 0x7F	; 127
    6cfa:	71 09       	sbc	r23, r1
    6cfc:	75 95       	asr	r23
    6cfe:	77 1f       	adc	r23, r23
    6d00:	88 0b       	sbc	r24, r24
    6d02:	99 0b       	sbc	r25, r25
    6d04:	d1 dc       	rcall	.-1630   	; 0x66a8 <__floatsisf>
    6d06:	28 e1       	ldi	r18, 0x18	; 24
    6d08:	32 e7       	ldi	r19, 0x72	; 114
    6d0a:	41 e3       	ldi	r20, 0x31	; 49
    6d0c:	5f e3       	ldi	r21, 0x3F	; 63
    6d0e:	5b de       	rcall	.-842    	; 0x69c6 <__mulsf3x>
    6d10:	af 2d       	mov	r26, r15
    6d12:	98 01       	movw	r18, r16
    6d14:	ae 01       	movw	r20, r28
    6d16:	ff 90       	pop	r15
    6d18:	0f 91       	pop	r16
    6d1a:	1f 91       	pop	r17
    6d1c:	cf 91       	pop	r28
    6d1e:	df 91       	pop	r29
    6d20:	55 db       	rcall	.-2390   	; 0x63cc <__addsf3x>
    6d22:	ef cd       	rjmp	.-1058   	; 0x6902 <__fp_round>

00006d24 <modf>:
    6d24:	fa 01       	movw	r30, r20
    6d26:	dc 01       	movw	r26, r24
    6d28:	aa 0f       	add	r26, r26
    6d2a:	bb 1f       	adc	r27, r27
    6d2c:	9b 01       	movw	r18, r22
    6d2e:	ac 01       	movw	r20, r24
    6d30:	bf 57       	subi	r27, 0x7F	; 127
    6d32:	28 f4       	brcc	.+10     	; 0x6d3e <modf+0x1a>
    6d34:	22 27       	eor	r18, r18
    6d36:	33 27       	eor	r19, r19
    6d38:	44 27       	eor	r20, r20
    6d3a:	50 78       	andi	r21, 0x80	; 128
    6d3c:	1f c0       	rjmp	.+62     	; 0x6d7c <modf+0x58>
    6d3e:	b7 51       	subi	r27, 0x17	; 23
    6d40:	88 f4       	brcc	.+34     	; 0x6d64 <modf+0x40>
    6d42:	ab 2f       	mov	r26, r27
    6d44:	00 24       	eor	r0, r0
    6d46:	46 95       	lsr	r20
    6d48:	37 95       	ror	r19
    6d4a:	27 95       	ror	r18
    6d4c:	01 1c       	adc	r0, r1
    6d4e:	a3 95       	inc	r26
    6d50:	d2 f3       	brmi	.-12     	; 0x6d46 <modf+0x22>
    6d52:	00 20       	and	r0, r0
    6d54:	69 f0       	breq	.+26     	; 0x6d70 <modf+0x4c>
    6d56:	22 0f       	add	r18, r18
    6d58:	33 1f       	adc	r19, r19
    6d5a:	44 1f       	adc	r20, r20
    6d5c:	b3 95       	inc	r27
    6d5e:	da f3       	brmi	.-10     	; 0x6d56 <modf+0x32>
    6d60:	0d d0       	rcall	.+26     	; 0x6d7c <modf+0x58>
    6d62:	22 cb       	rjmp	.-2492   	; 0x63a8 <__subsf3>
    6d64:	61 30       	cpi	r22, 0x01	; 1
    6d66:	71 05       	cpc	r23, r1
    6d68:	a0 e8       	ldi	r26, 0x80	; 128
    6d6a:	8a 07       	cpc	r24, r26
    6d6c:	b9 46       	sbci	r27, 0x69	; 105
    6d6e:	30 f4       	brcc	.+12     	; 0x6d7c <modf+0x58>
    6d70:	9b 01       	movw	r18, r22
    6d72:	ac 01       	movw	r20, r24
    6d74:	66 27       	eor	r22, r22
    6d76:	77 27       	eor	r23, r23
    6d78:	88 27       	eor	r24, r24
    6d7a:	90 78       	andi	r25, 0x80	; 128
    6d7c:	30 96       	adiw	r30, 0x00	; 0
    6d7e:	21 f0       	breq	.+8      	; 0x6d88 <modf+0x64>
    6d80:	20 83       	st	Z, r18
    6d82:	31 83       	std	Z+1, r19	; 0x01
    6d84:	42 83       	std	Z+2, r20	; 0x02
    6d86:	53 83       	std	Z+3, r21	; 0x03
    6d88:	08 95       	ret

00006d8a <__divmodhi4>:
    6d8a:	97 fb       	bst	r25, 7
    6d8c:	07 2e       	mov	r0, r23
    6d8e:	16 f4       	brtc	.+4      	; 0x6d94 <__divmodhi4+0xa>
    6d90:	00 94       	com	r0
    6d92:	06 d0       	rcall	.+12     	; 0x6da0 <__divmodhi4_neg1>
    6d94:	77 fd       	sbrc	r23, 7
    6d96:	08 d0       	rcall	.+16     	; 0x6da8 <__divmodhi4_neg2>
    6d98:	60 d0       	rcall	.+192    	; 0x6e5a <__udivmodhi4>
    6d9a:	07 fc       	sbrc	r0, 7
    6d9c:	05 d0       	rcall	.+10     	; 0x6da8 <__divmodhi4_neg2>
    6d9e:	3e f4       	brtc	.+14     	; 0x6dae <__divmodhi4_exit>

00006da0 <__divmodhi4_neg1>:
    6da0:	90 95       	com	r25
    6da2:	81 95       	neg	r24
    6da4:	9f 4f       	sbci	r25, 0xFF	; 255
    6da6:	08 95       	ret

00006da8 <__divmodhi4_neg2>:
    6da8:	70 95       	com	r23
    6daa:	61 95       	neg	r22
    6dac:	7f 4f       	sbci	r23, 0xFF	; 255

00006dae <__divmodhi4_exit>:
    6dae:	08 95       	ret

00006db0 <__tablejump2__>:
    6db0:	ee 0f       	add	r30, r30
    6db2:	ff 1f       	adc	r31, r31

00006db4 <__tablejump__>:
    6db4:	05 90       	lpm	r0, Z+
    6db6:	f4 91       	lpm	r31, Z
    6db8:	e0 2d       	mov	r30, r0
    6dba:	09 94       	ijmp

00006dbc <__umulhisi3>:
    6dbc:	a2 9f       	mul	r26, r18
    6dbe:	b0 01       	movw	r22, r0
    6dc0:	b3 9f       	mul	r27, r19
    6dc2:	c0 01       	movw	r24, r0
    6dc4:	a3 9f       	mul	r26, r19
    6dc6:	70 0d       	add	r23, r0
    6dc8:	81 1d       	adc	r24, r1
    6dca:	11 24       	eor	r1, r1
    6dcc:	91 1d       	adc	r25, r1
    6dce:	b2 9f       	mul	r27, r18
    6dd0:	70 0d       	add	r23, r0
    6dd2:	81 1d       	adc	r24, r1
    6dd4:	11 24       	eor	r1, r1
    6dd6:	91 1d       	adc	r25, r1
    6dd8:	08 95       	ret

00006dda <__ashldi3>:
    6dda:	0f 93       	push	r16
    6ddc:	08 30       	cpi	r16, 0x08	; 8
    6dde:	90 f0       	brcs	.+36     	; 0x6e04 <__ashldi3+0x2a>
    6de0:	98 2f       	mov	r25, r24
    6de2:	87 2f       	mov	r24, r23
    6de4:	76 2f       	mov	r23, r22
    6de6:	65 2f       	mov	r22, r21
    6de8:	54 2f       	mov	r21, r20
    6dea:	43 2f       	mov	r20, r19
    6dec:	32 2f       	mov	r19, r18
    6dee:	22 27       	eor	r18, r18
    6df0:	08 50       	subi	r16, 0x08	; 8
    6df2:	f4 cf       	rjmp	.-24     	; 0x6ddc <__ashldi3+0x2>
    6df4:	22 0f       	add	r18, r18
    6df6:	33 1f       	adc	r19, r19
    6df8:	44 1f       	adc	r20, r20
    6dfa:	55 1f       	adc	r21, r21
    6dfc:	66 1f       	adc	r22, r22
    6dfe:	77 1f       	adc	r23, r23
    6e00:	88 1f       	adc	r24, r24
    6e02:	99 1f       	adc	r25, r25
    6e04:	0a 95       	dec	r16
    6e06:	b2 f7       	brpl	.-20     	; 0x6df4 <__ashldi3+0x1a>
    6e08:	0f 91       	pop	r16
    6e0a:	08 95       	ret

00006e0c <__adddi3>:
    6e0c:	2a 0d       	add	r18, r10
    6e0e:	3b 1d       	adc	r19, r11
    6e10:	4c 1d       	adc	r20, r12
    6e12:	5d 1d       	adc	r21, r13
    6e14:	6e 1d       	adc	r22, r14
    6e16:	7f 1d       	adc	r23, r15
    6e18:	80 1f       	adc	r24, r16
    6e1a:	91 1f       	adc	r25, r17
    6e1c:	08 95       	ret

00006e1e <__adddi3_s8>:
    6e1e:	00 24       	eor	r0, r0
    6e20:	a7 fd       	sbrc	r26, 7
    6e22:	00 94       	com	r0
    6e24:	2a 0f       	add	r18, r26
    6e26:	30 1d       	adc	r19, r0
    6e28:	40 1d       	adc	r20, r0
    6e2a:	50 1d       	adc	r21, r0
    6e2c:	60 1d       	adc	r22, r0
    6e2e:	70 1d       	adc	r23, r0
    6e30:	80 1d       	adc	r24, r0
    6e32:	90 1d       	adc	r25, r0
    6e34:	08 95       	ret

00006e36 <__subdi3>:
    6e36:	2a 19       	sub	r18, r10
    6e38:	3b 09       	sbc	r19, r11
    6e3a:	4c 09       	sbc	r20, r12
    6e3c:	5d 09       	sbc	r21, r13
    6e3e:	6e 09       	sbc	r22, r14
    6e40:	7f 09       	sbc	r23, r15
    6e42:	80 0b       	sbc	r24, r16
    6e44:	91 0b       	sbc	r25, r17
    6e46:	08 95       	ret

00006e48 <__cmpdi2>:
    6e48:	2a 15       	cp	r18, r10
    6e4a:	3b 05       	cpc	r19, r11
    6e4c:	4c 05       	cpc	r20, r12
    6e4e:	5d 05       	cpc	r21, r13
    6e50:	6e 05       	cpc	r22, r14
    6e52:	7f 05       	cpc	r23, r15
    6e54:	80 07       	cpc	r24, r16
    6e56:	91 07       	cpc	r25, r17
    6e58:	08 95       	ret

00006e5a <__udivmodhi4>:
    6e5a:	aa 1b       	sub	r26, r26
    6e5c:	bb 1b       	sub	r27, r27
    6e5e:	51 e1       	ldi	r21, 0x11	; 17
    6e60:	07 c0       	rjmp	.+14     	; 0x6e70 <__udivmodhi4_ep>

00006e62 <__udivmodhi4_loop>:
    6e62:	aa 1f       	adc	r26, r26
    6e64:	bb 1f       	adc	r27, r27
    6e66:	a6 17       	cp	r26, r22
    6e68:	b7 07       	cpc	r27, r23
    6e6a:	10 f0       	brcs	.+4      	; 0x6e70 <__udivmodhi4_ep>
    6e6c:	a6 1b       	sub	r26, r22
    6e6e:	b7 0b       	sbc	r27, r23

00006e70 <__udivmodhi4_ep>:
    6e70:	88 1f       	adc	r24, r24
    6e72:	99 1f       	adc	r25, r25
    6e74:	5a 95       	dec	r21
    6e76:	a9 f7       	brne	.-22     	; 0x6e62 <__udivmodhi4_loop>
    6e78:	80 95       	com	r24
    6e7a:	90 95       	com	r25
    6e7c:	bc 01       	movw	r22, r24
    6e7e:	cd 01       	movw	r24, r26
    6e80:	08 95       	ret

00006e82 <_exit>:
    6e82:	f8 94       	cli

00006e84 <__stop_program>:
    6e84:	ff cf       	rjmp	.-2      	; 0x6e84 <__stop_program>
